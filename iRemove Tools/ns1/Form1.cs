using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Windows.Forms;
using iRemoveTools.Properties;
using MaterialSkin;
using MaterialSkin.Controls;
using Microsoft.Win32;
using Newtonsoft.Json;
using ns2;
using ns5;
using ns6;
using ns7;

namespace ns1
{
	// Token: 0x02000007 RID: 7
	public class Form1 : MaterialForm
	{
		// Token: 0x0600001E RID: 30 RVA: 0x0000E274 File Offset: 0x0000C474
		public Form1()
		{
			this.InitializeComponent();
			this.gclass18_0 = new GClass18();
			new GClass14();
			this.method_60();
			this.gclass7_0 = new GClass7();
			this.gclass15_0 = new GClass15();
			this.gclass17_0 = new GClass17();
			this.class1_0 = new Class1(this);
			this.gclass12_0 = new GClass12(this.gclass17_0);
			this.gclass10_0 = new GClass10();
			this.DoubleBuffered = true;
			this.startButton.Focus();
			this.materialSkinManager_0 = MaterialSkinManager.Instance;
			this.materialSkinManager_0.AddFormToManage(this);
			this.materialSkinManager_0.Theme = 1;
			this.materialSkinManager_0.ColorScheme = new ColorScheme(240116, 166097, 11789820, 45311, 16777215);
			this.windowTitle.Text = this.windowTitle.Text + " " + Application.ProductVersion;
			this.statusColor.BackColor = Color.FromArgb(100, 255, 255, 255);
		}

		// Token: 0x0600001F RID: 31 RVA: 0x0000E3C4 File Offset: 0x0000C5C4
		public void method_0()
		{
			this.bool_2 = false;
			this.thread_0 = new Thread(new ThreadStart(this.method_1));
			this.thread_0.IsBackground = true;
			this.thread_0.Start();
		}

		// Token: 0x06000020 RID: 32 RVA: 0x0000E408 File Offset: 0x0000C608
		public void method_1()
		{
			this.method_44();
			if (!this.bool_2)
			{
				this.method_52();
				this.bool_5 = false;
				GClass14.bool_8 = false;
				GClass14.dictionary_0[this.gclass18_0.method_2("mqIWbMuCHO8MnJLxlJKWhQ==")] = GClass14.gclass2_0.BasebandStatus;
				if (!this.method_27(true))
				{
					this.method_38();
					this.class1_0.method_0(GClass14.string_15, "OK", "");
				}
				else if (!this.bool_2)
				{
					if (!GClass14.string_2.Equals(this.gclass18_0.method_2("rD8PxkfdZPPKoruXYYpucQ==")) && !GClass14.string_2.Equals(this.gclass18_0.method_2("S7pYM3u3wTQv09mefqYjv+66hlGk3yMjDYBHPeyNWlU=")) && !GClass14.string_2.Equals(this.gclass18_0.method_2("vMYcREZ56C0dRqxB3Je3fY0qCkCjieI1AXkVBrB4spQ=")) && !GClass14.string_2.Equals(this.gclass18_0.method_2("fl7iVAwaX6k1mf0P9btFGMSdleOxtHbVwNVeGmMbYis=")) && !GClass14.string_2.Equals(this.gclass18_0.method_2("+mw7/apTJ95Sj069kywAVg==")))
					{
						this.gclass7_0.method_0("error", this.gclass18_0.method_2("aIXJ08X/xWCJRC/w9mL61FaoodGGOYCPwwFQgVC65gk="));
						this.method_38();
						this.class1_0.method_0(GClass14.bypassError2, "OK", "");
					}
					else if (GClass14.string_2.Equals(this.gclass18_0.method_2("rD8PxkfdZPPKoruXYYpucQ==")) || GClass14.string_2.Equals(this.gclass18_0.method_2("S7pYM3u3wTQv09mefqYjv+66hlGk3yMjDYBHPeyNWlU=")))
					{
						if (!this.method_5())
						{
							this.method_38();
						}
						else
						{
							GClass14.gclass2_0.method_26();
							string text = GClass14.gclass2_0.method_54();
							if (text == null || !text.Contains(this.gclass18_0.method_2("zoqYC1GLhyTWzyCXv3l2flFcMWd5qPOJXcFW+jkgb9w=")))
							{
								this.method_38();
								this.gclass7_0.method_0("error", this.gclass18_0.method_2("HKPzXNiI3AdzhuoiCpm2UA=="));
								this.class1_0.method_0(GClass14.string_10, "OK", "");
							}
							else
							{
								Dictionary<string, string> dictionary = new Dictionary<string, string>();
								dictionary.Add(this.gclass18_0.method_2("IHtFla+vZ8XTwKyEzUY4Hw=="), text);
								string text2 = this.method_17(this.gclass18_0.method_2("49SvX89NwHP2w6uusFq/hHR4JYXyxmpcTj9qCSMhsfE="), dictionary);
								if (text2 == null)
								{
									this.method_38();
								}
								else
								{
									GClass11 gclass = new GClass11();
									byte[] bytes = gclass.method_6(text2, this.gclass18_0.method_2("ixepOVull6wf5LUX3ZHV/WchtMlpuV1jOsDk6iyBY8A="), this.gclass18_0.method_2("CGe2ySCZpXrpX2XVqSIWOGbM6Er+JeJhRWYNDBjhqOs="));
									UTF8Encoding utf8Encoding = new UTF8Encoding();
									string @string = utf8Encoding.GetString(bytes);
									if (!GClass14.gclass2_0.method_23(@string))
									{
										this.method_38();
										this.gclass7_0.method_0("error", this.gclass18_0.method_2("TEXeATADgd6WOjbKgsKQxQ=="));
										this.class1_0.method_0(GClass14.string_42, "OK", "");
									}
									else
									{
										if (GClass14.gclass2_0.method_48() == null)
										{
											if (!this.method_57())
											{
												this.method_38();
												return;
											}
											string text3 = GClass14.string_2;
											GClass14.bool_8 = true;
											this.gclass15_0.method_0("idevicediagnostics", "--udid " + GClass14.dictionary_0[this.gclass18_0.method_2("9RTu7arVM/dkUpIzP5i54g==")] + " restart", false);
											Thread.Sleep(15000);
											int i = 0;
											while (i < 60)
											{
												Thread.Sleep(1000);
												if (!this.method_47())
												{
													i++;
												}
												else
												{
													Thread.Sleep(2000);
													IL_3C2:
													GClass14.string_2 = text3;
													GClass14.bool_8 = false;
													if (!this.method_47())
													{
														base.Invoke(new Action(delegate()
														{
															this.connectedPanel.Hide();
															this.noConnectPanel.Show();
														}));
														this.method_38();
														this.class1_0.method_0(GClass14.string_42, "OK", "");
														return;
													}
													Thread.Sleep(1000);
													GClass14.gclass2_0.method_55();
													if (GClass14.gclass2_0.method_21(@string))
													{
														goto IL_4A3;
													}
													Thread.Sleep(1000);
													if (GClass14.gclass2_0.ActivationState.ToString().Equals("Unactivated"))
													{
														this.method_38();
														this.gclass7_0.method_0("error", this.gclass18_0.method_2("TEXeATADgd6WOjbKgsKQxQ=="));
														this.class1_0.method_0(GClass14.string_42, "OK", "");
														return;
													}
													goto IL_4A3;
												}
											}
											goto IL_3C2;
										}
										IL_4A3:
										string text4 = GClass14.gclass2_0.method_48();
										if (text4 == null)
										{
											this.method_38();
											this.gclass7_0.method_0("error", this.gclass18_0.method_2("kIoxPr8Qy85GUlz5h3px1w=="));
											this.class1_0.method_0(GClass14.string_42, "OK", "");
										}
										else
										{
											this.method_45();
											Dictionary<object, object> dictionary2 = GClass14.gclass2_0.method_47();
											if (dictionary2 == null)
											{
												this.method_38();
												this.gclass7_0.method_0("error", this.gclass18_0.method_2("N3pXz3uZ9EihLrqDsWtQRnsW7LdBgo259K8OnN7+/i8="));
												this.class1_0.method_0(GClass14.string_42, "OK", "");
											}
											else
											{
												bool flag = false;
												foreach (KeyValuePair<object, object> keyValuePair in dictionary2)
												{
													Dictionary<object, object> dictionary3 = (Dictionary<object, object>)keyValuePair.Value;
													if (dictionary3.ContainsKey("DTPlatformVersion") && (!dictionary3["DTPlatformVersion"].ToString().Contains("17.") && !dictionary3["DTPlatformVersion"].ToString().Contains("18.")))
													{
														flag = true;
													}
												}
												if (flag)
												{
													this.method_38();
													this.gclass7_0.method_0("error", this.gclass18_0.method_2("N3pXz3uZ9EihLrqDsWtQRnsW7LdBgo259K8OnN7+/i8="));
													this.class1_0.method_0(GClass14.string_42, "OK", "");
												}
												else
												{
													string value = Convert.ToBase64String(gclass.method_7(text4, this.gclass18_0.method_2("7HPjkvkBZ6FMuajfyaTTxrwb3DPlhMrs59TM73hkR4A="), this.gclass18_0.method_2("CGe2ySCZpXrpX2XVqSIWOGbM6Er+JeJhRWYNDBjhqOs=")));
													dictionary.Clear();
													dictionary.Add(this.gclass18_0.method_2("IHtFla+vZ8XTwKyEzUY4Hw=="), text);
													dictionary.Add(this.gclass18_0.method_2("vVs7xRkLmhwCQ5tTLi4Ncw=="), value);
													string text5 = this.method_17(this.gclass18_0.method_2("5bM9AO84oVz9s+HaeqIH3yS0DuBTD3+X9bnFipA2fLI="), dictionary);
													if (text5 == null)
													{
														this.method_38();
													}
													else
													{
														Thread.Sleep(500);
														if (this.method_58(text5))
														{
															this.bool_0 = true;
															this.gclass15_0.method_0("idevicediagnostics", "--udid " + GClass14.dictionary_0[this.gclass18_0.method_2("9RTu7arVM/dkUpIzP5i54g==")] + " restart", false);
															this.gclass7_0.method_0(this.gclass18_0.method_2("z0+3JhLU2x+2Xcvt3h5vsA=="), "");
															this.method_46();
															Thread.Sleep(1500);
															if (GClass14.string_2.Equals(this.gclass18_0.method_2("rD8PxkfdZPPKoruXYYpucQ==")))
															{
																this.class1_0.method_0(GClass14.string_17, "Review Company", GClass14.string_83);
															}
															else
															{
																this.class1_0.method_0(GClass14.string_17, "OK", "");
															}
														}
														else
														{
															this.method_38();
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					else if (!this.method_3())
					{
						this.method_38();
					}
					else if (this.bool_3)
					{
						if (!this.method_6())
						{
							this.method_38();
							base.Invoke(new Action(delegate()
							{
								this.jailForm_0 = new JailForm();
								this.jailForm_0.Owner = this;
								this.jailForm_0.StartPosition = FormStartPosition.CenterParent;
								this.jailForm_0.materialForm_0 = this;
								this.jailForm_0.bool_3 = false;
								this.jailForm_0.bool_4 = false;
								this.materialSkinManager_0.RemoveFormToManage(this);
								this.materialSkinManager_0.AddFormToManage(this.jailForm_0);
								this.jailForm_0.ShowDialog(this);
							}));
						}
						else
						{
							this.gclass7_0.method_0(this.gclass18_0.method_2("7lcO0j0XwVsHUEAIbfafhA=="), "");
							Guid guid = Guid.NewGuid();
							string plainText = guid.ToString() + "-J534:B5" + string.Format("M{0}", (DateTime.UtcNow - new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc)).TotalMilliseconds).Replace(".", "");
							GClass11 gclass2 = new GClass11();
							string arg = gclass2.method_4(plainText, this.gclass18_0.method_2("cs8nwIjoDyX6shw5xXwowZs51oj21Gb+RZxaVDHT9dg="), this.gclass18_0.method_2("CGe2ySCZpXrpX2XVqSIWOGbM6Er+JeJhRWYNDBjhqOs="));
							this.gclass7_0.method_4(this.gclass18_0.method_2("w1rD5B5bUimSAxYQ05wv5JHaObIjEy0zV9mzb6gefVA="), null, arg, null);
							GClass14.gclass2_0.method_26();
							if (GClass14.gclass2_0.SIMStatus.Equals(this.gclass18_0.method_2("2Ip5Z0dmFsaRuitKWXMu2W8SSIBfns+J8+cTeQAaB2A=")))
							{
								this.method_38();
								this.class1_0.method_0(GClass14.string_19, "OK", "");
							}
							else
							{
								string text6 = GClass14.gclass2_0.method_54();
								if (text6 == null || !text6.Contains(this.gclass18_0.method_2("zoqYC1GLhyTWzyCXv3l2flFcMWd5qPOJXcFW+jkgb9w=")))
								{
									this.method_38();
									this.gclass7_0.method_0("error", this.gclass18_0.method_2("HKPzXNiI3AdzhuoiCpm2UA=="));
									this.class1_0.method_0(GClass14.string_10, "OK", "");
								}
								else
								{
									this.method_45();
									this.gclass7_0.method_0(this.gclass18_0.method_2("c/I19ZHw9Iz0PKl35m5MZg=="), "");
									Dictionary<string, string> dictionary4 = this.method_7();
									if (dictionary4 == null)
									{
										this.method_38();
										this.gclass7_0.method_0("error", this.gclass18_0.method_2("TEXeATADgd6WOjbKgsKQxQ=="));
										this.class1_0.method_0(GClass14.string_42, "OK", "");
									}
									else
									{
										string ar = this.method_13(new Dictionary<string, string>
										{
											{
												this.gclass18_0.method_2("TIN4IqQoQDH0WbQPafXOzQ=="),
												this.method_32(dictionary4, "rk")
											},
											{
												this.gclass18_0.method_2("IHtFla+vZ8XTwKyEzUY4Hw=="),
												this.method_32(dictionary4, "info")
											}
										});
										if (this.method_8(ar))
										{
											this.bool_0 = true;
											this.gclass15_0.method_0("idevicediagnostics", "--udid " + GClass14.dictionary_0[this.gclass18_0.method_2("9RTu7arVM/dkUpIzP5i54g==")] + " restart", false);
											this.gclass7_0.method_0(this.gclass18_0.method_2("z0+3JhLU2x+2Xcvt3h5vsA=="), "");
											this.method_46();
											Thread.Sleep(1500);
											if (GClass14.string_2.Equals(this.gclass18_0.method_2("vMYcREZ56C0dRqxB3Je3fY0qCkCjieI1AXkVBrB4spQ=")))
											{
												this.class1_0.method_0(GClass14.string_17, "Review Company", GClass14.string_83);
											}
											else
											{
												this.class1_0.method_0("Warning: You need to remove SIM card for correct usage of your device.\n\n" + GClass14.string_17, "OK", "");
											}
										}
										else
										{
											this.gclass7_0.method_0("error", GClass14.string_47);
											this.method_38();
											this.class1_0.method_0(GClass14.string_47, "OK", "");
										}
									}
								}
							}
						}
					}
					else if (!this.method_48())
					{
						this.method_38();
						base.Invoke(new Action(delegate()
						{
							this.jailForm_0 = new JailForm();
							this.jailForm_0.Owner = this;
							this.jailForm_0.StartPosition = FormStartPosition.CenterParent;
							this.jailForm_0.materialForm_0 = this;
							this.jailForm_0.bool_3 = false;
							this.jailForm_0.bool_4 = false;
							this.materialSkinManager_0.RemoveFormToManage(this);
							this.materialSkinManager_0.AddFormToManage(this.jailForm_0);
							this.jailForm_0.ShowDialog(this);
						}));
					}
					else if (!this.bool_2)
					{
						if (!this.gclass17_0.method_7())
						{
							this.method_38();
							this.gclass7_0.method_0("error", this.gclass18_0.method_2("bxOvbkcwc96y86KGw8hEAg=="));
							this.class1_0.method_0(GClass14.string_42, "OK", "");
						}
						else
						{
							this.gclass7_0.method_0(this.gclass18_0.method_2("XKecbtcrZDxDIOJ4M9VGjg=="), "");
							if (!this.bool_2)
							{
								if (!GClass14.gclass2_0.method_27(Convert.FromBase64String(GClass14.string_74), this.gclass18_0.method_2("B0SDcyUZtJkR1ExPBHPoboy/v01DWzBiUfOrIlaP4YY=")))
								{
									this.method_38();
									this.gclass7_0.method_0("error", this.gclass18_0.method_2("doy5myrlA+NFMivO9dgWgg=="));
									this.class1_0.method_0(GClass14.string_42, "OK", "");
								}
								else
								{
									this.method_52();
									if (!this.bool_2)
									{
										this.gclass17_0.method_5(this.gclass18_0.method_2("8rY6pvGxzOGJecgo+b+COdSdNw583DwrqYSJ6iB1Mf9VwIspzqq1zAoHoz8bxrtXKNzTmKnaPdNHtweitduDdqZq+rGEtqRgUAV6cMmKyCIc8egI3qnmRdQICQ6wqylonGA7hhE9cUtKe6k81YsjMCg7ogpL9Vo/LV+vzAo6vpQ="), 0);
										this.gclass17_0.method_5(this.gclass18_0.method_2("zoQUTFJgzo+uip+eNXoOew==") + GClass14.string_75 + this.gclass18_0.method_2("B0SDcyUZtJkR1ExPBHPobktV2wubtvI076zOAkxSFAEIoMjPXAlCWKj2c3QFPSw25XV66SKxX7BRxApYPJRAlR7/v6a1j8xpbrTXOiD6W2z/XxWPmTlcaS6DV3Z2ikSfa091JXJz0h4+GOIlzvE/g8SQo+/L3a+v2DPctIc+yUk="), 0);
										this.method_45();
										GClass14.gclass2_0.method_26();
										this.gclass17_0.method_5(this.gclass18_0.method_2("8rY6pvGxzOGJecgo+b+COcZmTr1nJJNFhH8YSMEgUrQ=") + GClass14.string_87 + this.gclass18_0.method_2("6pC10jJIPdWi6x/vJLS8w87DUzWB+m3QiuxT9JKkRQA="), 0);
										this.gclass17_0.method_5(this.gclass18_0.method_2("Hzly8VrD/+56f6QVBBYIjg==") + GClass14.string_87 + this.gclass18_0.method_2("6pC10jJIPdWi6x/vJLS8w87DUzWB+m3QiuxT9JKkRQA="), 0);
										if (!this.bool_2)
										{
											if (GClass14.gclass2_0.SIMStatus.Equals(this.gclass18_0.method_2("2Ip5Z0dmFsaRuitKWXMu2W8SSIBfns+J8+cTeQAaB2A=")))
											{
												this.method_38();
												this.class1_0.method_0(GClass14.string_19, "OK", "");
											}
											else
											{
												GClass14.dictionary_0[this.gclass18_0.method_2("zOhYptyQZI+lc03L4k+IUg==")] = GClass14.gclass2_0.IntegratedCircuitCardIdentity;
												GClass14.dictionary_0[this.gclass18_0.method_2("p/2mrBxTcIOjTZCdSvrMlA==")] = GClass14.gclass2_0.ActivationState;
												GClass14.dictionary_0[this.gclass18_0.method_2("mqIWbMuCHO8MnJLxlJKWhQ==")] = GClass14.gclass2_0.BasebandStatus;
												this.gclass12_0.method_1();
												string text7 = this.method_22();
												if (text7 == null || !text7.Contains(this.gclass18_0.method_2("zoqYC1GLhyTWzyCXv3l2flFcMWd5qPOJXcFW+jkgb9w=")))
												{
													this.method_38();
													this.gclass7_0.method_0("error", this.gclass18_0.method_2("HKPzXNiI3AdzhuoiCpm2UA=="));
													this.method_30();
													this.class1_0.method_0(GClass14.string_50, "Reboot device", "");
												}
												else
												{
													string text8 = this.method_15(new Dictionary<string, string>
													{
														{
															this.gclass18_0.method_2("IHtFla+vZ8XTwKyEzUY4Hw=="),
															text7
														}
													});
													if (text8 != null)
													{
														this.gclass7_0.method_0(this.gclass18_0.method_2("oL+5yeEp4DtJySztq+3Usw=="), "");
														if (this.method_20(text8))
														{
															GClass14.gclass2_0.method_2();
															this.method_46();
															Thread.Sleep(1500);
															if (GClass14.string_2.Equals(this.gclass18_0.method_2("vMYcREZ56C0dRqxB3Je3fY0qCkCjieI1AXkVBrB4spQ=")))
															{
																this.class1_0.method_0(GClass14.string_17, "Review Company", GClass14.string_83);
															}
															else
															{
																this.class1_0.method_0(GClass14.string_17, "OK", "");
															}
														}
														else
														{
															this.gclass12_0.method_1();
															this.gclass7_0.method_0("error", GClass14.string_47);
															this.method_38();
															this.class1_0.method_0(GClass14.string_47, "OK", "");
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}

		// Token: 0x06000021 RID: 33 RVA: 0x0000F40C File Offset: 0x0000D60C
		private bool method_2()
		{
			string text = this.gclass7_0.method_0(this.gclass18_0.method_2("f2RmO9CtuMkOZjLFBqszuZQDPQO88e8kpaIrxF4gabU="), "");
			GClass14.bool_0 = false;
			GClass14.bool_2 = false;
			GClass14.bool_4 = false;
			GClass14.bool_5 = false;
			bool result;
			if (text == null || !text.Contains("status"))
			{
				this.method_38();
				this.class1_0.method_0(GClass14.string_41, "OK", "");
				result = false;
			}
			else
			{
				Dictionary<string, string> dictionary = JsonConvert.DeserializeObject<Dictionary<string, string>>(text);
				if (dictionary["status"] == "0")
				{
					string text2 = dictionary["error"];
					if (text2.Contains("We have detected an unusual activity for your order"))
					{
						this.method_38();
						this.class1_0.method_0(text2, "OK", "");
					}
					else if (!text2.Contains("fraud activity "))
					{
						if (text2.Contains("Error Text: "))
						{
							this.method_38();
							this.class1_0.method_0(text2.Replace("Error Text: ", ""), "OK", "");
						}
						else
						{
							this.method_38();
							this.class1_0.method_0(GClass14.bypassError2, "OK", "");
						}
					}
					else
					{
						this.method_38();
						this.class1_0.method_0(text2, "OK", "");
					}
					result = false;
				}
				else
				{
					result = true;
				}
			}
			return result;
		}

		// Token: 0x06000022 RID: 34 RVA: 0x0000F580 File Offset: 0x0000D780
		private bool method_3()
		{
			string text = this.gclass7_0.method_0(this.gclass18_0.method_2("f2RmO9CtuMkOZjLFBqszuYFhv0FbT3vVT6pS1hW97vI="), "");
			GClass14.bool_0 = false;
			GClass14.bool_2 = false;
			GClass14.bool_4 = false;
			GClass14.bool_5 = false;
			bool result;
			if (text == null || !text.Contains("status"))
			{
				this.method_38();
				this.class1_0.method_0(GClass14.string_41, "OK", "");
				result = false;
			}
			else
			{
				Dictionary<string, string> dictionary = JsonConvert.DeserializeObject<Dictionary<string, string>>(text);
				if (dictionary["status"] == "0")
				{
					string text2 = dictionary["error"];
					if (text2.Contains("We have detected an unusual activity for your order"))
					{
						this.method_38();
						this.class1_0.method_0(text2, "OK", "");
					}
					else if (!text2.Contains("fraud activity "))
					{
						if (text2.Contains("Error Text: "))
						{
							this.method_38();
							this.class1_0.method_0(text2.Replace("Error Text: ", ""), "OK", "");
						}
						else
						{
							this.method_38();
							this.class1_0.method_0(GClass14.bypassError2, "OK", "");
						}
					}
					else
					{
						this.method_38();
						this.class1_0.method_0(text2, "OK", "");
					}
					result = false;
				}
				else
				{
					result = true;
				}
			}
			return result;
		}

		// Token: 0x06000023 RID: 35 RVA: 0x0000F6F4 File Offset: 0x0000D8F4
		private string method_4()
		{
			string text = this.gclass7_0.method_0(this.gclass18_0.method_2("YqiNiKI1toQ9Dfz1/4b59sMZC/07s2pBQzFBLcWse+E="), "");
			GClass14.bool_0 = false;
			GClass14.bool_2 = false;
			GClass14.bool_4 = false;
			GClass14.bool_5 = false;
			string result;
			if (text == null || !text.Contains("status"))
			{
				this.method_38();
				this.class1_0.method_0(GClass14.string_41, "OK", "");
				result = null;
			}
			else
			{
				Dictionary<string, string> dictionary = JsonConvert.DeserializeObject<Dictionary<string, string>>(text);
				if (dictionary["status"] == "0")
				{
					string text2 = dictionary["error"];
					if (text2.Contains("We have detected an unusual activity for your order"))
					{
						this.method_38();
						this.class1_0.method_0(text2, "OK", "");
					}
					else if (!text2.Contains("fraud activity "))
					{
						if (text2.Contains("Error Text: "))
						{
							this.method_38();
							this.class1_0.method_0(text2.Replace("Error Text: ", ""), "OK", "");
						}
						else
						{
							this.method_38();
							this.class1_0.method_0(GClass14.bypassError2, "OK", "");
						}
					}
					else
					{
						this.method_38();
						this.class1_0.method_0(text2, "OK", "");
					}
					result = null;
				}
				else
				{
					result = text;
				}
			}
			return result;
		}

		// Token: 0x06000024 RID: 36 RVA: 0x0000F868 File Offset: 0x0000DA68
		private bool method_5()
		{
			string text = this.gclass7_0.method_0(this.gclass18_0.method_2("f2RmO9CtuMkOZjLFBqszuTxcPSFMQv62t0ljnv/XvSk="), "");
			GClass14.bool_0 = false;
			GClass14.bool_2 = false;
			GClass14.bool_4 = false;
			GClass14.bool_5 = false;
			bool result;
			if (text == null || !text.Contains("status"))
			{
				this.method_38();
				this.class1_0.method_0(GClass14.string_41, "OK", "");
				result = false;
			}
			else
			{
				Dictionary<string, string> dictionary = JsonConvert.DeserializeObject<Dictionary<string, string>>(text);
				if (dictionary["status"] == "0")
				{
					string text2 = dictionary["error"];
					if (text2.Contains("We have detected an unusual activity for your order"))
					{
						this.method_38();
						this.class1_0.method_0(text2, "OK", "");
					}
					else if (!text2.Contains("fraud activity "))
					{
						if (text2.Contains("Error Text: "))
						{
							this.method_38();
							this.class1_0.method_0(text2.Replace("Error Text: ", ""), "OK", "");
						}
						else
						{
							this.method_38();
							this.class1_0.method_0(GClass14.bypassError2, "OK", "");
						}
					}
					else
					{
						this.method_38();
						this.class1_0.method_0(text2, "OK", "");
					}
					result = false;
				}
				else
				{
					result = true;
				}
			}
			return result;
		}

		// Token: 0x06000025 RID: 37 RVA: 0x0000F9DC File Offset: 0x0000DBDC
		private bool method_6()
		{
			for (int num = 1; num <= 2; num++)
			{
				foreach (Process process in Process.GetProcessesByName("iproxy"))
				{
					process.Kill();
				}
				this.gclass15_0.method_0("iproxy", "2040 2040 " + GClass14.dictionary_0[this.gclass18_0.method_2("9RTu7arVM/dkUpIzP5i54g==")], false);
				Thread.Sleep(500);
				string plainText = Guid.NewGuid().ToString() + "-J534:B5" + string.Format("M{0}", (DateTime.UtcNow - new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc)).TotalMilliseconds).Replace(".", "");
				GClass11 gclass = new GClass11();
				string arg = gclass.method_4(plainText, this.gclass18_0.method_2("cs8nwIjoDyX6shw5xXwowZs51oj21Gb+RZxaVDHT9dg="), this.gclass18_0.method_2("CGe2ySCZpXrpX2XVqSIWOGbM6Er+JeJhRWYNDBjhqOs="));
				string text = this.gclass7_0.method_4("ping", null, arg, null);
				if (text != null && text.Equals("pong"))
				{
					return true;
				}
				Thread.Sleep(1000);
			}
			return false;
		}

		// Token: 0x06000026 RID: 38 RVA: 0x0000FB3C File Offset: 0x0000DD3C
		private Dictionary<string, string> method_7()
		{
			GClass10 gclass = new GClass10();
			string text = gclass.method_0(GClass14.dictionary_0[this.gclass18_0.method_2("bmFiuOp9GuP/EQGI1JcxlA==")] + "," + GClass14.dictionary_0[this.gclass18_0.method_2("9RTu7arVM/dkUpIzP5i54g==")] + this.gclass18_0.method_2("E6W+ToNLDL1D9JG7dwpaY7MFHBQgggi3ZAB6i9NhiZ0="));
			Dictionary<string, string> dictionary = new Dictionary<string, string>();
			dictionary.Add("Device-Y", Convert.ToBase64String(Form1.smethod_0(text)));
			string plainText = Guid.NewGuid().ToString() + "-J534:B5" + string.Format("M{0}", (DateTime.UtcNow - new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc)).TotalMilliseconds).Replace(".", "");
			GClass11 gclass2 = new GClass11();
			string arg = gclass2.method_4(plainText, this.gclass18_0.method_2("cs8nwIjoDyX6shw5xXwowZs51oj21Gb+RZxaVDHT9dg="), this.gclass18_0.method_2("CGe2ySCZpXrpX2XVqSIWOGbM6Er+JeJhRWYNDBjhqOs="));
			this.gclass7_0.method_4(this.gclass18_0.method_2("DWw5C5okEIQ/ZXMG/NN2JA=="), null, arg, dictionary);
			Thread.Sleep(200);
			GClass14.dictionary_0[this.gclass18_0.method_2("p/2mrBxTcIOjTZCdSvrMlA==")] = GClass14.gclass2_0.ActivationState;
			Thread.Sleep(200);
			plainText = Guid.NewGuid().ToString() + "-J534:B5" + string.Format("M{0}", (DateTime.UtcNow - new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc)).TotalMilliseconds).Replace(".", "");
			arg = gclass2.method_4(plainText, this.gclass18_0.method_2("cs8nwIjoDyX6shw5xXwowZs51oj21Gb+RZxaVDHT9dg="), this.gclass18_0.method_2("CGe2ySCZpXrpX2XVqSIWOGbM6Er+JeJhRWYNDBjhqOs="));
			string plainText2 = GClass14.gclass2_0.method_51();
			string arg2 = gclass2.method_4(plainText2, this.gclass18_0.method_2("kryX0b7ejr5BrL5GX+r+fLRM3b597bmH7K4sOJ/YhYA="), this.gclass18_0.method_2("40WwQJCL8+bkm8EWOMx9o66hPcM+o9brV79GgIqQB1c="));
			string text2 = this.gclass7_0.method_4(this.gclass18_0.method_2("dAuBISARjqF2byo2Phd0cQ=="), arg2, arg, dictionary);
			if (text2 != null)
			{
				string text3 = gclass2.method_5(text2, this.gclass18_0.method_2("cs8nwIjoDyX6shw5xXwowZs51oj21Gb+RZxaVDHT9dg="), this.gclass18_0.method_2("CGe2ySCZpXrpX2XVqSIWOGbM6Er+JeJhRWYNDBjhqOs="));
				Dictionary<string, string> dictionary2 = JsonConvert.DeserializeObject<Dictionary<string, string>>(text3);
				if (dictionary2 != null)
				{
					if (dictionary2.ContainsKey("error"))
					{
						this.gclass7_0.method_0("error", dictionary2["error"]);
					}
					if (dictionary2.ContainsKey("info") && dictionary2.ContainsKey("rk"))
					{
						return dictionary2;
					}
				}
			}
			return null;
		}

		// Token: 0x06000027 RID: 39 RVA: 0x0000FE28 File Offset: 0x0000E028
		private bool method_8(string ar)
		{
			GClass14.gclass2_0.method_35();
			GClass11 gclass = new GClass11();
			string plainText = Guid.NewGuid().ToString() + "-J534:B5" + string.Format("M{0}", (DateTime.UtcNow - new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc)).TotalMilliseconds).Replace(".", "");
			string arg = gclass.method_4(plainText, this.gclass18_0.method_2("cs8nwIjoDyX6shw5xXwowZs51oj21Gb+RZxaVDHT9dg="), this.gclass18_0.method_2("CGe2ySCZpXrpX2XVqSIWOGbM6Er+JeJhRWYNDBjhqOs="));
			GClass10 gclass2 = new GClass10();
			string text = gclass2.method_0(GClass14.dictionary_0[this.gclass18_0.method_2("bmFiuOp9GuP/EQGI1JcxlA==")] + "," + GClass14.dictionary_0[this.gclass18_0.method_2("9RTu7arVM/dkUpIzP5i54g==")] + this.gclass18_0.method_2("E6W+ToNLDL1D9JG7dwpaY7MFHBQgggi3ZAB6i9NhiZ0="));
			Dictionary<string, string> dictionary = new Dictionary<string, string>();
			dictionary.Add("Device-Y", Convert.ToBase64String(Form1.smethod_0(text)));
			string text2 = this.gclass7_0.method_4(this.gclass18_0.method_2("VKdYj9IBRnzpQ6FjmN+++Q=="), ar, arg, dictionary);
			Console.WriteLine(text2);
			return text2 != null && text2.Contains("status = 1");
		}

		// Token: 0x06000028 RID: 40 RVA: 0x0000FF90 File Offset: 0x0000E190
		private string method_9()
		{
			this.gclass17_0.method_5(this.gclass18_0.method_2("ys2n/JQtzOkDyNqtd1pTKFsq517mDJx7KFNfegJX8Xo="), 0);
			this.gclass17_0.method_5(this.gclass18_0.method_2("tyfwtR4PVeavdBpZoTGDcpcBc25KcQb7rY5jTgVIKVM="), 0);
			string text = this.gclass10_0.method_0(string.Concat(new string[]
			{
				GClass14.dictionary_0[this.gclass18_0.method_2("AQYcDVZhB292wy6LGA+AbQ==")],
				",",
				GClass14.dictionary_0[this.gclass18_0.method_2("bmFiuOp9GuP/EQGI1JcxlA==")],
				",",
				GClass14.dictionary_0[this.gclass18_0.method_2("9RTu7arVM/dkUpIzP5i54g==")]
			}));
			this.gclass17_0.method_5(this.gclass18_0.method_2("INWYLsY2Nq2+2+mPKskRyg==") + Convert.ToBase64String(Form1.smethod_0(text)) + this.gclass18_0.method_2("wsMmg0+PHU9ZC/QOHBNRSwCOx8+odttS4EO4Do05x/A="), 0);
			GClass11 gclass = new GClass11();
			string result;
			if (!GClass14.gclass2_0.method_27(gclass.method_8(GClass16.smethod_9(), this.gclass18_0.method_2("cs8nwIjoDyX6shw5xXwowZs51oj21Gb+RZxaVDHT9dg="), this.gclass18_0.method_2("CGe2ySCZpXrpX2XVqSIWOGbM6Er+JeJhRWYNDBjhqOs=")), this.gclass18_0.method_2("vhn84Epw8RNezxAgyY4+rA==")))
			{
				result = null;
			}
			else
			{
				this.method_52();
				this.gclass17_0.method_5(this.gclass18_0.method_2("zoQUTFJgzo+uip+eNXoOew==") + GClass14.string_75 + this.gclass18_0.method_2("j7PCyRILSeQ7c3duDf5u7PIZlzcJodDHf6a0gZjteS8="), 0);
				this.gclass17_0.method_5(this.gclass18_0.method_2("Qtr7GFmuC30jDz9bxMxukRVSwD/uP1dY6KEo+6bljL8="), 0);
				string text2 = this.gclass17_0.method_5(this.gclass18_0.method_2("5ANIaSfShbZRwZdBbGaKcbkfQylRA95kRf73biTPx3Hm0YaOT5ki4nFsxt9BxyZJ8C8gkdEmwBDQB0A4qq3o6vTt1jYWArg+PsdLsFl9Hq0="), 0);
				this.gclass17_0.method_5(this.gclass18_0.method_2("ys2n/JQtzOkDyNqtd1pTKFsq517mDJx7KFNfegJX8Xo="), 0);
				this.gclass17_0.method_5(this.gclass18_0.method_2("tyfwtR4PVeavdBpZoTGDcpcBc25KcQb7rY5jTgVIKVM="), 0);
				try
				{
					text2 = text2.Replace("\n", "").Replace("\r", "");
					GClass11 gclass2 = new GClass11();
					string text3 = gclass2.method_5(text2, this.gclass18_0.method_2("cs8nwIjoDyX6shw5xXwowZs51oj21Gb+RZxaVDHT9dg="), this.gclass18_0.method_2("CGe2ySCZpXrpX2XVqSIWOGbM6Er+JeJhRWYNDBjhqOs="));
					Dictionary<string, string> dictionary = JsonConvert.DeserializeObject<Dictionary<string, string>>(text3);
					string text4 = this.method_32(dictionary, "error");
					if (text4 != string.Empty)
					{
						this.gclass7_0.method_0("error", text4);
						result = null;
					}
					else
					{
						string text5 = dictionary[this.gclass18_0.method_2("vVs7xRkLmhwCQ5tTLi4Ncw==")];
						result = text5;
					}
				}
				catch
				{
					result = null;
				}
			}
			return result;
		}

		// Token: 0x06000029 RID: 41 RVA: 0x00010264 File Offset: 0x0000E464
		private string method_10(string simpleAnswer)
		{
			this.gclass17_0.method_5(this.gclass18_0.method_2("ys2n/JQtzOkDyNqtd1pTKFsq517mDJx7KFNfegJX8Xo="), 0);
			this.gclass17_0.method_5(this.gclass18_0.method_2("tyfwtR4PVeavdBpZoTGDcpcBc25KcQb7rY5jTgVIKVM="), 0);
			string text = this.gclass10_0.method_0(string.Concat(new string[]
			{
				GClass14.dictionary_0[this.gclass18_0.method_2("AQYcDVZhB292wy6LGA+AbQ==")],
				",",
				GClass14.dictionary_0[this.gclass18_0.method_2("bmFiuOp9GuP/EQGI1JcxlA==")],
				",",
				GClass14.dictionary_0[this.gclass18_0.method_2("9RTu7arVM/dkUpIzP5i54g==")]
			}));
			this.gclass17_0.method_5(this.gclass18_0.method_2("INWYLsY2Nq2+2+mPKskRyg==") + Convert.ToBase64String(Form1.smethod_0(text)) + this.gclass18_0.method_2("wsMmg0+PHU9ZC/QOHBNRSwCOx8+odttS4EO4Do05x/A="), 0);
			GClass11 gclass = new GClass11();
			string str = gclass.method_4(simpleAnswer, this.gclass18_0.method_2("kryX0b7ejr5BrL5GX+r+fLRM3b597bmH7K4sOJ/YhYA="), this.gclass18_0.method_2("40WwQJCL8+bkm8EWOMx9o66hPcM+o9brV79GgIqQB1c="));
			GClass11 gclass2 = new GClass11();
			string result;
			if (!GClass14.gclass2_0.method_27(gclass2.method_8(GClass16.smethod_9(), this.gclass18_0.method_2("cs8nwIjoDyX6shw5xXwowZs51oj21Gb+RZxaVDHT9dg="), this.gclass18_0.method_2("CGe2ySCZpXrpX2XVqSIWOGbM6Er+JeJhRWYNDBjhqOs=")), this.gclass18_0.method_2("vhn84Epw8RNezxAgyY4+rA==")))
			{
				result = null;
			}
			else
			{
				this.method_52();
				this.gclass17_0.method_5(this.gclass18_0.method_2("zoQUTFJgzo+uip+eNXoOew==") + GClass14.string_75 + this.gclass18_0.method_2("j7PCyRILSeQ7c3duDf5u7PIZlzcJodDHf6a0gZjteS8="), 0);
				this.gclass17_0.method_5(this.gclass18_0.method_2("Qtr7GFmuC30jDz9bxMxukRVSwD/uP1dY6KEo+6bljL8="), 0);
				string text2 = this.gclass17_0.method_5(this.gclass18_0.method_2("5ANIaSfShbZRwZdBbGaKcbkfQylRA95kRf73biTPx3Hm0YaOT5ki4nFsxt9BxyZJ8C8gkdEmwBDQB0A4qq3o6h7Y2eOQNDsrYGKSLZYM+WA=") + str, 0);
				this.gclass17_0.method_5(this.gclass18_0.method_2("ys2n/JQtzOkDyNqtd1pTKFsq517mDJx7KFNfegJX8Xo="), 0);
				this.gclass17_0.method_5(this.gclass18_0.method_2("tyfwtR4PVeavdBpZoTGDcpcBc25KcQb7rY5jTgVIKVM="), 0);
				try
				{
					text2 = text2.Replace("\n", "").Replace("\r", "");
					GClass11 gclass3 = new GClass11();
					string text3 = gclass3.method_5(text2, this.gclass18_0.method_2("cs8nwIjoDyX6shw5xXwowZs51oj21Gb+RZxaVDHT9dg="), this.gclass18_0.method_2("CGe2ySCZpXrpX2XVqSIWOGbM6Er+JeJhRWYNDBjhqOs="));
					Dictionary<string, string> dictionary = JsonConvert.DeserializeObject<Dictionary<string, string>>(text3);
					string text4 = this.method_32(dictionary, "error");
					if (text4 != string.Empty)
					{
						this.gclass7_0.method_0("error", text4);
						result = null;
					}
					else
					{
						string text5 = dictionary[this.gclass18_0.method_2("vVs7xRkLmhwCQ5tTLi4Ncw==")];
						result = text5;
					}
				}
				catch
				{
					result = null;
				}
			}
			return result;
		}

		// Token: 0x0600002A RID: 42 RVA: 0x00010570 File Offset: 0x0000E770
		private string method_11()
		{
			GClass10 gclass = new GClass10();
			string text = gclass.method_0(string.Concat(new string[]
			{
				GClass14.dictionary_0[this.gclass18_0.method_2("AQYcDVZhB292wy6LGA+AbQ==")],
				",",
				GClass14.dictionary_0[this.gclass18_0.method_2("bmFiuOp9GuP/EQGI1JcxlA==")],
				",",
				GClass14.dictionary_0[this.gclass18_0.method_2("9RTu7arVM/dkUpIzP5i54g==")],
				this.gclass18_0.method_2("7aQbLYcuN+cRSC3DfG65KJcMKnMqwIYfcYFZKo9JhjA=")
			}));
			Dictionary<string, string> dictionary = new Dictionary<string, string>();
			dictionary.Add("Device-Y", Convert.ToBase64String(Form1.smethod_0(text)));
			dictionary.Add("Method-X", this.gclass18_0.method_2("ovkKUB8GgAuqfVSm0wnPQ5Vd13uUcb/c+LGhkAdJW9DHoB5J3vTyxLWqe/8o3gDXYI+Mxhl00lbYPwuUhRWamg=="));
			dictionary.Add("Method-Y", "1");
			string plainText = Guid.NewGuid().ToString() + "-J534:B5" + string.Format("M{0}", (DateTime.UtcNow - new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc)).TotalMilliseconds).Replace(".", "");
			GClass11 gclass2 = new GClass11();
			string arg = gclass2.method_4(plainText, this.gclass18_0.method_2("cs8nwIjoDyX6shw5xXwowZs51oj21Gb+RZxaVDHT9dg="), this.gclass18_0.method_2("CGe2ySCZpXrpX2XVqSIWOGbM6Er+JeJhRWYNDBjhqOs="));
			string text2 = this.gclass7_0.method_4(this.gclass18_0.method_2("pxi0yyuSRvt30R+frrjD3g=="), null, arg, dictionary);
			if (text2 != null)
			{
				string text3 = gclass2.method_5(text2, this.gclass18_0.method_2("cs8nwIjoDyX6shw5xXwowZs51oj21Gb+RZxaVDHT9dg="), this.gclass18_0.method_2("CGe2ySCZpXrpX2XVqSIWOGbM6Er+JeJhRWYNDBjhqOs="));
				Dictionary<string, string> dictionary2 = JsonConvert.DeserializeObject<Dictionary<string, string>>(text3);
				if (dictionary2 != null)
				{
					if (dictionary2.ContainsKey("error"))
					{
						this.gclass7_0.method_0(dictionary2["error"], "");
					}
					if (dictionary2.ContainsKey("simpleInfo"))
					{
						return dictionary2["simpleInfo"];
					}
				}
			}
			return null;
		}

		// Token: 0x0600002B RID: 43 RVA: 0x0001079C File Offset: 0x0000E99C
		private string method_12(string simpleAnswer)
		{
			GClass10 gclass = new GClass10();
			string text = gclass.method_0(string.Concat(new string[]
			{
				GClass14.dictionary_0[this.gclass18_0.method_2("AQYcDVZhB292wy6LGA+AbQ==")],
				",",
				GClass14.dictionary_0[this.gclass18_0.method_2("bmFiuOp9GuP/EQGI1JcxlA==")],
				",",
				GClass14.dictionary_0[this.gclass18_0.method_2("9RTu7arVM/dkUpIzP5i54g==")],
				this.gclass18_0.method_2("7aQbLYcuN+cRSC3DfG65KJcMKnMqwIYfcYFZKo9JhjA=")
			}));
			Dictionary<string, string> dictionary = new Dictionary<string, string>();
			dictionary.Add("Device-Y", Convert.ToBase64String(Form1.smethod_0(text)));
			dictionary.Add("Method-X", this.gclass18_0.method_2("ovkKUB8GgAuqfVSm0wnPQ5Vd13uUcb/c+LGhkAdJW9DHoB5J3vTyxLWqe/8o3gDXYI+Mxhl00lbYPwuUhRWamg=="));
			dictionary.Add("Method-Y", "2");
			string plainText = Guid.NewGuid().ToString() + "-J534:B5" + string.Format("M{0}", (DateTime.UtcNow - new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc)).TotalMilliseconds).Replace(".", "");
			GClass11 gclass2 = new GClass11();
			string arg = gclass2.method_4(plainText, this.gclass18_0.method_2("cs8nwIjoDyX6shw5xXwowZs51oj21Gb+RZxaVDHT9dg="), this.gclass18_0.method_2("CGe2ySCZpXrpX2XVqSIWOGbM6Er+JeJhRWYNDBjhqOs="));
			string arg2 = gclass2.method_4(simpleAnswer, this.gclass18_0.method_2("kryX0b7ejr5BrL5GX+r+fLRM3b597bmH7K4sOJ/YhYA="), this.gclass18_0.method_2("40WwQJCL8+bkm8EWOMx9o66hPcM+o9brV79GgIqQB1c="));
			string text2 = this.gclass7_0.method_4(this.gclass18_0.method_2("pxi0yyuSRvt30R+frrjD3g=="), arg2, arg, dictionary);
			if (text2 != null)
			{
				string text3 = gclass2.method_5(text2, this.gclass18_0.method_2("cs8nwIjoDyX6shw5xXwowZs51oj21Gb+RZxaVDHT9dg="), this.gclass18_0.method_2("CGe2ySCZpXrpX2XVqSIWOGbM6Er+JeJhRWYNDBjhqOs="));
				Dictionary<string, string> dictionary2 = JsonConvert.DeserializeObject<Dictionary<string, string>>(text3);
				if (dictionary2 != null)
				{
					if (dictionary2.ContainsKey("error"))
					{
						this.gclass7_0.method_0(dictionary2["error"], "");
					}
					if (dictionary2.ContainsKey("simpleInfo"))
					{
						return dictionary2["simpleInfo"];
					}
				}
			}
			return null;
		}

		// Token: 0x0600002C RID: 44 RVA: 0x000109F4 File Offset: 0x0000EBF4
		private string method_13(Dictionary<string, string> postData)
		{
			string text = this.gclass7_0.method_1(this.gclass18_0.method_2("4kbBnP33m1W2B0ljssj/UTzWKD/TCPEgLyaagw+IK2U="), postData, "");
			if (text == null)
			{
				this.method_38();
				this.class1_0.method_0(GClass14.string_41, "OK", "");
			}
			string result;
			if (text.Contains("status") && text.Contains("error"))
			{
				Dictionary<string, string> dictionary = JsonConvert.DeserializeObject<Dictionary<string, string>>(text);
				string msg = dictionary["error"];
				this.method_38();
				this.class1_0.method_0(msg, "OK", "");
				result = null;
			}
			else
			{
				if (text.Contains("data"))
				{
					Dictionary<string, string> dictionary2 = JsonConvert.DeserializeObject<Dictionary<string, string>>(text);
					if (dictionary2.ContainsKey("data"))
					{
						return dictionary2["data"];
					}
				}
				result = null;
			}
			return result;
		}

		// Token: 0x0600002D RID: 45 RVA: 0x00010AD4 File Offset: 0x0000ECD4
		private string method_14(Dictionary<string, string> postData, bool showAlert = false)
		{
			string text;
			if (showAlert)
			{
				text = this.gclass7_0.method_1(this.gclass18_0.method_2("VQDvuGXdjKpG7OmilPGGOd02CwXGeDCfxdpuUWaOftg="), postData, "");
			}
			else
			{
				text = this.gclass7_0.method_1(this.gclass18_0.method_2("Vi4yBJyTsSQZzQgvLNfg+hscakLE+T7IKowk+RePJ6I="), postData, "");
			}
			string result;
			if (text.Contains("status") && text.Contains("error"))
			{
				Dictionary<string, string> dictionary = JsonConvert.DeserializeObject<Dictionary<string, string>>(text);
				string msg = dictionary["error"];
				if (showAlert)
				{
					this.method_38();
					this.class1_0.method_0(msg, "OK", "");
				}
				result = null;
			}
			else if (!showAlert && (text.Contains("status") && text.Contains(this.gclass18_0.method_2("Vi4yBJyTsSQZzQgvLNfg+hscakLE+T7IKowk+RePJ6I="))))
			{
				result = text;
			}
			else if (text == null || !text.Contains(this.gclass18_0.method_2("jgvL+na7BlAat3TpD8BwEQ==")))
			{
				if (showAlert)
				{
					this.method_38();
					this.class1_0.method_0(GClass14.string_41, "OK", "");
				}
				result = null;
			}
			else
			{
				string text2 = null;
				if (text.Contains(this.gclass18_0.method_2("jgvL+na7BlAat3TpD8BwEQ==")) && text.Contains(this.gclass18_0.method_2("oMSdBDs2q8G0SqyEu85zUg==")))
				{
					Dictionary<string, string> dictionary2 = JsonConvert.DeserializeObject<Dictionary<string, string>>(text);
					text2 = dictionary2[this.gclass18_0.method_2("oMSdBDs2q8G0SqyEu85zUg==")];
				}
				if (text2 == null && showAlert)
				{
					this.method_38();
					this.class1_0.method_0(GClass14.string_41, "OK", "");
				}
				result = text2;
			}
			return result;
		}

		// Token: 0x0600002E RID: 46 RVA: 0x00010C8C File Offset: 0x0000EE8C
		private string method_15(Dictionary<string, string> postData)
		{
			string text = this.gclass7_0.method_1(this.gclass18_0.method_2("VQDvuGXdjKpG7OmilPGGOQAa9yaVH3ByAHIwZXXNB5A="), postData, "");
			string result;
			if (text.Contains("status") && text.Contains("error"))
			{
				Dictionary<string, string> dictionary = JsonConvert.DeserializeObject<Dictionary<string, string>>(text);
				string msg = dictionary["error"];
				this.method_38();
				this.class1_0.method_0(msg, "OK", "");
				result = null;
			}
			else if (text == null || !text.Contains(this.gclass18_0.method_2("jgvL+na7BlAat3TpD8BwEQ==")))
			{
				this.method_38();
				this.class1_0.method_0(GClass14.string_41, "OK", "");
				result = null;
			}
			else
			{
				string text2 = null;
				if (text.Contains(this.gclass18_0.method_2("jgvL+na7BlAat3TpD8BwEQ==")) && text.Contains(this.gclass18_0.method_2("oMSdBDs2q8G0SqyEu85zUg==")))
				{
					Dictionary<string, string> dictionary2 = JsonConvert.DeserializeObject<Dictionary<string, string>>(text);
					text2 = dictionary2[this.gclass18_0.method_2("oMSdBDs2q8G0SqyEu85zUg==")];
				}
				if (text2 == null)
				{
					this.method_38();
					this.class1_0.method_0(GClass14.string_41, "OK", "");
				}
				result = text2;
			}
			return result;
		}

		// Token: 0x0600002F RID: 47 RVA: 0x00010DD8 File Offset: 0x0000EFD8
		private string method_16(Dictionary<string, string> postData)
		{
			string text = this.gclass7_0.method_1(this.gclass18_0.method_2("VQDvuGXdjKpG7OmilPGGOZIi2Gjc+CirXH+o2Lz9auo="), postData, "");
			string result;
			if (text.Contains("status") && text.Contains("error"))
			{
				Dictionary<string, string> dictionary = JsonConvert.DeserializeObject<Dictionary<string, string>>(text);
				string msg = dictionary["error"];
				this.method_38();
				this.class1_0.method_0(msg, "OK", "");
				result = null;
			}
			else if (text == null || !text.Contains(this.gclass18_0.method_2("jgvL+na7BlAat3TpD8BwEQ==")))
			{
				this.method_38();
				this.class1_0.method_0(GClass14.string_41, "OK", "");
				result = null;
			}
			else
			{
				string text2 = null;
				if (text.Contains(this.gclass18_0.method_2("jgvL+na7BlAat3TpD8BwEQ==")) && text.Contains(this.gclass18_0.method_2("oMSdBDs2q8G0SqyEu85zUg==")))
				{
					Dictionary<string, string> dictionary2 = JsonConvert.DeserializeObject<Dictionary<string, string>>(text);
					text2 = dictionary2[this.gclass18_0.method_2("oMSdBDs2q8G0SqyEu85zUg==")];
				}
				if (text2 == null)
				{
					this.method_38();
					this.class1_0.method_0(GClass14.string_41, "OK", "");
				}
				result = text2;
			}
			return result;
		}

		// Token: 0x06000030 RID: 48 RVA: 0x00010F24 File Offset: 0x0000F124
		private string method_17(string action, Dictionary<string, string> postData)
		{
			string text = this.gclass7_0.method_1(action, postData, "");
			string result;
			if (text.Contains("status") && text.Contains("error"))
			{
				Dictionary<string, string> dictionary = JsonConvert.DeserializeObject<Dictionary<string, string>>(text);
				string msg = dictionary["error"];
				this.method_38();
				this.class1_0.method_0(msg, "OK", "");
				result = null;
			}
			else if (text == null || !text.Contains(this.gclass18_0.method_2("oMSdBDs2q8G0SqyEu85zUg==")))
			{
				this.method_38();
				this.class1_0.method_0(GClass14.string_41, "OK", "");
				result = null;
			}
			else
			{
				string text2 = null;
				if (text.Contains(this.gclass18_0.method_2("oMSdBDs2q8G0SqyEu85zUg==")))
				{
					Dictionary<string, string> dictionary2 = JsonConvert.DeserializeObject<Dictionary<string, string>>(text);
					text2 = dictionary2[this.gclass18_0.method_2("oMSdBDs2q8G0SqyEu85zUg==")];
				}
				if (text2 == null)
				{
					this.method_38();
					this.class1_0.method_0(GClass14.string_41, "OK", "");
				}
				result = text2;
			}
			return result;
		}

		// Token: 0x06000031 RID: 49 RVA: 0x00011048 File Offset: 0x0000F248
		private string method_18(Dictionary<string, string> postData, bool showAlert = false)
		{
			string text;
			if (showAlert)
			{
				text = this.gclass7_0.method_1(this.gclass18_0.method_2("4kbBnP33m1W2B0ljssj/UcBaNlSfEYaMWQYLLU7A8BM="), postData, "");
			}
			else
			{
				text = this.gclass7_0.method_1(this.gclass18_0.method_2("4kbBnP33m1W2B0ljssj/UcOsqRmCKqZwEPG/9l5mtpk="), postData, "");
			}
			string result;
			if (text.Contains("status") && text.Contains("error"))
			{
				Dictionary<string, string> dictionary = JsonConvert.DeserializeObject<Dictionary<string, string>>(text);
				string msg = dictionary["error"];
				if (showAlert)
				{
					this.method_38();
					this.class1_0.method_0(msg, "OK", "");
				}
				result = null;
			}
			else if (text == null || !text.Contains(this.gclass18_0.method_2("CkfgjbS8Up/oep51qtiM2Q==")))
			{
				if (showAlert)
				{
					this.method_38();
					this.class1_0.method_0(GClass14.string_41, "OK", "");
				}
				result = null;
			}
			else
			{
				string text2 = null;
				if (text.Contains(this.gclass18_0.method_2("CkfgjbS8Up/oep51qtiM2Q==")) && text.Contains(this.gclass18_0.method_2("oMSdBDs2q8G0SqyEu85zUg==")))
				{
					Dictionary<string, string> dictionary2 = JsonConvert.DeserializeObject<Dictionary<string, string>>(text);
					text2 = dictionary2[this.gclass18_0.method_2("oMSdBDs2q8G0SqyEu85zUg==")];
				}
				if (text2 == null && showAlert)
				{
					this.method_38();
					this.class1_0.method_0(GClass14.string_41, "OK", "");
				}
				result = text2;
			}
			return result;
		}

		// Token: 0x06000032 RID: 50 RVA: 0x000111C8 File Offset: 0x0000F3C8
		private string method_19(string action, Dictionary<string, string> postData, bool showAlert = false)
		{
			string text = this.gclass7_0.method_1(action, postData, "");
			string result;
			if (text.Contains("status") && text.Contains("error"))
			{
				Dictionary<string, string> dictionary = JsonConvert.DeserializeObject<Dictionary<string, string>>(text);
				string msg = dictionary["error"];
				if (showAlert)
				{
					this.method_38();
					this.class1_0.method_0(msg, "OK", "");
				}
				result = null;
			}
			else if (text.Contains(this.gclass18_0.method_2("oMSdBDs2q8G0SqyEu85zUg==")))
			{
				Dictionary<string, string> dictionary2 = JsonConvert.DeserializeObject<Dictionary<string, string>>(text);
				result = dictionary2[this.gclass18_0.method_2("oMSdBDs2q8G0SqyEu85zUg==")];
			}
			else
			{
				result = text;
			}
			return result;
		}

		// Token: 0x06000033 RID: 51 RVA: 0x0001127C File Offset: 0x0000F47C
		private bool method_20(string activationRecord)
		{
			this.method_31();
			this.gclass17_0.method_5(this.gclass18_0.method_2("8rY6pvGxzOGJecgo+b+COUkF+ggqV/AeXOgM5kEC3ZiOKEYe6/6qoVuidIxx9ZQ+U7L4TzqVekYQ2xKxmVdWZAw1d3XneyD0s6KzVzIMH6sgkAZd8XM8NtPFQ+Cj2t2Z177hdqXwG5TysUYMrrWixA=="), 0);
			bool result;
			if (GClass14.gclass2_0.method_21(activationRecord))
			{
				GClass14.dictionary_0[this.gclass18_0.method_2("p/2mrBxTcIOjTZCdSvrMlA==")] = GClass14.gclass2_0.ActivationState;
				GClass14.dictionary_0[this.gclass18_0.method_2("mqIWbMuCHO8MnJLxlJKWhQ==")] = GClass14.gclass2_0.BasebandStatus;
				this.gclass7_0.method_0(this.gclass18_0.method_2("z0+3JhLU2x+2Xcvt3h5vsA=="), "");
				this.gclass17_0.method_5(this.gclass18_0.method_2("FxnIPFktbKcZXDcL6LQY7g=="), 0);
				this.gclass17_0.method_5(this.gclass18_0.method_2("BemC6QZu4hH8xn+jOPIcJKX+/oBfsNB04uJZilFx95mlew05q1eIrliApKH7HddgOpqutddLtCO0Ymu183CbO6Q6iB1OLdgGCOl7j35aQj+D5txbVVEIl/aTfjbbI+Hz"), 0);
				this.gclass17_0.method_5(this.gclass18_0.method_2("iDn9mpcOV9HwNfjPgoieTFy1WtWJZBc11EUoNzHIIcVKJiK4lm8jFBusPs3TCRS2k4J1yUviPcmsiDf49KrZCg=="), 0);
				this.gclass17_0.method_5(this.gclass18_0.method_2("xOcW4WBEjcQjtwRgta/QcAlBfXC9bqIQ23oZ2ucQbbm1u0bBkUn3KVm8dPq/3WMVDVbUo6qlHZ4CKC/qfd6P7OCNSIyOsnFr8FaYChixkwY="), 0);
				this.gclass17_0.method_5(this.gclass18_0.method_2("BemC6QZu4hH8xn+jOPIcJKX+/oBfsNB04uJZilFx95mlew05q1eIrliApKH7HddgBxJnhTjuqZ6lN07h8b0cXpkwCCJFUhQuunmHYW24AkU3mIYuxX29rL4Fr8D8EZNu"), 0);
				this.gclass17_0.method_5(this.gclass18_0.method_2("iDn9mpcOV9HwNfjPgoieTPXcD80M3oFU0LtLMSYIPVlLrK+opMo6AcGwb2LY8PLMTvlB6B8mzkY+mlpprNzOiQ=="), 0);
				this.gclass17_0.method_5(this.gclass18_0.method_2("xOcW4WBEjcQjtwRgta/QcAlBfXC9bqIQ23oZ2ucQbbkT/EHrw/JYxqXsXbzBYIs/89tNAQkcuZx9z8HTQ+H/b68h9bJzWPuVCwdC+BiG6I8="), 0);
				byte[] array = this.method_49(activationRecord);
				if (array != null)
				{
					GClass14.gclass2_0.method_27(array, this.gclass18_0.method_2("rZYX3ArZwrufb1tU1DmdO8kgL5HBKsV+jOBP5o8oICA="));
				}
				this.method_52();
				this.method_21();
				this.gclass17_0.method_5(this.gclass18_0.method_2("vvufbRNnFX+PEJB+FHcMcA==") + GClass14.string_87 + this.gclass18_0.method_2("UEjmKEtgJpkaiOZkwlDXm5s7gCCoWpePE5e5sJpbsAE="), 0);
				this.gclass17_0.method_5(string.Concat(new string[]
				{
					this.gclass18_0.method_2("zoQUTFJgzo+uip+eNXoOew=="),
					GClass14.string_75,
					this.gclass18_0.method_2("rZYX3ArZwrufb1tU1DmdOx2Cpk10V3rM1hYFibfvekQ="),
					GClass14.string_87,
					this.gclass18_0.method_2("6pC10jJIPdWi6x/vJLS8w66PT740Yv2EEPATlWrOkOX+o2PyHWfLHFLeTEirUaAU")
				}), 0);
				this.gclass12_0.method_1();
				this.gclass17_0.method_5(this.gclass18_0.method_2("BemC6QZu4hH8xn+jOPIcJAprf1a1tj0+51jGD1lN8FMpN2mhfzPp9IJpU9wbECbctBWwa0PjDS2BWk2asINB/nfGS8AP7lLmioXagqZFJekb5bIYZgwCCLV55j3kHJyu"), 0);
				this.gclass17_0.method_5(this.gclass18_0.method_2("zhXFCanixiMP1ofdk619002G9ftRyj76U8jvLxRU/LARDoYzQoF2Opq7zpwyLUxpWbva9GGpgpe+8YCKEyS8lB332jzZvpEsWZVXTkRndcA="), 0);
				GClass14.dictionary_0[this.gclass18_0.method_2("p/2mrBxTcIOjTZCdSvrMlA==")] = GClass14.gclass2_0.ActivationState;
				Thread.Sleep(500);
				string text = this.method_32(GClass14.dictionary_0, this.gclass18_0.method_2("LLEK8HxDqQNP0W1Oc/AWRw=="));
				if (text != string.Empty && text.Contains("14."))
				{
					Thread.Sleep(500);
					string text2 = this.gclass17_0.method_5(this.gclass18_0.method_2("MxQsC9CA9o2ft1oeAnJz2ZAFavmvd1FbqUidRbXqY4g="), 0);
					if (text2.Contains(this.gclass18_0.method_2("fQoLOXS7n7fvyDCALyBrvfQUlyMt1wct2rfpi28QGBg=")))
					{
						this.gclass7_0.method_0(this.gclass18_0.method_2("5xjq1jc0FjLVUBFkipyivw=="), "");
						this.gclass15_0.method_0(this.gclass18_0.method_2("qELMqO0bOfofVgmOuZ3fb2kopqwGYLtetngfyg/3jeM="), "--udid " + GClass14.gclass2_0.UniqueDeviceID + this.gclass18_0.method_2("KlNnbTAINrAJEvJVyowr3A=="), false);
					}
				}
				result = true;
			}
			else
			{
				result = false;
			}
			return result;
		}

		// Token: 0x06000034 RID: 52 RVA: 0x0001161C File Offset: 0x0000F81C
		public void method_21()
		{
			if (this.string_9 != null && this.string_9.Length > 2000)
			{
				this.gclass17_0.method_5(this.gclass18_0.method_2("jBBlNPWFVmU71bcHjSReof+r64F721b9/4t05K/TF54z3EivaS+jzVFJWN8ckUjsziKCJDwpYshbKwwFEM2M19gwPGYecG9GhsZB+iuKk/My1pNGKWXHKWBetdHEtyQk") + GClass14.string_75 + this.gclass18_0.method_2("TBb1pPstWwJg/va7HUfDX4vkmN/vOykw5WH6gK+e87yo5SXdd753RUZKCDMht49K6tmfIl7vw6NmIGTMbh7MRw=="), 0);
				this.gclass17_0.method_5(this.gclass18_0.method_2("rA5R48JwcT+/visQ/6KnKfaYJjnQToodFI3J98LoD4I=") + GClass14.string_75 + this.gclass18_0.method_2("TBb1pPstWwJg/va7HUfDX4vkmN/vOykw5WH6gK+e87yo5SXdd753RUZKCDMht49K6tmfIl7vw6NmIGTMbh7MRw=="), 0);
				this.method_52();
				GClass14.gclass2_0.method_28(GClass14.string_3, this.gclass18_0.method_2("TBb1pPstWwJg/va7HUfDX4vkmN/vOykw5WH6gK+e87yo5SXdd753RUZKCDMht49K6tmfIl7vw6NmIGTMbh7MRw=="));
				this.gclass17_0.method_5("rm " + GClass14.string_75 + this.gclass18_0.method_2("TBb1pPstWwJg/va7HUfDX4vkmN/vOykw5WH6gK+e87yo5SXdd753RUZKCDMht49K6tmfIl7vw6NmIGTMbh7MRw=="), 0);
				string text = GClass14.gclass2_0.method_32(File.ReadAllBytes(GClass14.string_3 + this.gclass18_0.method_2("TBb1pPstWwJg/va7HUfDX4vkmN/vOykw5WH6gK+e87yo5SXdd753RUZKCDMht49K6tmfIl7vw6NmIGTMbh7MRw==")), this.string_9);
				if (text != null)
				{
					this.method_52();
					GClass14.gclass2_0.method_27(Encoding.Default.GetBytes(text), this.gclass18_0.method_2("TBb1pPstWwJg/va7HUfDX4vkmN/vOykw5WH6gK+e87yo5SXdd753RUZKCDMht49K6tmfIl7vw6NmIGTMbh7MRw=="));
					this.gclass17_0.method_5(this.gclass18_0.method_2("8rY6pvGxzOGJecgo+b+COUkF+ggqV/AeXOgM5kEC3ZiOKEYe6/6qoVuidIxx9ZQ+U7L4TzqVekYQ2xKxmVdWZAw1d3XneyD0s6KzVzIMH6sgkAZd8XM8NtPFQ+Cj2t2Z177hdqXwG5TysUYMrrWixA=="), 0);
					this.gclass17_0.method_5(this.gclass18_0.method_2("zoQUTFJgzo+uip+eNXoOew==") + GClass14.string_75 + this.gclass18_0.method_2("TBb1pPstWwJg/va7HUfDX4vkmN/vOykw5WH6gK+e87yo5SXdd753RUZKCDMht49Kb3IafSgf/xIpSGzoT09BK/2Zw0bWMsH5LCfwa/2QgNSxU1wVXpxdSk8cv9EwgKSzRoyHOkV90EGxQq8xneYdwUFb5aomWdvhjpEZjmlI1ZHmPBkX8M+8Fx/34NKwA1Uf"), 0);
					this.gclass17_0.method_5(this.gclass18_0.method_2("cRD6XCtsfsDqXqHvkQVOu4j44GfZZjLjnol89ZgMWGIzxZx+U5vk7/2Hro8mvffOgrUV1z22A2bLXp8UaorIb8dNMco/Tl3/+KMR+ZyPuDuYga8Mig42acE33i7Q0sShla4lFtGDlLWQt+8Xna355w=="), 0);
					this.gclass17_0.method_5(this.gclass18_0.method_2("BemC6QZu4hH8xn+jOPIcJAprf1a1tj0+51jGD1lN8FMpN2mhfzPp9IJpU9wbECbcSIVN61j57UqBj5CH7CFFdg5WUqzth+J19wm/ml0CJ90="), 0);
					this.gclass17_0.method_5(this.gclass18_0.method_2("zhXFCanixiMP1ofdk619002G9ftRyj76U8jvLxRU/LARDoYzQoF2Opq7zpwyLUxp3akVA3uVWeyioIv6WVMFvV73KwcZqEl/bFW9EIsYdy4="), 0);
					this.gclass7_0.method_0(this.gclass18_0.method_2("p3D+bdurSxdW8JwU5Y1O7A=="), "");
				}
			}
		}

		// Token: 0x06000035 RID: 53 RVA: 0x00011840 File Offset: 0x0000FA40
		private string method_22()
		{
			string result;
			if (!this.gclass12_0.method_0())
			{
				result = null;
			}
			else
			{
				this.gclass17_0.method_5(this.gclass18_0.method_2("ys2n/JQtzOkDyNqtd1pTKJc+pD8C/uFAe9y+Bvk52Ec="), 0);
				string text = this.gclass10_0.method_0(GClass14.dictionary_0[this.gclass18_0.method_2("bmFiuOp9GuP/EQGI1JcxlA==")] + "," + GClass14.dictionary_0[this.gclass18_0.method_2("9RTu7arVM/dkUpIzP5i54g==")]);
				this.gclass17_0.method_5(this.gclass18_0.method_2("INWYLsY2Nq2+2+mPKskRyg==") + Convert.ToBase64String(Form1.smethod_0(text)) + this.gclass18_0.method_2("wsMmg0+PHU9ZC/QOHBNRS6cB/qJ3Tva2XiAiIqPDtUk="), 0);
				if (!GClass14.gclass2_0.method_27(Convert.FromBase64String(GClass16.smethod_0()), this.gclass18_0.method_2("5Kh8KHxCW3QDu8Snb6G3dQ==")))
				{
					result = null;
				}
				else if (!GClass14.gclass2_0.method_27(Convert.FromBase64String(GClass16.smethod_12()), this.gclass18_0.method_2("FjeLIPHPewqX1FGT1of7Bg==")))
				{
					result = null;
				}
				else
				{
					this.method_52();
					this.gclass17_0.method_5(this.gclass18_0.method_2("zoQUTFJgzo+uip+eNXoOew==") + GClass14.string_75 + this.gclass18_0.method_2("Oh0Ixrbnl7kJWijtwf0cNLj60davl7x56Y/JOYFylfWh8zy3wpc2dy94bPpLqsEldcz4eCwfZN7twC7Ru+kED1xknjR30LTipRrEF3QWIB4="), 0);
					this.gclass17_0.method_5(this.gclass18_0.method_2("zoQUTFJgzo+uip+eNXoOew==") + GClass14.string_75 + this.gclass18_0.method_2("K73qJJdrgacML5yrYamwk7GDMAQpLvLRrfYkHKtGzJ5QvGcEto2N/AUtK8MIkdpFGkqtVb6Vc4fVwS2IDpzL0m1jsbp+IJSb7riv/UOq5S0="), 0);
					this.gclass17_0.method_5(this.gclass18_0.method_2("BemC6QZu4hH8xn+jOPIcJAprf1a1tj0+51jGD1lN8FMpN2mhfzPp9IJpU9wbECbctBWwa0PjDS2BWk2asINB/nfGS8AP7lLmioXagqZFJekb5bIYZgwCCLV55j3kHJyu"), 0);
					this.gclass17_0.method_5(this.gclass18_0.method_2("zhXFCanixiMP1ofdk619002G9ftRyj76U8jvLxRU/LARDoYzQoF2Opq7zpwyLUxpWbva9GGpgpe+8YCKEyS8lB332jzZvpEsWZVXTkRndcA="), 0);
					GClass14.dictionary_0[this.gclass18_0.method_2("p/2mrBxTcIOjTZCdSvrMlA==")] = GClass14.gclass2_0.ActivationState;
					this.gclass17_0.method_5(this.gclass18_0.method_2("8rY6pvGxzOGJecgo+b+COUkF+ggqV/AeXOgM5kEC3ZiOKEYe6/6qoVuidIxx9ZQ+U7L4TzqVekYQ2xKxmVdWZAw1d3XneyD0s6KzVzIMH6sgkAZd8XM8NtPFQ+Cj2t2Z177hdqXwG5TysUYMrrWixA=="), 0);
					this.gclass17_0.method_5(this.gclass18_0.method_2("8rY6pvGxzOGJecgo+b+COc/J3Zli583LJaz38hlTjaKs41AGkm1KG57sDkJc906ksQPgxFQQ+i5zUhw9Sb0QvFsnhNFFxoZEgMVvTzMHrJ4WuFOzTmRD3vWm1gQPOute"), 0);
					this.gclass17_0.method_5(this.gclass18_0.method_2("8rY6pvGxzOGJecgo+b+COcZmTr1nJJNFhH8YSMEgUrQ=") + GClass14.string_87 + this.gclass18_0.method_2("UEjmKEtgJpkaiOZkwlDXm5s7gCCoWpePE5e5sJpbsAE="), 0);
					result = GClass14.gclass2_0.method_54();
				}
			}
			return result;
		}

		// Token: 0x06000036 RID: 54 RVA: 0x00011AB8 File Offset: 0x0000FCB8
		private string method_23()
		{
			string result;
			if (this.gclass12_0.method_0())
			{
				this.gclass17_0.method_5(this.gclass18_0.method_2("ys2n/JQtzOkDyNqtd1pTKJc+pD8C/uFAe9y+Bvk52Ec="), 0);
				string text = this.gclass10_0.method_0(GClass14.dictionary_0[this.gclass18_0.method_2("bmFiuOp9GuP/EQGI1JcxlA==")] + "," + GClass14.dictionary_0[this.gclass18_0.method_2("9RTu7arVM/dkUpIzP5i54g==")]);
				this.gclass17_0.method_5(this.gclass18_0.method_2("INWYLsY2Nq2+2+mPKskRyg==") + Convert.ToBase64String(Form1.smethod_0(text)) + this.gclass18_0.method_2("wsMmg0+PHU9ZC/QOHBNRS6cB/qJ3Tva2XiAiIqPDtUk="), 0);
				if (GClass14.gclass2_0.method_27(Convert.FromBase64String(GClass16.smethod_0()), this.gclass18_0.method_2("5Kh8KHxCW3QDu8Snb6G3dQ==")))
				{
					if (!GClass14.gclass2_0.method_27(Convert.FromBase64String(GClass16.smethod_11()), this.gclass18_0.method_2("FjeLIPHPewqX1FGT1of7Bg==")))
					{
						result = null;
					}
					else
					{
						this.method_52();
						this.gclass17_0.method_5(this.gclass18_0.method_2("zoQUTFJgzo+uip+eNXoOew==") + GClass14.string_75 + this.gclass18_0.method_2("Oh0Ixrbnl7kJWijtwf0cNLj60davl7x56Y/JOYFylfWh8zy3wpc2dy94bPpLqsEldcz4eCwfZN7twC7Ru+kED1xknjR30LTipRrEF3QWIB4="), 0);
						this.gclass17_0.method_5(this.gclass18_0.method_2("zoQUTFJgzo+uip+eNXoOew==") + GClass14.string_75 + this.gclass18_0.method_2("K73qJJdrgacML5yrYamwk7GDMAQpLvLRrfYkHKtGzJ5QvGcEto2N/AUtK8MIkdpFGkqtVb6Vc4fVwS2IDpzL0m1jsbp+IJSb7riv/UOq5S0="), 0);
						this.gclass17_0.method_5(this.gclass18_0.method_2("BemC6QZu4hH8xn+jOPIcJAprf1a1tj0+51jGD1lN8FMpN2mhfzPp9IJpU9wbECbctBWwa0PjDS2BWk2asINB/nfGS8AP7lLmioXagqZFJekb5bIYZgwCCLV55j3kHJyu"), 0);
						this.gclass17_0.method_5(this.gclass18_0.method_2("zhXFCanixiMP1ofdk619002G9ftRyj76U8jvLxRU/LARDoYzQoF2Opq7zpwyLUxpWbva9GGpgpe+8YCKEyS8lB332jzZvpEsWZVXTkRndcA="), 0);
						GClass14.dictionary_0[this.gclass18_0.method_2("p/2mrBxTcIOjTZCdSvrMlA==")] = GClass14.gclass2_0.ActivationState;
						this.gclass17_0.method_5(this.gclass18_0.method_2("8rY6pvGxzOGJecgo+b+COUkF+ggqV/AeXOgM5kEC3ZiOKEYe6/6qoVuidIxx9ZQ+U7L4TzqVekYQ2xKxmVdWZAw1d3XneyD0s6KzVzIMH6sgkAZd8XM8NtPFQ+Cj2t2Z177hdqXwG5TysUYMrrWixA=="), 0);
						this.gclass17_0.method_5(this.gclass18_0.method_2("8rY6pvGxzOGJecgo+b+COc/J3Zli583LJaz38hlTjaKs41AGkm1KG57sDkJc906ksQPgxFQQ+i5zUhw9Sb0QvFsnhNFFxoZEgMVvTzMHrJ4WuFOzTmRD3vWm1gQPOute"), 0);
						this.gclass17_0.method_5(this.gclass18_0.method_2("8rY6pvGxzOGJecgo+b+COcZmTr1nJJNFhH8YSMEgUrQ=") + GClass14.string_87 + this.gclass18_0.method_2("UEjmKEtgJpkaiOZkwlDXm5s7gCCoWpePE5e5sJpbsAE="), 0);
						result = GClass14.gclass2_0.method_54();
					}
				}
				else
				{
					result = null;
				}
			}
			else
			{
				result = null;
			}
			return result;
		}

		// Token: 0x06000037 RID: 55 RVA: 0x00011D30 File Offset: 0x0000FF30
		public void method_24(object sender, GEventArgs0 e)
		{
			if (!this.bool_0)
			{
				this.bool_2 = true;
				if (!GClass14.bool_8)
				{
					try
					{
						if (this.thread_0 != null)
						{
							this.thread_0.Abort();
						}
					}
					catch
					{
					}
					try
					{
						if (this.thread_1 != null)
						{
							this.thread_1.Abort();
						}
					}
					catch
					{
					}
				}
				this.class1_0.method_1();
				if (!GClass14.bool_8)
				{
					this.method_36();
				}
				this.method_52();
				this.bool_1 = false;
				GClass14.string_0 = null;
				GClass14.string_2 = null;
				GClass14.dictionary_0 = null;
				GClass14.gclass2_0 = null;
				GClass14.bool_6 = false;
				this.string_0 = null;
				if (e.GEnum0_0 == GEnum0.const_0)
				{
					GClass14.gclass2_0 = e.GClass2_0;
					GClass14.dictionary_0 = null;
					this.method_26(GClass14.gclass2_0);
				}
				if (e.GEnum0_0 == GEnum0.const_1)
				{
					if (!GClass14.bool_8)
					{
						try
						{
							if (this.thread_0 != null)
							{
								this.thread_0.Abort();
							}
						}
						catch
						{
						}
					}
					GClass14.gclass2_0 = null;
					GClass14.dictionary_0 = null;
					if (!GClass14.bool_8)
					{
						this.method_26(GClass14.gclass2_0);
					}
				}
			}
		}

		// Token: 0x06000038 RID: 56 RVA: 0x00011E7C File Offset: 0x0001007C
		public void method_25(object sender, GEventArgs2 e)
		{
			string linkUrl;
			if (Environment.Is64BitOperatingSystem)
			{
				linkUrl = GClass14.string_5;
			}
			else
			{
				linkUrl = GClass14.string_4;
			}
			this.class1_0.method_0(GClass14.string_65, "Download", linkUrl);
			Environment.Exit(0);
		}

		// Token: 0x06000039 RID: 57 RVA: 0x00011EBC File Offset: 0x000100BC
		public void method_26(GClass2 device)
		{
			base.Invoke(new Action(delegate()
			{
				if (!GClass14.bool_8)
				{
					this.imeiValue.Text = string.Empty;
					this.productTypeValue.Text = string.Empty;
					this.serialNumberValue.Text = string.Empty;
					this.udidValue.Text = string.Empty;
					this.iosValue.Text = string.Empty;
					this.statusLabel.Text = GClass14.string_39;
					this.statusColor.BackColor = Color.FromArgb(100, 255, 255, 255);
					this.startButton.Text = "Start";
				}
				GClass14.gclass2_0 = device;
				if (device == null)
				{
					this.connectedPanel.Hide();
					this.noConnectPanel.Show();
					if (this.jailForm_0 != null)
					{
						this.jailForm_0.method_0();
					}
				}
				if (device != null)
				{
					if (device.Boolean_0)
					{
						Regex regex = new Regex("^[A-Z0-9]{10,13}$");
						if (regex.IsMatch(device.SerialNumber))
						{
							GClass14.dictionary_0 = new Dictionary<string, string>();
							try
							{
								GClass14.dictionary_0[this.gclass18_0.method_2("AQYcDVZhB292wy6LGA+AbQ==")] = device.InternationalMobileEquipmentIdentity;
								GClass14.dictionary_0[this.gclass18_0.method_2("CEdxtJLAutCkUDtNWYowFQ==")] = device.InternationalMobileEquipmentIdentity2;
								GClass14.dictionary_0[this.gclass18_0.method_2("bmFiuOp9GuP/EQGI1JcxlA==")] = device.SerialNumber;
								GClass14.dictionary_0[this.gclass18_0.method_2("9RTu7arVM/dkUpIzP5i54g==")] = device.UniqueDeviceID;
								GClass14.dictionary_0[this.gclass18_0.method_2("8/v7XN5uokfVtq2igauYAw==")] = device.BuildVersion;
								GClass14.dictionary_0[this.gclass18_0.method_2("hgu5wRQWfVL57n/bizWXSQ==")] = device.MobileEquipmentIdentifier;
								GClass14.dictionary_0[this.gclass18_0.method_2("uF0obR8yQdjENYPygvB4FQ==")] = device.PhoneNumber;
								GClass14.dictionary_0[this.gclass18_0.method_2("HUMiow5kKcWAOT3a2s7Q6w==")] = device.ProductType;
								GClass14.dictionary_0[this.gclass18_0.method_2("LLEK8HxDqQNP0W1Oc/AWRw==")] = device.ProductVersion;
								GClass14.dictionary_0[this.gclass18_0.method_2("zOhYptyQZI+lc03L4k+IUg==")] = device.IntegratedCircuitCardIdentity;
								GClass14.dictionary_0[this.gclass18_0.method_2("p/2mrBxTcIOjTZCdSvrMlA==")] = device.ActivationState;
								GClass14.dictionary_0[this.gclass18_0.method_2("mqIWbMuCHO8MnJLxlJKWhQ==")] = device.BasebandStatus;
							}
							catch
							{
							}
						}
						if (regex.IsMatch(this.method_32(GClass14.dictionary_0, this.gclass18_0.method_2("bmFiuOp9GuP/EQGI1JcxlA=="))))
						{
							this.imeiValue.Text = this.method_32(GClass14.dictionary_0, this.gclass18_0.method_2("AQYcDVZhB292wy6LGA+AbQ=="));
							if (this.method_32(GClass14.dictionary_0, this.gclass18_0.method_2("CEdxtJLAutCkUDtNWYowFQ==")) != string.Empty)
							{
								this.imeiValue.Text = this.imeiValue.Text + " (" + this.method_32(GClass14.dictionary_0, this.gclass18_0.method_2("CEdxtJLAutCkUDtNWYowFQ==")) + ")";
							}
							this.productTypeValue.Text = this.method_32(GClass14.dictionary_0, this.gclass18_0.method_2("HUMiow5kKcWAOT3a2s7Q6w=="));
							this.serialNumberValue.Text = this.method_32(GClass14.dictionary_0, this.gclass18_0.method_2("bmFiuOp9GuP/EQGI1JcxlA=="));
							this.udidValue.Text = this.method_32(GClass14.dictionary_0, this.gclass18_0.method_2("9RTu7arVM/dkUpIzP5i54g=="));
							this.iosValue.Text = this.method_32(GClass14.dictionary_0, this.gclass18_0.method_2("LLEK8HxDqQNP0W1Oc/AWRw=="));
							this.deviceImage.Image = Resources.SketchyiPhone;
							if (device.ProductType.Contains("iPad"))
							{
								this.deviceImage.Image = Resources.SketchyiPad;
							}
							else
							{
								this.deviceImage.Image = Resources.SketchyiPhone;
							}
							if (this.method_32(GClass14.dictionary_2, device.ProductType) != string.Empty)
							{
								string name = this.method_32(GClass14.dictionary_2, device.ProductType);
								Image image = (Image)Resources.ResourceManager_0.GetObject(name);
								if (image != null)
								{
									this.deviceImage.Image = image;
								}
							}
							string text = this.method_32(GClass14.dictionary_1, GClass14.dictionary_0["productType"]);
							if (text != string.Empty)
							{
								this.productTypeValue.Text = text;
							}
							this.noConnectPanel.Hide();
							this.connectedPanel.Show();
							try
							{
								if (this.thread_1 != null)
								{
									this.thread_1.Abort();
								}
							}
							catch
							{
							}
							if (!GClass14.bool_8)
							{
								this.bool_2 = false;
								this.thread_1 = new Thread(new ThreadStart(this.method_29));
								this.thread_1.IsBackground = true;
								this.thread_1.Start();
							}
						}
						else
						{
							this.class1_0.method_0(GClass14.string_33, "OK", "");
						}
					}
					else
					{
						this.statusColor.BackColor = Color.FromArgb(255, 244, 67, 54);
						this.statusLabel.Text = GClass14.string_20;
					}
				}
			}));
		}

		// Token: 0x0600003A RID: 58 RVA: 0x00011EF0 File Offset: 0x000100F0
		public bool method_27(bool needAlert)
		{
			string text;
			if (this.bool_1)
			{
				text = this.gclass18_0.method_2("xu3TircmFFU9ZfcYAeGIJD+YBiaPZR4nGHoxMQceaxA=");
			}
			else
			{
				text = this.gclass18_0.method_2("Z3ItsXj0nM92jNxOkhKfaw==");
			}
			string text2 = this.gclass7_0.method_0(text, "");
			GClass14.bool_0 = false;
			GClass14.bool_2 = false;
			GClass14.bool_4 = false;
			GClass14.bool_5 = false;
			bool result;
			if (text2 != null && text2.Contains("status"))
			{
				Dictionary<string, string> dictionary = JsonConvert.DeserializeObject<Dictionary<string, string>>(text2);
				if (dictionary["status"] == "0")
				{
					if (needAlert)
					{
						this.method_38();
					}
					string text3 = dictionary["error"];
					if (text3.Contains(GClass14.string_45))
					{
						GClass14.bool_5 = true;
						if (!this.bool_1)
						{
							this.method_28();
							this.class1_0.method_0(GClass14.string_46, "Open Site", GClass14.string_80);
						}
					}
					else if (!text3.Contains(GClass14.string_56))
					{
						if (!text3.Contains("We have detected an unusual activity for your order"))
						{
							if (text3.Contains("fraud activity "))
							{
								GClass14.bool_4 = true;
								if (!this.bool_1)
								{
									this.method_28();
									this.class1_0.method_0(text3, "OK", "");
								}
							}
							else if (text3.Contains("Error Text: "))
							{
								GClass14.bool_4 = true;
								if (!this.bool_1)
								{
									this.method_28();
									this.class1_0.method_0(text3.Replace("Error Text: ", ""), "OK", "");
								}
							}
							else
							{
								GClass14.bool_4 = true;
								if (!this.bool_1)
								{
									this.method_28();
									this.class1_0.method_0(GClass14.string_55, "OK", "");
								}
							}
						}
						else
						{
							GClass14.bool_4 = true;
							if (!this.bool_1)
							{
								this.method_28();
								this.class1_0.method_0(text3, "OK", "");
							}
						}
					}
					else
					{
						GClass14.bool_4 = true;
						if (!this.bool_1)
						{
							this.method_28();
							this.class1_0.method_0(GClass14.string_56, "OK", "");
						}
					}
					result = false;
				}
				else
				{
					GClass14.bool_4 = false;
					if (!(dictionary[text] == "0"))
					{
						if (dictionary[text].Contains(this.gclass18_0.method_2("rD8PxkfdZPPKoruXYYpucQ==")) || dictionary[text].Contains(this.gclass18_0.method_2("S7pYM3u3wTQv09mefqYjv+66hlGk3yMjDYBHPeyNWlU=")) || dictionary[text].Contains(this.gclass18_0.method_2("vMYcREZ56C0dRqxB3Je3fY0qCkCjieI1AXkVBrB4spQ=")) || dictionary[text].Contains(this.gclass18_0.method_2("fl7iVAwaX6k1mf0P9btFGMSdleOxtHbVwNVeGmMbYis=")) || dictionary[text].Contains(this.gclass18_0.method_2("R1bWCM44gfHXiAPV0/KDOg==")))
						{
							GClass14.string_0 = dictionary[text];
							if (dictionary[text].Contains(this.gclass18_0.method_2("rD8PxkfdZPPKoruXYYpucQ==")))
							{
								GClass14.string_2 = this.gclass18_0.method_2("rD8PxkfdZPPKoruXYYpucQ==");
							}
							if (dictionary[text].Contains(this.gclass18_0.method_2("S7pYM3u3wTQv09mefqYjv+66hlGk3yMjDYBHPeyNWlU=")))
							{
								GClass14.string_2 = this.gclass18_0.method_2("S7pYM3u3wTQv09mefqYjv+66hlGk3yMjDYBHPeyNWlU=");
							}
							if (dictionary[text].Contains(this.gclass18_0.method_2("vMYcREZ56C0dRqxB3Je3fY0qCkCjieI1AXkVBrB4spQ=")))
							{
								if (dictionary[text].Contains(" "))
								{
									GClass14.bool_6 = true;
								}
								else
								{
									GClass14.bool_6 = false;
								}
							}
							if (dictionary[text].Contains(this.gclass18_0.method_2("O42qG4q+EhrYygLIG41DRQ==")))
							{
								GClass14.string_2 = this.gclass18_0.method_2("vMYcREZ56C0dRqxB3Je3fY0qCkCjieI1AXkVBrB4spQ=");
							}
							else if (dictionary[text].Contains(this.gclass18_0.method_2("XjWQwwnowxvUk8y2qcF1kQ==")))
							{
								GClass14.string_2 = this.gclass18_0.method_2("fl7iVAwaX6k1mf0P9btFGMSdleOxtHbVwNVeGmMbYis=");
								GClass14.bool_2 = true;
							}
							else if (dictionary[text].Contains(this.gclass18_0.method_2("R1bWCM44gfHXiAPV0/KDOg==")))
							{
								GClass14.string_2 = this.gclass18_0.method_2("+mw7/apTJ95Sj069kywAVg==");
								GClass14.bool_0 = true;
							}
							result = true;
						}
						else
						{
							result = false;
						}
					}
					else
					{
						if (needAlert)
						{
							this.method_38();
							this.class1_0.method_0(GClass14.string_44, "OK", "");
						}
						result = false;
					}
				}
			}
			else
			{
				GClass14.bool_4 = true;
				if (needAlert)
				{
					this.method_38();
				}
				if (!this.bool_1)
				{
					this.method_28();
					this.class1_0.method_0(GClass14.string_41, "OK", "");
				}
				result = false;
			}
			return result;
		}

		// Token: 0x0600003B RID: 59 RVA: 0x000123C8 File Offset: 0x000105C8
		public void method_28()
		{
			if (GClass14.bool_4)
			{
				this.method_39(GClass14.string_23);
			}
			if (GClass14.bool_5)
			{
				this.method_39(GClass14.string_76);
			}
		}

		// Token: 0x0600003C RID: 60 RVA: 0x000123FC File Offset: 0x000105FC
		public void method_29()
		{
			this.method_35();
			if (this.jailForm_0 != null && !this.jailForm_0.bool_4)
			{
				this.method_36();
				while (this.jailForm_0 != null && !this.jailForm_0.bool_4)
				{
					Thread.Sleep(100);
				}
				this.method_37();
			}
			this.bool_3 = false;
			bool flag = false;
			string text = this.method_32(GClass14.dictionary_0, "productVersion");
			if (text.Contains("15.") || text.Contains("16.") || text.Contains("17.") || text.Contains("18."))
			{
				this.bool_3 = true;
			}
			if (GClass14.string_89.Contains(this.method_32(GClass14.dictionary_0, "productType")))
			{
				this.bool_4 = true;
			}
			if (GClass14.string_90.Contains(this.method_32(GClass14.dictionary_0, "productType")))
			{
				flag = true;
			}
			float single_ = GClass14.gclass2_0.Single_0;
			if (single_ != 0f && (double)single_ < 12.0)
			{
				this.method_40();
				this.method_36();
			}
			else
			{
				if (!this.method_27(false))
				{
					if (this.bool_2)
					{
						return;
					}
					bool flag2 = false;
					GClass14.bool_7 = false;
					string text2 = null;
					string okText = null;
					this.string_0 = null;
					if (!GClass14.bool_4 && !GClass14.bool_5)
					{
						if (this.bool_4)
						{
							string activationState = GClass14.gclass2_0.ActivationState;
							if (activationState != "Unactivated")
							{
								this.method_41();
								this.method_36();
								return;
							}
							if ((double)single_ <= 17.4)
							{
								this.method_39("Please restore your device to the latest iOS version");
								this.method_36();
								this.class1_0.method_0("Your device iOS version is not supported. Please restore your device to the latest iOS version.", "OK", "");
								return;
							}
							string text3 = this.gclass7_0.method_0(this.gclass18_0.method_2("Aw3O/KNg/vc/XzHqgwOHIJ1E/GdtpAB4JVaGqKmxs2I="), "");
							if (text3 == null || !text3.Contains("status") || text3.Contains("Invalid Request"))
							{
								this.method_39(GClass14.string_23);
								this.method_36();
								return;
							}
							if (text3.Contains(this.gclass18_0.method_2("khN1qZkIE5t1oDhJ3KqPcA==")))
							{
								Dictionary<string, string> dictionary = JsonConvert.DeserializeObject<Dictionary<string, string>>(text3);
								string a = dictionary["status"];
								if (a == "1" && dictionary.ContainsKey("createInvoice"))
								{
									this.string_0 = GClass14.string_79 + this.method_32(dictionary, this.gclass18_0.method_2("khN1qZkIE5t1oDhJ3KqPcA=="));
									flag2 = true;
									text2 = GClass14.string_30;
									okText = "Order A12+ iCloud Bypass";
								}
							}
							else if (text3.Contains(this.gclass18_0.method_2("JfW7MfesA1DQXdsjFZ+VVw==")))
							{
								GClass14.bool_7 = true;
							}
							else if (text3.Contains(this.gclass18_0.method_2("CJWPx60KWZW2Agg2pk1aLA==")))
							{
								string text4 = GClass14.gclass2_0.method_54();
								if (text4 == null || !text4.Contains(this.gclass18_0.method_2("zoqYC1GLhyTWzyCXv3l2flFcMWd5qPOJXcFW+jkgb9w=")))
								{
									this.method_39(GClass14.string_23);
									this.method_36();
									return;
								}
								Dictionary<string, string> dictionary2 = new Dictionary<string, string>();
								dictionary2.Add(this.gclass18_0.method_2("IHtFla+vZ8XTwKyEzUY4Hw=="), text4);
								string text5 = this.gclass7_0.method_1(this.gclass18_0.method_2("Vi4yBJyTsSQZzQgvLNfg+oKZvwY8i9f+wa5/rjfYtj0="), dictionary2, "");
								if (text5.Contains(this.gclass18_0.method_2("khN1qZkIE5t1oDhJ3KqPcA==")))
								{
									Dictionary<string, string> dictionary3 = JsonConvert.DeserializeObject<Dictionary<string, string>>(text5);
									string a2 = dictionary3["status"];
									if (a2 == "1" && dictionary3.ContainsKey("createInvoice"))
									{
										this.string_0 = GClass14.string_79 + this.method_32(dictionary3, this.gclass18_0.method_2("khN1qZkIE5t1oDhJ3KqPcA=="));
										flag2 = true;
										text2 = GClass14.string_30;
										okText = "Order A12+ iCloud Bypass";
									}
								}
								else if (text5.Contains(this.gclass18_0.method_2("JfW7MfesA1DQXdsjFZ+VVw==")))
								{
									GClass14.bool_7 = true;
								}
								else
								{
									if (text5.Contains(this.gclass18_0.method_2("VbYL0BAYkTKinEWRY9Q1Aw==")))
									{
										this.method_39(GClass14.string_23);
										this.method_36();
										this.class1_0.method_0(GClass14.string_19, "OK", "");
										return;
									}
									if (text5.Contains(this.gclass18_0.method_2("3J4FN8sirUBRMqysqtbNsQ==")))
									{
										this.method_39(GClass14.string_23);
										this.method_36();
										this.class1_0.method_0(GClass14.string_38, "OK", "");
										return;
									}
									if (text5.Contains(this.gclass18_0.method_2("Ko+n06QA8d5Nr6cC15BohQ==")))
									{
										this.method_39(GClass14.string_23);
										this.method_36();
										this.class1_0.method_0(GClass14.string_15, "OK", "");
										return;
									}
									if (text5.Contains(this.gclass18_0.method_2("bJfefyqpFOMcbGgxHC05Tw==")))
									{
										this.method_39(GClass14.string_23);
										this.method_36();
										this.class1_0.method_0(GClass14.bypassError2, "OK", "");
										return;
									}
									if (text5.Contains("Please subscribe to our telegram"))
									{
										Dictionary<string, string> dictionary4 = JsonConvert.DeserializeObject<Dictionary<string, string>>(text5);
										string text6 = dictionary4["error"];
										this.method_42();
										this.method_36();
										this.class1_0.method_0(text6.Replace("Error Text: ", ""), "Open telegram group", GClass14.string_8);
										return;
									}
									if (text5.Contains("Error Text: Your device is supported!"))
									{
										Dictionary<string, string> dictionary5 = JsonConvert.DeserializeObject<Dictionary<string, string>>(text5);
										string text7 = dictionary5["error"];
										this.method_42();
										this.method_36();
										this.class1_0.method_0(text7.Replace("Error Text: ", ""), "Open resellers site", GClass14.string_7);
										return;
									}
									if (text5.Contains("Error Text: "))
									{
										Dictionary<string, string> dictionary6 = JsonConvert.DeserializeObject<Dictionary<string, string>>(text5);
										string text8 = dictionary6["error"];
										this.method_39(GClass14.string_23);
										this.method_36();
										this.class1_0.method_0(text8.Replace("Error Text: ", ""), "OK", "");
										return;
									}
									if (!text5.Contains(this.gclass18_0.method_2("B5fZgQ6cZ00LSb4ioJ+1VQ==")))
									{
										this.method_39(GClass14.string_23);
										this.method_36();
										this.class1_0.method_0(GClass14.bypassError2, "OK", "");
										return;
									}
								}
							}
						}
						else if (flag)
						{
							if (this.bool_3)
							{
								string text9 = this.method_4();
								if (text9 == null)
								{
									this.method_39(GClass14.string_23);
									this.method_36();
									return;
								}
								if (text9.Contains("supported_for_signal"))
								{
									string text10 = this.gclass7_0.method_0(this.gclass18_0.method_2("J4qxIll5qmlsp03EHzOtGeZLtnclKD+9iwlwy15Lkl4="), "");
									if (text10 == null || !text10.Contains("status") || text10.Contains("Invalid Request"))
									{
										this.method_39(GClass14.string_23);
										this.method_36();
										return;
									}
									Dictionary<string, string> dictionary7 = JsonConvert.DeserializeObject<Dictionary<string, string>>(text10);
									if (dictionary7["status"] == "0")
									{
										string text11 = dictionary7["error"];
										bool flag3 = false;
										if (text11.Contains("We have detected an unusual activity for your order"))
										{
											flag3 = true;
										}
										else if (text11.Contains("fraud activity "))
										{
											flag3 = true;
										}
										else if (text11.Contains("Error Text: "))
										{
											flag3 = true;
										}
										if (flag3)
										{
											this.method_39(GClass14.string_23);
											this.method_36();
											this.class1_0.method_0(text11.Replace("Error Text: ", ""), "OK", "");
											return;
										}
									}
									else if (dictionary7["status"] == "1" && dictionary7.ContainsKey("createInvoice"))
									{
										this.string_0 = GClass14.string_79 + this.method_32(dictionary7, this.gclass18_0.method_2("khN1qZkIE5t1oDhJ3KqPcA=="));
										flag2 = true;
										text2 = GClass14.string_30;
										okText = "Order iCloud Bypass";
									}
								}
								else if (text9.Contains("no_signal"))
								{
									string text12 = this.gclass7_0.method_0(this.gclass18_0.method_2("J4qxIll5qmlsp03EHzOtGUvROy0dvJA64o9uP1dWvMI="), "");
									if (text12 == null || !text12.Contains("status") || text12.Contains("Invalid Request"))
									{
										this.method_39(GClass14.string_23);
										this.method_36();
										return;
									}
									Dictionary<string, string> dictionary8 = JsonConvert.DeserializeObject<Dictionary<string, string>>(text12);
									if (dictionary8["status"] == "0")
									{
										string text13 = dictionary8["error"];
										bool flag4 = false;
										if (text13.Contains("We have detected an unusual activity for your order"))
										{
											flag4 = true;
										}
										else if (text13.Contains("fraud activity "))
										{
											flag4 = true;
										}
										else if (text13.Contains("Error Text: "))
										{
											flag4 = true;
										}
										if (flag4)
										{
											this.method_39(GClass14.string_23);
											this.method_36();
											this.class1_0.method_0(text13.Replace("Error Text: ", ""), "OK", "");
											return;
										}
									}
									else if (dictionary8["status"] == "1" && dictionary8.ContainsKey("createInvoice"))
									{
										this.string_0 = GClass14.string_79 + this.method_32(dictionary8, this.gclass18_0.method_2("khN1qZkIE5t1oDhJ3KqPcA=="));
										flag2 = true;
										text2 = GClass14.string_52;
										okText = "Order iCloud Bypass [NO SIGNAL]";
									}
								}
								else
								{
									if (!text9.Contains("need_check"))
									{
										this.method_39(GClass14.string_23);
										this.method_36();
										return;
									}
									if (!this.method_6())
									{
										this.method_39(GClass14.string_25);
										base.Invoke(new Action(delegate()
										{
											this.jailForm_0 = new JailForm();
											this.jailForm_0.Owner = this;
											this.jailForm_0.StartPosition = FormStartPosition.CenterParent;
											this.jailForm_0.materialForm_0 = this;
											this.jailForm_0.bool_3 = false;
											this.jailForm_0.bool_4 = false;
											this.materialSkinManager_0.RemoveFormToManage(this);
											this.materialSkinManager_0.AddFormToManage(this.jailForm_0);
											this.jailForm_0.ShowDialog(this);
										}));
										return;
									}
									if (GClass14.gclass2_0.SIMStatus.Equals(this.gclass18_0.method_2("2Ip5Z0dmFsaRuitKWXMu2W8SSIBfns+J8+cTeQAaB2A=")))
									{
										this.method_36();
										this.method_39(GClass14.string_19);
										return;
									}
									string text14 = GClass14.gclass2_0.method_54();
									if (text14 == null || !text14.Contains(this.gclass18_0.method_2("zoqYC1GLhyTWzyCXv3l2flFcMWd5qPOJXcFW+jkgb9w=")))
									{
										this.method_36();
										this.method_39(GClass14.string_23);
										this.class1_0.method_0(GClass14.string_10, "OK", "");
										return;
									}
									Dictionary<string, string> dictionary9 = new Dictionary<string, string>();
									dictionary9.Add(this.gclass18_0.method_2("IHtFla+vZ8XTwKyEzUY4Hw=="), text14);
									string text15 = this.method_11();
									if (text15 == null)
									{
										this.gclass7_0.method_0("error", this.gclass18_0.method_2("4z9KZElgJuwyLZco2ZwolQ=="));
										this.method_36();
										this.method_39(GClass14.string_51);
										return;
									}
									dictionary9.Add(this.gclass18_0.method_2("FPYvQUNsKINEju2l8e9NKg=="), text15);
									string text16 = this.method_19("sendActivationForCheck1", dictionary9, false);
									if (text16 == null)
									{
										this.method_36();
										this.method_39(GClass14.string_51);
										return;
									}
									string text17 = this.method_12(text16);
									if (text17 == null)
									{
										this.gclass7_0.method_0("error", this.gclass18_0.method_2("4z9KZElgJuwyLZco2ZwolQ=="));
										this.method_36();
										this.method_39(GClass14.string_51);
										return;
									}
									dictionary9.Clear();
									dictionary9.Add(this.gclass18_0.method_2("IHtFla+vZ8XTwKyEzUY4Hw=="), text14);
									dictionary9.Add(this.gclass18_0.method_2("FPYvQUNsKINEju2l8e9NKg=="), text15);
									dictionary9.Add(this.gclass18_0.method_2("0pBFcBeiyRTAwstEoVBplw=="), text17);
									string text18 = this.method_19("sendActivationForCheck2", dictionary9, false);
									if (text18 == null)
									{
										this.method_36();
										this.method_39(GClass14.string_51);
										return;
									}
									string value = this.method_12(text18);
									if (text17 == null)
									{
										this.gclass7_0.method_0("error", this.gclass18_0.method_2("4z9KZElgJuwyLZco2ZwolQ=="));
										this.method_36();
										this.method_39(GClass14.string_51);
										return;
									}
									dictionary9.Clear();
									dictionary9.Add(this.gclass18_0.method_2("IHtFla+vZ8XTwKyEzUY4Hw=="), text14);
									dictionary9.Add(this.gclass18_0.method_2("FPYvQUNsKINEju2l8e9NKg=="), text15);
									dictionary9.Add(this.gclass18_0.method_2("0pBFcBeiyRTAwstEoVBplw=="), text17);
									dictionary9.Add(this.gclass18_0.method_2("+2GXbg8V4qBeKsxLp3823A=="), value);
									string text19 = this.method_19("sendActivationForCheck3", dictionary9, false);
									if (text19 == null)
									{
										this.method_39(GClass14.string_23);
										this.method_36();
										return;
									}
									if (text19.Contains("supported_for_signal"))
									{
										string text20 = this.gclass7_0.method_0(this.gclass18_0.method_2("J4qxIll5qmlsp03EHzOtGeZLtnclKD+9iwlwy15Lkl4="), "");
										if (text20 == null || !text20.Contains("status") || text20.Contains("Invalid Request"))
										{
											this.method_39(GClass14.string_23);
											this.method_36();
											return;
										}
										Dictionary<string, string> dictionary10 = JsonConvert.DeserializeObject<Dictionary<string, string>>(text20);
										if (dictionary10["status"] == "0")
										{
											string text21 = dictionary10["error"];
											bool flag5 = false;
											if (text21.Contains("We have detected an unusual activity for your order"))
											{
												flag5 = true;
											}
											else if (text21.Contains("fraud activity "))
											{
												flag5 = true;
											}
											else if (text21.Contains("Error Text: "))
											{
												flag5 = true;
											}
											if (flag5)
											{
												this.method_39(GClass14.string_23);
												this.method_36();
												this.class1_0.method_0(text21.Replace("Error Text: ", ""), "OK", "");
												return;
											}
										}
										else if (dictionary10["status"] == "1" && dictionary10.ContainsKey("createInvoice"))
										{
											this.string_0 = GClass14.string_79 + this.method_32(dictionary10, this.gclass18_0.method_2("khN1qZkIE5t1oDhJ3KqPcA=="));
											flag2 = true;
											text2 = GClass14.string_30;
											okText = "Order iCloud Bypass";
										}
									}
									else
									{
										if (!text19.Contains("no_signal"))
										{
											this.method_39(GClass14.string_23);
											this.method_36();
											return;
										}
										string text22 = this.gclass7_0.method_0(this.gclass18_0.method_2("J4qxIll5qmlsp03EHzOtGUvROy0dvJA64o9uP1dWvMI="), "");
										if (text22 == null || !text22.Contains("status") || text22.Contains("Invalid Request"))
										{
											this.method_39(GClass14.string_23);
											this.method_36();
											return;
										}
										Dictionary<string, string> dictionary11 = JsonConvert.DeserializeObject<Dictionary<string, string>>(text22);
										if (dictionary11["status"] == "0")
										{
											string text23 = dictionary11["error"];
											bool flag6 = false;
											if (text23.Contains("We have detected an unusual activity for your order"))
											{
												flag6 = true;
											}
											else if (text23.Contains("fraud activity "))
											{
												flag6 = true;
											}
											else if (text23.Contains("Error Text: "))
											{
												flag6 = true;
											}
											if (flag6)
											{
												this.method_39(GClass14.string_23);
												this.method_36();
												this.class1_0.method_0(text23.Replace("Error Text: ", ""), "OK", "");
												return;
											}
										}
										else if (dictionary11["status"] == "1" && dictionary11.ContainsKey("createInvoice"))
										{
											this.string_0 = GClass14.string_79 + this.method_32(dictionary11, this.gclass18_0.method_2("khN1qZkIE5t1oDhJ3KqPcA=="));
											flag2 = true;
											text2 = GClass14.string_52;
											okText = "Order iCloud Bypass [NO SIGNAL]";
										}
									}
								}
							}
							else
							{
								string text24 = this.method_4();
								if (text24 == null)
								{
									this.method_39(GClass14.string_23);
									this.method_36();
									return;
								}
								if (text24.Contains("supported_for_signal"))
								{
									string text25 = this.gclass7_0.method_0(this.gclass18_0.method_2("J4qxIll5qmlsp03EHzOtGbojyoU2IqbNE83pFfQpzZ0="), "");
									if (text25 == null || !text25.Contains("status") || text25.Contains("Invalid Request"))
									{
										this.method_39(GClass14.string_23);
										this.method_36();
										return;
									}
									Dictionary<string, string> dictionary12 = JsonConvert.DeserializeObject<Dictionary<string, string>>(text25);
									if (dictionary12["status"] == "0")
									{
										string text26 = dictionary12["error"];
										bool flag7 = false;
										if (text26.Contains("We have detected an unusual activity for your order"))
										{
											flag7 = true;
										}
										else if (text26.Contains("fraud activity "))
										{
											flag7 = true;
										}
										else if (text26.Contains("Error Text: "))
										{
											flag7 = true;
										}
										if (flag7)
										{
											this.method_39(GClass14.string_23);
											this.method_36();
											this.class1_0.method_0(text26.Replace("Error Text: ", ""), "OK", "");
											return;
										}
									}
									else if (dictionary12["status"] == "1" && dictionary12.ContainsKey("createInvoice"))
									{
										this.string_0 = GClass14.string_79 + this.method_32(dictionary12, this.gclass18_0.method_2("khN1qZkIE5t1oDhJ3KqPcA=="));
										flag2 = true;
										text2 = GClass14.string_30;
										okText = "Order iCloud Bypass";
									}
								}
								else if (text24.Contains("no_signal"))
								{
									string text27 = this.gclass7_0.method_0(this.gclass18_0.method_2("J4qxIll5qmlsp03EHzOtGb9r27FkMPACrOPqcD+OpRU="), "");
									if (text27 == null || !text27.Contains("status") || text27.Contains("Invalid Request"))
									{
										this.method_39(GClass14.string_23);
										this.method_36();
										return;
									}
									Dictionary<string, string> dictionary13 = JsonConvert.DeserializeObject<Dictionary<string, string>>(text27);
									if (dictionary13["status"] == "0")
									{
										string text28 = dictionary13["error"];
										bool flag8 = false;
										if (text28.Contains("We have detected an unusual activity for your order"))
										{
											flag8 = true;
										}
										else if (text28.Contains("fraud activity "))
										{
											flag8 = true;
										}
										else if (text28.Contains("Error Text: "))
										{
											flag8 = true;
										}
										if (flag8)
										{
											this.method_39(GClass14.string_23);
											this.method_36();
											this.class1_0.method_0(text28.Replace("Error Text: ", ""), "OK", "");
											return;
										}
									}
									else if (dictionary13["status"] == "1" && dictionary13.ContainsKey("createInvoice"))
									{
										this.string_0 = GClass14.string_79 + this.method_32(dictionary13, this.gclass18_0.method_2("khN1qZkIE5t1oDhJ3KqPcA=="));
										flag2 = true;
										text2 = GClass14.string_52;
										okText = "Order iCloud Bypass [NO SIGNAL]";
									}
								}
								else
								{
									if (!text24.Contains("need_check"))
									{
										this.method_39(GClass14.string_23);
										this.method_36();
										return;
									}
									if (!this.method_48())
									{
										this.method_39(GClass14.string_25);
										base.Invoke(new Action(delegate()
										{
											this.jailForm_0 = new JailForm();
											this.jailForm_0.Owner = this;
											this.jailForm_0.StartPosition = FormStartPosition.CenterParent;
											this.jailForm_0.materialForm_0 = this;
											this.jailForm_0.bool_3 = true;
											this.jailForm_0.bool_4 = false;
											this.materialSkinManager_0.RemoveFormToManage(this);
											this.materialSkinManager_0.AddFormToManage(this.jailForm_0);
											this.jailForm_0.ShowDialog(this);
										}));
										return;
									}
									if (!this.gclass17_0.method_7())
									{
										this.gclass7_0.method_0("error", this.gclass18_0.method_2("bxOvbkcwc96y86KGw8hEAg=="));
										this.method_36();
										this.method_39(GClass14.string_23);
										return;
									}
									if (this.bool_2)
									{
										return;
									}
									if (!GClass14.gclass2_0.method_27(Convert.FromBase64String(GClass14.string_74), this.gclass18_0.method_2("B0SDcyUZtJkR1ExPBHPoboy/v01DWzBiUfOrIlaP4YY=")))
									{
										this.method_38();
										this.gclass7_0.method_0("error", this.gclass18_0.method_2("doy5myrlA+NFMivO9dgWgg=="));
										this.class1_0.method_0(GClass14.string_42, "OK", "");
										return;
									}
									this.method_52();
									if (this.bool_2)
									{
										return;
									}
									this.gclass17_0.method_5(this.gclass18_0.method_2("8rY6pvGxzOGJecgo+b+COdSdNw583DwrqYSJ6iB1Mf9VwIspzqq1zAoHoz8bxrtXKNzTmKnaPdNHtweitduDdqZq+rGEtqRgUAV6cMmKyCIc8egI3qnmRdQICQ6wqylonGA7hhE9cUtKe6k81YsjMCg7ogpL9Vo/LV+vzAo6vpQ="), 0);
									this.gclass17_0.method_5(this.gclass18_0.method_2("zoQUTFJgzo+uip+eNXoOew==") + GClass14.string_75 + this.gclass18_0.method_2("B0SDcyUZtJkR1ExPBHPobktV2wubtvI076zOAkxSFAEIoMjPXAlCWKj2c3QFPSw25XV66SKxX7BRxApYPJRAlR7/v6a1j8xpbrTXOiD6W2z/XxWPmTlcaS6DV3Z2ikSfa091JXJz0h4+GOIlzvE/g8SQo+/L3a+v2DPctIc+yUk="), 0);
									if (this.bool_2)
									{
										return;
									}
									if (GClass14.gclass2_0.SIMStatus.Equals(this.gclass18_0.method_2("2Ip5Z0dmFsaRuitKWXMu2W8SSIBfns+J8+cTeQAaB2A=")))
									{
										this.method_36();
										this.method_39(GClass14.string_19);
										return;
									}
									this.gclass12_0.method_1();
									string text29 = this.method_22();
									if (text29 == null || !text29.Contains(this.gclass18_0.method_2("zoqYC1GLhyTWzyCXv3l2flFcMWd5qPOJXcFW+jkgb9w=")))
									{
										this.gclass7_0.method_0("error", this.gclass18_0.method_2("HKPzXNiI3AdzhuoiCpm2UA=="));
										this.method_36();
										this.method_30();
										this.method_39(GClass14.string_51);
										return;
									}
									Dictionary<string, string> dictionary14 = new Dictionary<string, string>();
									dictionary14.Add(this.gclass18_0.method_2("IHtFla+vZ8XTwKyEzUY4Hw=="), text29);
									string text30 = this.method_9();
									if (text30 == null)
									{
										this.gclass7_0.method_0("error", this.gclass18_0.method_2("4z9KZElgJuwyLZco2ZwolQ=="));
										this.method_36();
										this.method_39(GClass14.string_51);
										return;
									}
									dictionary14.Add(this.gclass18_0.method_2("FPYvQUNsKINEju2l8e9NKg=="), text30);
									string text31 = this.method_19("sendActivationForCheck1", dictionary14, false);
									if (text31 == null)
									{
										this.method_36();
										this.method_39(GClass14.string_51);
										return;
									}
									string text32 = this.method_10(text31);
									if (text32 == null)
									{
										this.gclass7_0.method_0("error", this.gclass18_0.method_2("4z9KZElgJuwyLZco2ZwolQ=="));
										this.method_36();
										this.method_39(GClass14.string_51);
										return;
									}
									dictionary14.Clear();
									dictionary14.Add(this.gclass18_0.method_2("IHtFla+vZ8XTwKyEzUY4Hw=="), text29);
									dictionary14.Add(this.gclass18_0.method_2("FPYvQUNsKINEju2l8e9NKg=="), text30);
									dictionary14.Add(this.gclass18_0.method_2("0pBFcBeiyRTAwstEoVBplw=="), text32);
									string text33 = this.method_19("sendActivationForCheck2", dictionary14, false);
									if (text33 == null)
									{
										this.method_36();
										this.method_39(GClass14.string_51);
										return;
									}
									string value2 = this.method_10(text33);
									if (text32 == null)
									{
										this.gclass7_0.method_0("error", this.gclass18_0.method_2("4z9KZElgJuwyLZco2ZwolQ=="));
										this.method_36();
										this.method_39(GClass14.string_51);
										return;
									}
									dictionary14.Clear();
									dictionary14.Add(this.gclass18_0.method_2("IHtFla+vZ8XTwKyEzUY4Hw=="), text29);
									dictionary14.Add(this.gclass18_0.method_2("FPYvQUNsKINEju2l8e9NKg=="), text30);
									dictionary14.Add(this.gclass18_0.method_2("0pBFcBeiyRTAwstEoVBplw=="), text32);
									dictionary14.Add(this.gclass18_0.method_2("+2GXbg8V4qBeKsxLp3823A=="), value2);
									string text34 = this.method_19("sendActivationForCheck3", dictionary14, false);
									Console.WriteLine("RESULT: " + text34);
									this.gclass12_0.method_1();
									if (text34 == null)
									{
										this.method_39(GClass14.string_23);
										this.method_36();
										return;
									}
									if (text34.Contains("supported_for_signal"))
									{
										string text35 = this.gclass7_0.method_0(this.gclass18_0.method_2("J4qxIll5qmlsp03EHzOtGbojyoU2IqbNE83pFfQpzZ0="), "");
										if (text35 == null || !text35.Contains("status") || text35.Contains("Invalid Request"))
										{
											this.method_39(GClass14.string_23);
											this.method_36();
											return;
										}
										Dictionary<string, string> dictionary15 = JsonConvert.DeserializeObject<Dictionary<string, string>>(text35);
										if (dictionary15["status"] == "0")
										{
											string text36 = dictionary15["error"];
											bool flag9 = false;
											if (text36.Contains("We have detected an unusual activity for your order"))
											{
												flag9 = true;
											}
											else if (text36.Contains("fraud activity "))
											{
												flag9 = true;
											}
											else if (text36.Contains("Error Text: "))
											{
												flag9 = true;
											}
											if (flag9)
											{
												this.method_39(GClass14.string_23);
												this.method_36();
												this.class1_0.method_0(text36.Replace("Error Text: ", ""), "OK", "");
												return;
											}
										}
										else if (dictionary15["status"] == "1" && dictionary15.ContainsKey("createInvoice"))
										{
											this.string_0 = GClass14.string_79 + this.method_32(dictionary15, this.gclass18_0.method_2("khN1qZkIE5t1oDhJ3KqPcA=="));
											flag2 = true;
											text2 = GClass14.string_30;
											okText = "Order iCloud Bypass";
										}
									}
									else
									{
										if (!text34.Contains("no_signal"))
										{
											this.method_39(GClass14.string_23);
											this.method_36();
											return;
										}
										string text37 = this.gclass7_0.method_0(this.gclass18_0.method_2("J4qxIll5qmlsp03EHzOtGb9r27FkMPACrOPqcD+OpRU="), "");
										if (text37 == null || !text37.Contains("status") || text37.Contains("Invalid Request"))
										{
											this.method_39(GClass14.string_23);
											this.method_36();
											return;
										}
										Dictionary<string, string> dictionary16 = JsonConvert.DeserializeObject<Dictionary<string, string>>(text37);
										if (dictionary16["status"] == "0")
										{
											string text38 = dictionary16["error"];
											bool flag10 = false;
											if (text38.Contains("We have detected an unusual activity for your order"))
											{
												flag10 = true;
											}
											else if (text38.Contains("fraud activity "))
											{
												flag10 = true;
											}
											else if (text38.Contains("Error Text: "))
											{
												flag10 = true;
											}
											if (flag10)
											{
												this.method_39(GClass14.string_23);
												this.method_36();
												this.class1_0.method_0(text38.Replace("Error Text: ", ""), "OK", "");
												return;
											}
										}
										else if (dictionary16["status"] == "1" && dictionary16.ContainsKey("createInvoice"))
										{
											this.string_0 = GClass14.string_79 + this.method_32(dictionary16, this.gclass18_0.method_2("khN1qZkIE5t1oDhJ3KqPcA=="));
											flag2 = true;
											text2 = GClass14.string_52;
											okText = "Order iCloud Bypass [NO SIGNAL]";
										}
									}
								}
							}
						}
						if (flag2 && this.string_0 != null)
						{
							this.bool_1 = true;
							if (text2.Equals(GClass14.string_52))
							{
								this.method_42();
							}
							else
							{
								this.method_43();
							}
							this.method_36();
							base.Invoke(new Action(delegate()
							{
								this.startButton.Text = "Make payment";
								this.startButton.Enabled = true;
							}));
							this.class1_0.method_0(text2, okText, this.string_0);
						}
						else if (GClass14.bool_7)
						{
							this.method_42();
							this.method_36();
							this.bool_1 = true;
							this.class1_0.method_0(GClass14.string_22, "Open resellers site", GClass14.string_7);
						}
						else
						{
							this.method_40();
						}
					}
				}
				else
				{
					if (this.bool_2)
					{
						return;
					}
					this.method_38();
				}
				this.method_36();
			}
		}

		// Token: 0x0600003D RID: 61 RVA: 0x00014020 File Offset: 0x00012220
		public void method_30()
		{
			this.method_52();
			this.gclass17_0.method_5(this.gclass18_0.method_2("8rY6pvGxzOGJecgo+b+COcZmTr1nJJNFhH8YSMEgUrQ=") + GClass14.string_87 + this.gclass18_0.method_2("6pC10jJIPdWi6x/vJLS8w87DUzWB+m3QiuxT9JKkRQA="), 0);
			this.gclass17_0.method_5(this.gclass18_0.method_2("Hzly8VrD/+56f6QVBBYIjg==") + GClass14.string_87 + this.gclass18_0.method_2("6pC10jJIPdWi6x/vJLS8w87DUzWB+m3QiuxT9JKkRQA="), 0);
			this.gclass17_0.method_5(this.gclass18_0.method_2("jBBlNPWFVmU71bcHjSReof+r64F721b9/4t05K/TF54z3EivaS+jzVFJWN8ckUjsziKCJDwpYshbKwwFEM2M19gwPGYecG9GhsZB+iuKk/My1pNGKWXHKWBetdHEtyQk") + GClass14.string_75 + this.gclass18_0.method_2("TBb1pPstWwJg/va7HUfDX4vkmN/vOykw5WH6gK+e87yo5SXdd753RUZKCDMht49K6tmfIl7vw6NmIGTMbh7MRw=="), 0);
			this.gclass17_0.method_5(this.gclass18_0.method_2("rA5R48JwcT+/visQ/6KnKfaYJjnQToodFI3J98LoD4I=") + GClass14.string_75 + this.gclass18_0.method_2("TBb1pPstWwJg/va7HUfDX4vkmN/vOykw5WH6gK+e87yo5SXdd753RUZKCDMht49K6tmfIl7vw6NmIGTMbh7MRw=="), 0);
			GClass14.gclass2_0.method_28(GClass14.string_3, this.gclass18_0.method_2("TBb1pPstWwJg/va7HUfDX4vkmN/vOykw5WH6gK+e87yo5SXdd753RUZKCDMht49K6tmfIl7vw6NmIGTMbh7MRw=="));
			this.gclass17_0.method_5("rm " + GClass14.string_75 + this.gclass18_0.method_2("TBb1pPstWwJg/va7HUfDX4vkmN/vOykw5WH6gK+e87yo5SXdd753RUZKCDMht49K6tmfIl7vw6NmIGTMbh7MRw=="), 0);
			string @string = Encoding.Default.GetString(File.ReadAllBytes(GClass14.string_3 + this.gclass18_0.method_2("TBb1pPstWwJg/va7HUfDX4vkmN/vOykw5WH6gK+e87yo5SXdd753RUZKCDMht49K6tmfIl7vw6NmIGTMbh7MRw==")));
			string s = GClass14.gclass2_0.method_29(@string);
			this.method_52();
			GClass14.gclass2_0.method_27(Encoding.Default.GetBytes(s), this.gclass18_0.method_2("TBb1pPstWwJg/va7HUfDX4vkmN/vOykw5WH6gK+e87yo5SXdd753RUZKCDMht49K6tmfIl7vw6NmIGTMbh7MRw=="));
			this.gclass17_0.method_5(this.gclass18_0.method_2("8rY6pvGxzOGJecgo+b+COUkF+ggqV/AeXOgM5kEC3ZiOKEYe6/6qoVuidIxx9ZQ+U7L4TzqVekYQ2xKxmVdWZAw1d3XneyD0s6KzVzIMH6sgkAZd8XM8NtPFQ+Cj2t2Z177hdqXwG5TysUYMrrWixA=="), 0);
			this.gclass17_0.method_5(this.gclass18_0.method_2("zoQUTFJgzo+uip+eNXoOew==") + GClass14.string_75 + this.gclass18_0.method_2("TBb1pPstWwJg/va7HUfDX4vkmN/vOykw5WH6gK+e87yo5SXdd753RUZKCDMht49Kb3IafSgf/xIpSGzoT09BK/2Zw0bWMsH5LCfwa/2QgNSxU1wVXpxdSk8cv9EwgKSzRoyHOkV90EGxQq8xneYdwUFb5aomWdvhjpEZjmlI1ZHmPBkX8M+8Fx/34NKwA1Uf"), 0);
			this.gclass17_0.method_5(this.gclass18_0.method_2("cRD6XCtsfsDqXqHvkQVOu4j44GfZZjLjnol89ZgMWGIzxZx+U5vk7/2Hro8mvffOgrUV1z22A2bLXp8UaorIb8dNMco/Tl3/+KMR+ZyPuDuYga8Mig42acE33i7Q0sShla4lFtGDlLWQt+8Xna355w=="), 0);
		}

		// Token: 0x0600003E RID: 62 RVA: 0x00014230 File Offset: 0x00012430
		public void method_31()
		{
			GClass14.gclass2_0.method_35();
			GClass14.gclass2_0.method_27(Convert.FromBase64String(GClass16.smethod_10()), this.gclass18_0.method_2("TzyTRIcrXoWyAUN39GRXoCn46/4z9F0oPGgnjXoje0I="));
			this.method_52();
			this.gclass17_0.method_5(this.gclass18_0.method_2("8rY6pvGxzOGJecgo+b+COc/J3Zli583LJaz38hlTjaKs41AGkm1KG57sDkJc906ksQPgxFQQ+i5zUhw9Sb0QvFsnhNFFxoZEgMVvTzMHrJ4WuFOzTmRD3vWm1gQPOute"), 0);
			this.gclass17_0.method_5(this.gclass18_0.method_2("zoQUTFJgzo+uip+eNXoOew==") + GClass14.string_75 + this.gclass18_0.method_2("TzyTRIcrXoWyAUN39GRXoLxAcg5Twe5J+gsBlGNdEOyxfvfDkeCIVTN8g+jzd/h5zz0i5VuWy5/bcgmbYl8KlNaBaUfQlWfExRkfKaAeGBtIBH9yJMnx9JrRc7XUk/Sx"), 0);
			string text = this.method_32(GClass14.dictionary_0, "productVersion");
			if (text != string.Empty && (text.Contains("14.") || text.Contains("15.")))
			{
				this.gclass17_0.method_5(this.gclass18_0.method_2("ys2n/JQtzOkDyNqtd1pTKC5N5Ci/3dWxPpPEUC1Qddc="), 0);
				this.gclass17_0.method_5(this.gclass18_0.method_2("m8jxrbr4u59nCJ2TJooFXrUhm2h3++3L9NRsVci0h8uf6wkH4RbSwRHkGaPi293so6eOzS08nqAkAEvlnyqGAsNFHMer0D+DPJY1laBebhaaMQ43bXtbwoPlKUvxb0wYn84ByZ8O8RFlvCb1gjfbpPYB7VcVuPD0UJLWojW2I9iW9M6uU/i233LoZj2UXmgQs2xpkuvUVYR9aQKxpjkyls03Z8UZlSWQ6GUTqJge8QkjwxsflnESSpHVb6zeq3wJDayiNvMeJ+RJ0wk7CJaZx81TVbN8I1aGJEvaOWMg3JlcG03wBMSUPpK+9sflh8Oo4QToHhDuyd6hxp1edUsa33WoZwrWy7I9bfGmqHAWhIg="), 0);
				this.gclass17_0.method_5(this.gclass18_0.method_2("ys2n/JQtzOkDyNqtd1pTKC5N5Ci/3dWxPpPEUC1Qddc="), 0);
			}
			this.gclass17_0.method_5(this.gclass18_0.method_2("15QNX9Nq1+yISgqXpzwi+4QmRrtNz1FpvlN825SLpKcBLu3FlKnh6xr7/fqdLdgXZj8sQWZrmHxYDTmSsEfgbE0HJsyU2HcnBQtdegLCHRz6+xg8Q1SlUCPRZ0fgBBRn"), 0);
		}

		// Token: 0x0600003F RID: 63 RVA: 0x00014378 File Offset: 0x00012578
		public string method_32(Dictionary<string, string> dictionary, string key)
		{
			string result;
			try
			{
				result = dictionary[key];
			}
			catch
			{
				result = string.Empty;
			}
			return result;
		}

		// Token: 0x06000040 RID: 64
		[DllImport("User32.dll")]
		public static extern bool ReleaseCapture();

		// Token: 0x06000041 RID: 65
		[DllImport("User32.dll")]
		public static extern int SendMessage(IntPtr hWnd, int Msg, int wParam, int lParam);

		// Token: 0x06000042 RID: 66 RVA: 0x000143AC File Offset: 0x000125AC
		private void method_33(object sender, MouseEventArgs e)
		{
			if (e.Button == MouseButtons.Left)
			{
				Form1.ReleaseCapture();
				Form1.SendMessage(base.Handle, 161, 2, 0);
			}
		}

		// Token: 0x06000043 RID: 67 RVA: 0x000143AC File Offset: 0x000125AC
		private void windowTitle_MouseDown(object sender, MouseEventArgs e)
		{
			if (e.Button == MouseButtons.Left)
			{
				Form1.ReleaseCapture();
				Form1.SendMessage(base.Handle, 161, 2, 0);
			}
		}

		// Token: 0x06000044 RID: 68 RVA: 0x000143E4 File Offset: 0x000125E4
		private void minimize_Click(object sender, EventArgs e)
		{
			base.WindowState = FormWindowState.Minimized;
		}

		// Token: 0x06000045 RID: 69 RVA: 0x000143F8 File Offset: 0x000125F8
		private void close_Click(object sender, EventArgs e)
		{
			if (this.gclass17_0 != null)
			{
				this.gclass17_0.method_4();
			}
			try
			{
				if (this.thread_0 != null)
				{
					this.thread_0.Abort();
				}
			}
			catch
			{
			}
			try
			{
				if (this.thread_1 != null)
				{
					this.thread_1.Abort();
				}
			}
			catch
			{
			}
			base.Close();
		}

		// Token: 0x06000046 RID: 70 RVA: 0x00014478 File Offset: 0x00012678
		private void Form1_Load(object sender, EventArgs e)
		{
			this.DoubleBuffered = true;
			byte[] array = Convert.FromBase64String(Resources.imageGradient);
			using (MemoryStream memoryStream = new MemoryStream(array, 0, array.Length))
			{
				this.pictureBoxMain.Image = Image.FromStream(memoryStream, true);
			}
			this.pictureBoxMain.Parent = this;
			this.pictureBoxMain.BackColor = Color.Transparent;
			this.cantSeeLabel.BackColor = Color.Transparent;
			this.cantSeeLabel.Parent = this.noConnectPanel;
			this.cantSeeLabel.Font = this.materialSkinManager_0.getFontByType(11);
			this.cantSeeLabel.ForeColor = Color.DeepSkyBlue;
			this.cantSeeLabel.Cursor = Cursors.Hand;
			this.method_34(this.windowTitle, this.pictureBoxMain);
			this.method_34(this.statusLabel, this.pictureBoxMain);
			this.method_34(this.imeiLabel, this.connectedPanel);
			this.method_34(this.imeiValue, this.connectedPanel);
			this.method_34(this.serialNumberLabel, this.connectedPanel);
			this.method_34(this.serialNumberValue, this.connectedPanel);
			this.method_34(this.udidLabel, this.connectedPanel);
			this.method_34(this.udidValue, this.connectedPanel);
			this.method_34(this.productTypeLabel, this.connectedPanel);
			this.method_34(this.productTypeValue, this.connectedPanel);
			this.method_34(this.iosLabel, this.connectedPanel);
			this.method_34(this.iosValue, this.connectedPanel);
			this.connectDevicePicture.BackColor = Color.Transparent;
			this.connectDevicePicture.Parent = this.noConnectPanel;
			this.close.Parent = this.windowTitle;
			this.close.BackColor = Color.Transparent;
			this.minimize.Parent = this.windowTitle;
			this.minimize.BackColor = Color.Transparent;
			this.connectedPanel.Parent = this.pictureBoxMain;
			this.connectedPanel.BackColor = Color.Transparent;
			this.connectedPanel.Visible = false;
			this.noConnectPanel.Parent = this.pictureBoxMain;
			this.noConnectPanel.BackColor = Color.Transparent;
			this.startButton.Parent = this.connectedPanel;
			this.startButton.BackColor = Color.Transparent;
			this.deviceImage.Parent = this.connectedPanel;
			this.deviceImage.BackColor = Color.Transparent;
			this.loader.BackColor = Color.Transparent;
			this.loader.Parent = this.pictureBoxMain;
			this.statusColor.Parent = this.pictureBoxMain;
			this.statusColor.BackColor = Color.FromArgb(100, 255, 255, 255);
			this.close.GotFocus += this.minimize_GotFocus;
			this.minimize.GotFocus += this.minimize_GotFocus;
			ToolTip toolTip = new ToolTip();
			toolTip.SetToolTip(this.imeiValue, this.gclass18_0.method_2("NbgLcUaoKEQyfca7ENCEOHQ5ebn/2Dp3xwc+uGhVihg="));
			this.imeiValue.Cursor = Cursors.Hand;
			ToolTip toolTip2 = new ToolTip();
			toolTip2.SetToolTip(this.serialNumberValue, this.gclass18_0.method_2("1DRd65sAoTzO7iaYy99W6XMe59EZHxsygzPxsFrC+JU="));
			this.serialNumberValue.Cursor = Cursors.Hand;
			this.thread_2 = new Thread(new ThreadStart(this.method_59));
			this.thread_2.IsBackground = true;
			this.thread_2.Start();
		}

		// Token: 0x06000047 RID: 71 RVA: 0x00014824 File Offset: 0x00012A24
		private void minimize_GotFocus(object sender, EventArgs e)
		{
			Button button = sender as Button;
			button.NotifyDefault(false);
		}

		// Token: 0x06000048 RID: 72 RVA: 0x00014840 File Offset: 0x00012A40
		private void method_34(Label label, Control parrent)
		{
			label.Parent = parrent;
			label.BackColor = Color.Transparent;
			Font fontByType = this.materialSkinManager_0.getFontByType(5);
			label.Font = new Font(fontByType.FontFamily, 12.2f, fontByType.Style);
		}

		// Token: 0x06000049 RID: 73 RVA: 0x00014888 File Offset: 0x00012A88
		private void cantSeeLabel_Click(object sender, EventArgs e)
		{
			this.class1_0.method_2(GClass14.string_85);
		}

		// Token: 0x0600004A RID: 74 RVA: 0x000148A8 File Offset: 0x00012AA8
		public void method_35()
		{
			base.Invoke(new Action(delegate()
			{
				this.loader.Visible = true;
				this.statusLabel.Text = GClass14.string_28;
				this.bool_0 = false;
				this.startButton.Enabled = false;
			}));
		}

		// Token: 0x0600004B RID: 75 RVA: 0x000148C8 File Offset: 0x00012AC8
		public void method_36()
		{
			base.Invoke(new Action(delegate()
			{
				this.loader.Visible = false;
			}));
		}

		// Token: 0x0600004C RID: 76 RVA: 0x000148E8 File Offset: 0x00012AE8
		public void method_37()
		{
			base.Invoke(new Action(delegate()
			{
				this.loader.Visible = true;
			}));
		}

		// Token: 0x0600004D RID: 77 RVA: 0x00014908 File Offset: 0x00012B08
		public void method_38()
		{
			base.Invoke(new Action(delegate()
			{
				this.loader.Visible = false;
				this.statusLabel.Text = GClass14.string_40;
				this.bool_0 = false;
				this.startButton.Enabled = true;
				this.statusColor.BackColor = Color.FromArgb(255, 3, 169, 244);
				if (this.startButton.Text == "Make payment")
				{
					this.startButton.Text = "Start";
				}
			}));
		}

		// Token: 0x0600004E RID: 78 RVA: 0x00014928 File Offset: 0x00012B28
		public void method_39(string error)
		{
			base.Invoke(new Action(delegate()
			{
				this.loader.Visible = false;
				this.statusLabel.Text = error;
				this.bool_0 = false;
				this.startButton.Enabled = false;
				this.statusColor.BackColor = Color.FromArgb(255, 255, 192, 7);
			}));
		}

		// Token: 0x0600004F RID: 79 RVA: 0x0001495C File Offset: 0x00012B5C
		public void method_40()
		{
			base.Invoke(new Action(delegate()
			{
				this.statusLabel.Text = GClass14.string_31;
				this.startButton.Enabled = false;
				this.statusColor.BackColor = Color.FromArgb(255, 244, 67, 54);
			}));
		}

		// Token: 0x06000050 RID: 80 RVA: 0x0001497C File Offset: 0x00012B7C
		public void method_41()
		{
			base.Invoke(new Action(delegate()
			{
				this.statusLabel.Text = GClass14.string_26;
				this.startButton.Enabled = false;
				this.statusColor.BackColor = Color.FromArgb(255, 244, 67, 54);
			}));
		}

		// Token: 0x06000051 RID: 81 RVA: 0x0001499C File Offset: 0x00012B9C
		public void method_42()
		{
			base.Invoke(new Action(delegate()
			{
				this.statusLabel.Text = GClass14.string_54;
				this.startButton.Enabled = false;
				this.statusColor.BackColor = Color.FromArgb(255, 76, 175, 80);
			}));
		}

		// Token: 0x06000052 RID: 82 RVA: 0x000149BC File Offset: 0x00012BBC
		public void method_43()
		{
			base.Invoke(new Action(delegate()
			{
				this.statusLabel.Text = GClass14.string_29;
				this.startButton.Enabled = false;
				this.statusColor.BackColor = Color.FromArgb(255, 76, 175, 80);
			}));
		}

		// Token: 0x06000053 RID: 83 RVA: 0x000149DC File Offset: 0x00012BDC
		public void method_44()
		{
			base.Invoke(new Action(delegate()
			{
				this.loader.Visible = true;
				this.bool_0 = false;
				this.startButton.Enabled = false;
				this.statusColor.BackColor = Color.FromArgb(255, 3, 169, 244);
				this.statusLabel.Text = GClass14.string_21;
			}));
		}

		// Token: 0x06000054 RID: 84 RVA: 0x000149FC File Offset: 0x00012BFC
		public void method_45()
		{
			base.Invoke(new Action(delegate()
			{
				this.loader.Visible = true;
				this.bool_0 = false;
				this.startButton.Enabled = false;
				this.statusColor.BackColor = Color.FromArgb(255, 3, 169, 244);
				this.statusLabel.Text = GClass14.string_27;
			}));
		}

		// Token: 0x06000055 RID: 85 RVA: 0x00014A1C File Offset: 0x00012C1C
		public void method_46()
		{
			base.Invoke(new Action(delegate()
			{
				this.loader.Visible = false;
				this.bool_0 = true;
				this.startButton.Enabled = false;
				this.statusColor.BackColor = Color.FromArgb(255, 76, 175, 80);
				this.statusLabel.Text = GClass14.string_36;
			}));
		}

		// Token: 0x06000056 RID: 86 RVA: 0x00014A3C File Offset: 0x00012C3C
		public bool method_47()
		{
			return GClass14.dictionary_0 != null;
		}

		// Token: 0x06000057 RID: 87 RVA: 0x00014A54 File Offset: 0x00012C54
		public bool method_48()
		{
			return this.gclass17_0.method_1();
		}

		// Token: 0x06000058 RID: 88 RVA: 0x00014A6C File Offset: 0x00012C6C
		private void imeiValue_Click(object sender, EventArgs e)
		{
			if (this.method_32(GClass14.dictionary_0, this.gclass18_0.method_2("AQYcDVZhB292wy6LGA+AbQ==")) != string.Empty)
			{
				Clipboard.SetText(this.method_32(GClass14.dictionary_0, this.gclass18_0.method_2("AQYcDVZhB292wy6LGA+AbQ==")));
			}
		}

		// Token: 0x06000059 RID: 89 RVA: 0x00014AC0 File Offset: 0x00012CC0
		private void serialNumberValue_Click(object sender, EventArgs e)
		{
			Clipboard.SetText(this.serialNumberValue.Text);
		}

		// Token: 0x0600005A RID: 90 RVA: 0x00014AE0 File Offset: 0x00012CE0
		private void startButton_Click(object sender, EventArgs e)
		{
			if (this.startButton.Text.Equals("Make payment"))
			{
				this.class1_0.method_2(this.string_0);
			}
			else
			{
				this.method_0();
			}
		}

		// Token: 0x0600005B RID: 91 RVA: 0x00014B20 File Offset: 0x00012D20
		public byte[] method_49(string activationRecord)
		{
			string text = GClass14.gclass2_0.method_34(activationRecord);
			try
			{
				Dictionary<object, object> dictionary = JsonConvert.DeserializeObject<Dictionary<object, object>>(GClass14.gclass2_0.method_33(text));
				if (dictionary.ContainsKey("ActivationTicket"))
				{
					this.string_9 = dictionary["ActivationTicket"].ToString();
				}
				if (dictionary.ContainsKey("WildcardTicket"))
				{
					this.string_9 = dictionary["WildcardTicket"].ToString();
				}
			}
			catch
			{
			}
			byte[] result;
			if (text != null)
			{
				result = Encoding.UTF8.GetBytes(text);
			}
			else
			{
				result = null;
			}
			return result;
		}

		// Token: 0x0600005C RID: 92 RVA: 0x00014BC0 File Offset: 0x00012DC0
		public bool method_50(string name, string content)
		{
			try
			{
				File.WriteAllBytes(GClass14.string_3 + name, Convert.FromBase64String(content));
				File.SetAttributes(GClass14.string_3 + name, FileAttributes.Hidden);
			}
			catch
			{
			}
			return File.Exists(GClass14.string_3 + name);
		}

		// Token: 0x0600005D RID: 93 RVA: 0x00014C1C File Offset: 0x00012E1C
		public bool method_51(string name, byte[] content)
		{
			try
			{
				File.WriteAllBytes(GClass14.string_3 + name, content);
			}
			catch
			{
			}
			return File.Exists(GClass14.string_3 + name);
		}

		// Token: 0x0600005E RID: 94 RVA: 0x00014C60 File Offset: 0x00012E60
		public void method_52()
		{
			try
			{
				DirectoryInfo directoryInfo = new DirectoryInfo(GClass14.string_3);
				foreach (FileInfo fileInfo in directoryInfo.EnumerateFiles())
				{
					try
					{
						fileInfo.Delete();
					}
					catch
					{
					}
				}
				foreach (DirectoryInfo directoryInfo2 in directoryInfo.EnumerateDirectories())
				{
					try
					{
						if (!directoryInfo2.Name.Contains("boot"))
						{
							directoryInfo2.Delete(true);
						}
					}
					catch
					{
					}
				}
			}
			catch
			{
			}
		}

		// Token: 0x0600005F RID: 95 RVA: 0x00014D44 File Offset: 0x00012F44
		private static byte[] smethod_0(string text)
		{
			Func<char, int> parseNybble = (char c) => (int)((c < '0' || c > '9') ? (char.ToLower(c) - 'a' + '\n') : (c - '0'));
			return (from x in Enumerable.Range(0, text.Length / 2)
			select (byte)(parseNybble(text[x * 2]) << 4 | parseNybble(text[x * 2 + 1]))).ToArray<byte>();
		}

		// Token: 0x06000060 RID: 96 RVA: 0x00014DB0 File Offset: 0x00012FB0
		public void method_53()
		{
			try
			{
				foreach (Process process in Process.GetProcesses())
				{
					if (process.ProcessName == this.string_1)
					{
						process.Kill();
					}
					if (process.ProcessName == this.string_2)
					{
						process.Kill();
					}
					if (process.ProcessName.Contains(this.string_3))
					{
						process.Kill();
					}
					if (process.ProcessName.Contains(this.string_4))
					{
						process.Kill();
					}
					if (process.ProcessName.Contains(this.string_5))
					{
						process.Kill();
					}
					if (process.ProcessName.Contains(this.string_6))
					{
						process.Kill();
					}
					if (process.ProcessName.Contains(this.string_7))
					{
						process.Kill();
					}
				}
			}
			catch
			{
			}
		}

		// Token: 0x06000061 RID: 97 RVA: 0x00014EA0 File Offset: 0x000130A0
		public void method_54(object sender, GEventArgs1 e)
		{
			if (e.GEnum0_0 == GEnum0.const_0)
			{
				if (this.jailForm_0 != null)
				{
					this.jailForm_0.gclass2_0 = e.GClass2_0;
				}
				if (this.jailForm_0 == null)
				{
					e.GClass2_0.method_61();
				}
			}
			else if (this.jailForm_0 != null)
			{
				this.jailForm_0.gclass2_0 = null;
			}
		}

		// Token: 0x06000062 RID: 98 RVA: 0x00014F04 File Offset: 0x00013104
		public void method_55(object sender, GEventArgs1 e)
		{
			if (e.GEnum0_0 == GEnum0.const_0)
			{
				if (this.jailForm_0 != null)
				{
					this.jailForm_0.gclass2_1 = e.GClass2_0;
				}
			}
			else if (this.jailForm_0 != null)
			{
				this.jailForm_0.gclass2_1 = null;
			}
		}

		// Token: 0x06000063 RID: 99 RVA: 0x00014F54 File Offset: 0x00013154
		public bool method_56(string text)
		{
			bool result;
			try
			{
				StringBuilder stringBuilder = new StringBuilder(256);
				if (JailForm.GetWindowsDirectory(stringBuilder, stringBuilder.Capacity) == 0U)
				{
					result = false;
				}
				else
				{
					string path = stringBuilder.ToString() + "\\inf";
					string[] files = Directory.GetFiles(path, "oem*.inf");
					foreach (string path2 in files)
					{
						if (File.ReadAllText(path2).Contains(text))
						{
							return true;
						}
					}
					result = false;
				}
			}
			catch (Exception)
			{
				result = false;
			}
			return result;
		}

		// Token: 0x06000064 RID: 100 RVA: 0x00014FF0 File Offset: 0x000131F0
		private bool method_57()
		{
			byte[] array = new byte[]
			{
				60,
				63,
				120,
				109,
				108,
				32,
				118,
				101,
				114,
				115,
				105,
				111,
				110,
				61,
				34,
				49,
				46,
				48,
				34,
				32,
				101,
				110,
				99,
				111,
				100,
				105,
				110,
				103,
				61,
				34,
				85,
				84,
				70,
				45,
				56,
				34,
				63,
				62,
				10,
				60,
				33,
				68,
				79,
				67,
				84,
				89,
				80,
				69,
				32,
				112,
				108,
				105,
				115,
				116,
				32,
				80,
				85,
				66,
				76,
				73,
				67,
				32,
				34,
				45,
				47,
				47,
				65,
				112,
				112,
				108,
				101,
				47,
				47,
				68,
				84,
				68,
				32,
				80,
				76,
				73,
				83,
				84,
				32,
				49,
				46,
				48,
				47,
				47,
				69,
				78,
				34,
				32,
				34,
				104,
				116,
				116,
				112,
				58,
				47,
				47,
				119,
				119,
				119,
				46,
				97,
				112,
				112,
				108,
				101,
				46,
				99,
				111,
				109,
				47,
				68,
				84,
				68,
				115,
				47,
				80,
				114,
				111,
				112,
				101,
				114,
				116,
				121,
				76,
				105,
				115,
				116,
				45,
				49,
				46,
				48,
				46,
				100,
				116,
				100,
				34,
				62,
				10,
				60,
				112,
				108,
				105,
				115,
				116,
				32,
				118,
				101,
				114,
				115,
				105,
				111,
				110,
				61,
				34,
				49,
				46,
				48,
				34,
				62,
				10,
				60,
				100,
				105,
				99,
				116,
				62,
				10,
				9,
				60,
				107,
				101,
				121,
				62,
				65,
				112,
				112,
				108,
				105,
				99,
				97,
				116,
				105,
				111,
				110,
				115,
				60,
				47,
				107,
				101,
				121,
				62,
				10,
				9,
				60,
				100,
				105,
				99,
				116,
				47,
				62,
				10,
				9,
				60,
				107,
				101,
				121,
				62,
				68,
				101,
				118,
				105,
				99,
				101,
				32,
				78,
				97,
				109,
				101,
				60,
				47,
				107,
				101,
				121,
				62,
				10,
				9,
				60,
				115,
				116,
				114,
				105,
				110,
				103,
				62,
				105,
				80,
				104,
				111,
				110,
				101,
				60,
				47,
				115,
				116,
				114,
				105,
				110,
				103,
				62,
				10,
				9,
				60,
				107,
				101,
				121,
				62,
				73,
				110,
				115,
				116,
				97,
				108,
				108,
				101,
				100,
				32,
				65,
				112,
				112,
				108,
				105,
				99,
				97,
				116,
				105,
				111,
				110,
				115,
				60,
				47,
				107,
				101,
				121,
				62,
				10,
				9,
				60,
				100,
				105,
				99,
				116,
				47,
				62,
				10,
				9,
				60,
				107,
				101,
				121,
				62,
				80,
				114,
				111,
				100,
				117,
				99,
				116,
				32,
				86,
				101,
				114,
				115,
				105,
				111,
				110,
				60,
				47,
				107,
				101,
				121,
				62,
				10,
				9,
				60,
				115,
				116,
				114,
				105,
				110,
				103,
				62,
				49,
				50,
				46,
				48,
				60,
				47,
				115,
				116,
				114,
				105,
				110,
				103,
				62,
				10,
				9,
				60,
				107,
				101,
				121,
				62,
				85,
				110,
				105,
				113,
				117,
				101,
				32,
				73,
				100,
				101,
				110,
				116,
				105,
				102,
				105,
				101,
				114,
				60,
				47,
				107,
				101,
				121,
				62,
				10,
				9,
				60,
				115,
				116,
				114,
				105,
				110,
				103,
				62,
				97,
				97,
				97,
				97,
				97,
				97,
				97,
				97,
				97,
				97,
				97,
				97,
				97,
				97,
				97,
				97,
				97,
				97,
				97,
				97,
				97,
				97,
				97,
				97,
				97,
				97,
				97,
				97,
				97,
				97,
				97,
				97,
				97,
				97,
				97,
				97,
				97,
				97,
				97,
				97,
				60,
				47,
				115,
				116,
				114,
				105,
				110,
				103,
				62,
				10,
				9,
				60,
				107,
				101,
				121,
				62,
				105,
				84,
				117,
				110,
				101,
				115,
				32,
				70,
				105,
				108,
				101,
				115,
				60,
				47,
				107,
				101,
				121,
				62,
				10,
				9,
				60,
				100,
				105,
				99,
				116,
				62,
				10,
				9,
				9,
				60,
				107,
				101,
				121,
				62,
				73,
				67,
				45,
				73,
				110,
				102,
				111,
				46,
				115,
				105,
				100,
				118,
				60,
				47,
				107,
				101,
				121,
				62,
				10,
				9,
				9,
				60,
				100,
				97,
				116,
				97,
				62,
				65,
				65,
				69,
				65,
				65,
				90,
				43,
				78,
				81,
				72,
				48,
				109,
				76,
				73,
				70,
				113,
				104,
				82,
				79,
				85,
				65,
				117,
				76,
				69,
				75,
				82,
				56,
				50,
				108,
				53,
				118,
				120,
				55,
				43,
				49,
				65,
				117,
				107,
				103,
				108,
				101,
				69,
				114,
				114,
				78,
				102,
				100,
				108,
				82,
				54,
				55,
				97,
				107,
				55,
				72,
				100,
				90,
				65,
				50,
				118,
				102,
				114,
				117,
				102,
				81,
				107,
				49,
				66,
				86,
				72,
				120,
				75,
				118,
				80,
				83,
				115,
				81,
				52,
				102,
				114,
				90,
				111,
				71,
				122,
				57,
				57,
				67,
				88,
				85,
				48,
				79,
				99,
				103,
				114,
				116,
				99,
				80,
				99,
				57,
				120,
				117,
				115,
				79,
				50,
				88,
				54,
				101,
				80,
				118,
				89,
				69,
				108,
				83,
				118,
				68,
				117,
				85,
				68,
				72,
				114,
				102,
				106,
				73,
				66,
				112,
				108,
				81,
				113,
				66,
				57,
				112,
				50,
				54,
				112,
				70,
				56,
				43,
				99,
				50,
				70,
				51,
				90,
				112,
				85,
				51,
				111,
				72,
				48,
				47,
				79,
				109,
				47,
				107,
				103,
				121,
				55,
				73,
				55,
				121,
				56,
				97,
				69,
				122,
				119,
				56,
				75,
				47,
				75,
				90,
				69,
				77,
				98,
				122,
				97,
				89,
				88,
				107,
				67,
				67,
				67,
				122,
				57,
				70,
				81,
				67,
				54,
				106,
				85,
				69,
				43,
				70,
				48,
				89,
				83,
				47,
				112,
				86,
				98,
				70,
				84,
				82,
				122,
				53,
				84,
				87,
				106,
				67,
				111,
				80,
				83,
				100,
				81,
				76,
				119,
				118,
				52,
				106,
				53,
				49,
				88,
				98,
				114,
				115,
				85,
				68,
				76,
				51,
				70,
				105,
				57,
				116,
				43,
				71,
				82,
				101,
				52,
				112,
				82,
				57,
				77,
				77,
				122,
				80,
				53,
				76,
				98,
				76,
				57,
				72,
				67,
				105,
				80,
				108,
				43,
				50,
				71,
				119,
				72,
				49,
				120,
				56,
				113,
				67,
				119,
				80,
				111,
				105,
				106,
				114,
				52,
				83,
				50,
				54,
				106,
				97,
				72,
				70,
				90,
				43,
				48,
				80,
				121,
				105,
				70,
				70,
				83,
				71,
				78,
				114,
				52,
				47,
				48,
				81,
				86,
				57,
				54,
				52,
				114,
				110,
				107,
				51,
				74,
				78,
				112,
				81,
				122,
				50,
				66,
				108,
				84,
				120,
				87,
				104,
				101,
				76,
				117,
				81,
				110,
				86,
				70,
				52,
				107,
				97,
				106,
				65,
				98,
				114,
				98,
				73,
				54,
				113,
				114,
				67,
				77,
				53,
				53,
				52,
				90,
				118,
				68,
				114,
				75,
				89,
				101,
				88,
				85,
				48,
				108,
				85,
				72,
				114,
				67,
				106,
				106,
				82,
				79,
				117,
				81,
				43,
				51,
				121,
				90,
				80,
				122,
				86,
				85,
				57,
				72,
				111,
				70,
				101,
				102,
				77,
				68,
				103,
				87,
				83,
				72,
				108,
				108,
				115,
				70,
				87,
				53,
				100,
				103,
				48,
				114,
				97,
				71,
				47,
				74,
				104,
				78,
				109,
				118,
				76,
				86,
				78,
				56,
				107,
				119,
				102,
				53,
				118,
				80,
				111,
				56,
				54,
				66,
				116,
				89,
				67,
				115,
				105,
				43,
				102,
				99,
				67,
				83,
				122,
				104,
				50,
				100,
				86,
				116,
				55,
				78,
				90,
				55,
				50,
				105,
				54,
				116,
				107,
				66,
				57,
				86,
				99,
				69,
				72,
				77,
				99,
				51,
				104,
				99,
				81,
				117,
				53,
				90,
				113,
				72,
				48,
				85,
				114,
				101,
				49,
				114,
				55,
				103,
				80,
				122,
				98,
				122,
				117,
				72,
				110,
				109,
				56,
				119,
				74,
				74,
				67,
				87,
				51,
				106,
				65,
				114,
				104,
				88,
				82,
				122,
				116,
				104,
				88,
				103,
				110,
				110,
				65,
				54,
				70,
				88,
				88,
				57,
				106,
				119,
				49,
				84,
				97,
				103,
				104,
				65,
				83,
				67,
				99,
				78,
				110,
				65,
				121,
				100,
				49,
				117,
				109,
				73,
				120,
				69,
				51,
				118,
				89,
				68,
				52,
				122,
				52,
				52,
				57,
				119,
				87,
				106,
				112,
				101,
				79,
				121,
				103,
				83,
				80,
				67,
				56,
				106,
				98,
				100,
				98,
				101,
				122,
				90,
				116,
				47,
				72,
				114,
				83,
				74,
				48,
				57,
				109,
				101,
				69,
				55,
				50,
				109,
				104,
				54,
				50,
				101,
				52,
				49,
				112,
				54,
				71,
				73,
				121,
				50,
				53,
				75,
				88,
				122,
				73,
				106,
				85,
				84,
				80,
				87,
				82,
				100,
				71,
				74,
				102,
				87,
				43,
				104,
				56,
				105,
				99,
				105,
				104,
				115,
				75,
				55,
				102,
				70,
				111,
				65,
				43,
				55,
				67,
				97,
				98,
				88,
				106,
				100,
				85,
				73,
				89,
				100,
				53,
				53,
				109,
				71,
				50,
				122,
				107,
				112,
				72,
				85,
				49,
				71,
				118,
				84,
				69,
				50,
				117,
				55,
				97,
				49,
				53,
				74,
				106,
				111,
				86,
				84,
				97,
				82,
				111,
				52,
				110,
				65,
				119,
				57,
				109,
				69,
				52,
				118,
				89,
				97,
				108,
				75,
				56,
				88,
				51,
				88,
				76,
				99,
				82,
				114,
				90,
				79,
				55,
				69,
				65,
				78,
				109,
				88,
				117,
				115,
				77,
				57,
				69,
				101,
				54,
				47,
				51,
				115,
				52,
				110,
				77,
				78,
				110,
				51,
				113,
				71,
				52,
				84,
				89,
				110,
				51,
				87,
				112,
				56,
				50,
				110,
				51,
				83,
				88,
				73,
				101,
				65,
				114,
				113,
				81,
				57,
				116,
				47,
				103,
				51,
				122,
				115,
				84,
				88,
				108,
				74,
				88,
				121,
				49,
				85,
				120,
				66,
				103,
				49,
				79,
				120,
				48,
				115,
				97,
				81,
				81,
				111,
				100,
				107,
				117,
				69,
				98,
				73,
				75,
				115,
				107,
				52,
				121,
				52,
				113,
				87,
				88,
				50,
				70,
				110,
				100,
				53,
				105,
				76,
				67,
				111,
				104,
				113,
				103,
				49,
				87,
				80,
				98,
				115,
				121,
				103,
				51,
				87,
				101,
				69,
				53,
				121,
				82,
				84,
				49,
				102,
				73,
				52,
				113,
				77,
				70,
				56,
				87,
				48,
				67,
				120,
				107,
				55,
				66,
				107,
				116,
				55,
				102,
				103,
				49,
				106,
				67,
				85,
				67,
				48,
				76,
				122,
				119,
				107,
				82,
				110,
				52,
				74,
				43,
				99,
				49,
				89,
				90,
				121,
				100,
				103,
				75,
				83,
				116,
				112,
				103,
				122,
				116,
				65,
				113,
				71,
				79,
				74,
				71,
				73,
				121,
				75,
				67,
				56,
				90,
				75,
				56,
				49,
				55,
				73,
				89,
				100,
				69,
				88,
				90,
				112,
				81,
				72,
				102,
				104,
				71,
				43,
				99,
				114,
				77,
				79,
				80,
				107,
				75,
				114,
				120,
				113,
				108,
				112,
				51,
				116,
				97,
				102,
				118,
				82,
				114,
				90,
				54,
				103,
				117,
				102,
				103,
				110,
				56,
				56,
				119,
				98,
				57,
				113,
				70,
				49,
				106,
				57,
				79,
				89,
				87,
				113,
				116,
				116,
				88,
				57,
				121,
				86,
				55,
				56,
				121,
				89,
				89,
				117,
				113,
				80,
				122,
				103,
				48,
				47,
				119,
				103,
				75,
				101,
				48,
				111,
				107,
				83,
				104,
				102,
				47,
				104,
				100,
				74,
				69,
				85,
				66,
				111,
				50,
				83,
				90,
				111,
				83,
				100,
				80,
				74,
				77,
				87,
				73,
				69,
				122,
				121,
				75,
				49,
				111,
				52,
				53,
				68,
				121,
				109,
				74,
				43,
				86,
				90,
				79,
				73,
				70,
				55,
				121,
				103,
				51,
				56,
				82,
				102,
				74,
				43,
				101,
				67,
				79,
				47,
				103,
				66,
				48,
				97,
				49,
				122,
				88,
				53,
				111,
				67,
				98,
				117,
				81,
				80,
				86,
				57,
				112,
				83,
				110,
				102,
				97,
				50,
				104,
				49,
				115,
				57,
				82,
				72,
				121,
				114,
				103,
				104,
				106,
				74,
				103,
				99,
				68,
				102,
				73,
				113,
				82,
				108,
				84,
				109,
				82,
				120,
				89,
				101,
				67,
				43,
				80,
				88,
				76,
				82,
				53,
				109,
				51,
				98,
				73,
				100,
				71,
				54,
				57,
				121,
				88,
				78,
				80,
				114,
				49,
				120,
				71,
				99,
				104,
				108,
				65,
				118,
				117,
				97,
				105,
				102,
				50,
				106,
				87,
				78,
				113,
				122,
				69,
				72,
				56,
				98,
				49,
				90,
				50,
				67,
				118,
				68,
				48,
				84,
				72,
				102,
				82,
				75,
				79,
				75,
				67,
				108,
				52,
				83,
				106,
				114,
				116,
				66,
				82,
				107,
				71,
				105,
				102,
				106,
				108,
				112,
				71,
				116,
				97,
				78,
				75,
				75,
				87,
				106,
				119,
				109,
				77,
				117,
				122,
				90,
				120,
				85,
				86,
				48,
				66,
				102,
				111,
				117,
				49,
				102,
				75,
				88,
				82,
				98,
				110,
				43,
				68,
				73,
				99,
				88,
				104,
				112,
				57,
				66,
				121,
				69,
				89,
				66,
				87,
				79,
				78,
				116,
				112,
				115,
				109,
				76,
				114,
				116,
				77,
				70,
				102,
				116,
				121,
				57,
				68,
				119,
				119,
				103,
				55,
				108,
				51,
				78,
				80,
				68,
				90,
				106,
				43,
				50,
				89,
				113,
				74,
				48,
				75,
				68,
				50,
				102,
				111,
				118,
				98,
				84,
				111,
				68,
				87,
				72,
				74,
				121,
				121,
				53,
				100,
				71,
				53,
				69,
				73,
				54,
				72,
				116,
				73,
				105,
				82,
				121,
				77,
				80,
				117,
				86,
				75,
				71,
				90,
				111,
				116,
				83,
				98,
				107,
				74,
				47,
				81,
				102,
				88,
				117,
				69,
				118,
				75,
				87,
				89,
				83,
				107,
				76,
				103,
				120,
				108,
				74,
				87,
				81,
				87,
				90,
				87,
				115,
				82,
				67,
				85,
				104,
				47,
				103,
				55,
				49,
				87,
				102,
				49,
				107,
				102,
				101,
				56,
				72,
				67,
				109,
				119,
				57,
				73,
				71,
				109,
				90,
				90,
				52,
				67,
				75,
				120,
				82,
				73,
				68,
				51,
				97,
				70,
				104,
				55,
				101,
				107,
				84,
				77,
				86,
				106,
				68,
				103,
				81,
				55,
				79,
				84,
				83,
				113,
				67,
				80,
				50,
				118,
				99,
				100,
				103,
				68,
				78,
				116,
				81,
				85,
				76,
				107,
				114,
				49,
				70,
				74,
				73,
				100,
				79,
				102,
				54,
				120,
				54,
				66,
				112,
				54,
				75,
				107,
				57,
				50,
				69,
				52,
				55,
				88,
				101,
				79,
				106,
				74,
				50,
				114,
				114,
				54,
				97,
				68,
				102,
				101,
				110,
				90,
				88,
				104,
				107,
				109,
				108,
				111,
				68,
				121,
				100,
				121,
				68,
				98,
				114,
				73,
				116,
				102,
				98,
				76,
				116,
				54,
				85,
				74,
				89,
				98,
				97,
				86,
				79,
				89,
				120,
				53,
				118,
				77,
				68,
				80,
				99,
				80,
				86,
				70,
				69,
				107,
				66,
				68,
				47,
				73,
				97,
				70,
				98,
				121,
				76,
				84,
				56,
				118,
				109,
				106,
				84,
				68,
				73,
				56,
				52,
				43,
				52,
				51,
				47,
				112,
				81,
				79,
				87,
				87,
				97,
				122,
				110,
				90,
				97,
				71,
				49,
				98,
				110,
				79,
				51,
				72,
				114,
				116,
				72,
				47,
				90,
				76,
				70,
				70,
				84,
				67,
				110,
				101,
				67,
				114,
				106,
				56,
				98,
				85,
				121,
				82,
				109,
				69,
				76,
				86,
				65,
				66,
				53,
				48,
				72,
				120,
				89,
				70,
				66,
				103,
				82,
				49,
				115,
				112,
				47,
				85,
				119,
				70,
				68,
				75,
				88,
				77,
				74,
				88,
				118,
				113,
				84,
				89,
				65,
				65,
				53,
				87,
				53,
				85,
				85,
				53,
				106,
				53,
				97,
				54,
				119,
				52,
				116,
				97,
				87,
				78,
				65,
				88,
				48,
				82,
				85,
				76,
				98,
				106,
				119,
				106,
				103,
				114,
				57,
				57,
				66,
				102,
				110,
				83,
				115,
				115,
				65,
				48,
				71,
				107,
				122,
				80,
				103,
				110,
				106,
				43,
				119,
				80,
				116,
				48,
				85,
				103,
				84,
				60,
				47,
				100,
				97,
				116,
				97,
				62,
				10,
				9,
				60,
				47,
				100,
				105,
				99,
				116,
				62,
				10,
				60,
				47,
				100,
				105,
				99,
				116,
				62,
				10,
				60,
				47,
				112,
				108,
				105,
				115,
				116,
				62,
				10
			};
			byte[] array2 = new byte[]
			{
				98,
				112,
				108,
				105,
				115,
				116,
				48,
				48,
				214,
				1,
				2,
				3,
				4,
				5,
				6,
				7,
				8,
				9,
				10,
				11,
				12,
				91,
				66,
				97,
				99,
				107,
				117,
				112,
				83,
				116,
				97,
				116,
				101,
				87,
				86,
				101,
				114,
				115,
				105,
				111,
				110,
				92,
				73,
				115,
				70,
				117,
				108,
				108,
				66,
				97,
				99,
				107,
				117,
				112,
				84,
				85,
				85,
				73,
				68,
				93,
				83,
				110,
				97,
				112,
				115,
				104,
				111,
				116,
				83,
				116,
				97,
				116,
				101,
				84,
				68,
				97,
				116,
				101,
				83,
				110,
				101,
				119,
				83,
				51,
				46,
				51,
				8,
				95,
				16,
				36,
				65,
				54,
				55,
				70,
				68,
				65,
				55,
				65,
				45,
				49,
				50,
				53,
				51,
				45,
				52,
				67,
				56,
				57,
				45,
				56,
				52,
				54,
				67,
				45,
				65,
				52,
				57,
				52,
				50,
				49,
				49,
				49,
				53,
				56,
				70,
				51,
				88,
				102,
				105,
				110,
				105,
				115,
				104,
				101,
				100,
				51,
				65,
				203,
				129,
				91,
				128,
				0,
				0,
				0,
				8,
				21,
				33,
				41,
				54,
				59,
				73,
				78,
				82,
				86,
				87,
				126,
				135,
				0,
				0,
				0,
				0,
				0,
				0,
				1,
				1,
				0,
				0,
				0,
				0,
				0,
				0,
				0,
				13,
				0,
				0,
				0,
				0,
				0,
				0,
				0,
				0,
				0,
				0,
				0,
				0,
				0,
				0,
				0,
				144
			};
			byte[] array3 = new byte[]
			{
				60,
				63,
				120,
				109,
				108,
				32,
				118,
				101,
				114,
				115,
				105,
				111,
				110,
				61,
				34,
				49,
				46,
				48,
				34,
				32,
				101,
				110,
				99,
				111,
				100,
				105,
				110,
				103,
				61,
				34,
				85,
				84,
				70,
				45,
				56,
				34,
				63,
				62,
				10,
				60,
				33,
				68,
				79,
				67,
				84,
				89,
				80,
				69,
				32,
				112,
				108,
				105,
				115,
				116,
				32,
				80,
				85,
				66,
				76,
				73,
				67,
				32,
				34,
				45,
				47,
				47,
				65,
				112,
				112,
				108,
				101,
				47,
				47,
				68,
				84,
				68,
				32,
				80,
				76,
				73,
				83,
				84,
				32,
				49,
				46,
				48,
				47,
				47,
				69,
				78,
				34,
				32,
				34,
				104,
				116,
				116,
				112,
				58,
				47,
				47,
				119,
				119,
				119,
				46,
				97,
				112,
				112,
				108,
				101,
				46,
				99,
				111,
				109,
				47,
				68,
				84,
				68,
				115,
				47,
				80,
				114,
				111,
				112,
				101,
				114,
				116,
				121,
				76,
				105,
				115,
				116,
				45,
				49,
				46,
				48,
				46,
				100,
				116,
				100,
				34,
				62,
				10,
				60,
				112,
				108,
				105,
				115,
				116,
				32,
				118,
				101,
				114,
				115,
				105,
				111,
				110,
				61,
				34,
				49,
				46,
				48,
				34,
				62,
				10,
				60,
				100,
				105,
				99,
				116,
				62,
				10,
				9,
				60,
				107,
				101,
				121,
				62,
				65,
				112,
				112,
				108,
				105,
				99,
				97,
				116,
				105,
				111,
				110,
				115,
				60,
				47,
				107,
				101,
				121,
				62,
				10,
				9,
				60,
				100,
				105,
				99,
				116,
				62,
				10,
				9,
				9,
				60,
				107,
				101,
				121,
				62,
				99,
				111,
				109,
				46,
				97,
				112,
				112,
				108,
				101,
				46,
				116,
				105,
				112,
				115,
				60,
				47,
				107,
				101,
				121,
				62,
				10,
				9,
				9,
				60,
				100,
				105,
				99,
				116,
				62,
				10,
				9,
				9,
				9,
				60,
				107,
				101,
				121,
				62,
				67,
				70,
				66,
				117,
				110,
				100,
				108,
				101,
				73,
				100,
				101,
				110,
				116,
				105,
				102,
				105,
				101,
				114,
				60,
				47,
				107,
				101,
				121,
				62,
				10,
				9,
				9,
				9,
				60,
				115,
				116,
				114,
				105,
				110,
				103,
				62,
				99,
				111,
				109,
				46,
				97,
				112,
				112,
				108,
				101,
				46,
				116,
				105,
				112,
				115,
				60,
				47,
				115,
				116,
				114,
				105,
				110,
				103,
				62,
				10,
				9,
				9,
				9,
				60,
				107,
				101,
				121,
				62,
				67,
				111,
				110,
				116,
				97,
				105,
				110,
				101,
				114,
				67,
				111,
				110,
				116,
				101,
				110,
				116,
				67,
				108,
				97,
				115,
				115,
				60,
				47,
				107,
				101,
				121,
				62,
				10,
				9,
				9,
				9,
				60,
				115,
				116,
				114,
				105,
				110,
				103,
				62,
				68,
				97,
				116,
				97,
				47,
				65,
				112,
				112,
				108,
				105,
				99,
				97,
				116,
				105,
				111,
				110,
				60,
				47,
				115,
				116,
				114,
				105,
				110,
				103,
				62,
				10,
				9,
				9,
				60,
				47,
				100,
				105,
				99,
				116,
				62,
				10,
				9,
				9,
				60,
				107,
				101,
				121,
				62,
				103,
				114,
				111,
				117,
				112,
				46,
				99,
				111,
				109,
				46,
				97,
				112,
				112,
				108,
				101,
				46,
				116,
				105,
				112,
				115,
				60,
				47,
				107,
				101,
				121,
				62,
				10,
				9,
				9,
				60,
				100,
				105,
				99,
				116,
				62,
				10,
				9,
				9,
				9,
				60,
				107,
				101,
				121,
				62,
				67,
				70,
				66,
				117,
				110,
				100,
				108,
				101,
				73,
				100,
				101,
				110,
				116,
				105,
				102,
				105,
				101,
				114,
				60,
				47,
				107,
				101,
				121,
				62,
				10,
				9,
				9,
				9,
				60,
				115,
				116,
				114,
				105,
				110,
				103,
				62,
				103,
				114,
				111,
				117,
				112,
				46,
				99,
				111,
				109,
				46,
				97,
				112,
				112,
				108,
				101,
				46,
				116,
				105,
				112,
				115,
				60,
				47,
				115,
				116,
				114,
				105,
				110,
				103,
				62,
				10,
				9,
				9,
				9,
				60,
				107,
				101,
				121,
				62,
				67,
				111,
				110,
				116,
				97,
				105,
				110,
				101,
				114,
				67,
				111,
				110,
				116,
				101,
				110,
				116,
				67,
				108,
				97,
				115,
				115,
				60,
				47,
				107,
				101,
				121,
				62,
				10,
				9,
				9,
				9,
				60,
				115,
				116,
				114,
				105,
				110,
				103,
				62,
				83,
				104,
				97,
				114,
				101,
				100,
				47,
				65,
				112,
				112,
				71,
				114,
				111,
				117,
				112,
				60,
				47,
				115,
				116,
				114,
				105,
				110,
				103,
				62,
				10,
				9,
				9,
				60,
				47,
				100,
				105,
				99,
				116,
				62,
				10,
				9,
				60,
				47,
				100,
				105,
				99,
				116,
				62,
				10,
				9,
				60,
				107,
				101,
				121,
				62,
				66,
				97,
				99,
				107,
				117,
				112,
				75,
				101,
				121,
				66,
				97,
				103,
				60,
				47,
				107,
				101,
				121,
				62,
				10,
				9,
				60,
				100,
				97,
				116,
				97,
				62,
				86,
				107,
				86,
				83,
				85,
				119,
				65,
				65,
				65,
				65,
				81,
				65,
				65,
				65,
				65,
				70,
				86,
				70,
				108,
				81,
				82,
				81,
				65,
				65,
				65,
				65,
				81,
				65,
				65,
				65,
				65,
				66,
				86,
				86,
				86,
				74,
				82,
				65,
				65,
				65,
				65,
				66,
				66,
				69,
				70,
				82,
				97,
				49,
				74,
				102,
				116,
				78,
				79,
				75,
				87,
				110,
				122,
				72,
				77,
				115,
				71,
				54,
				51,
				102,
				83,
				69,
				49,
				68,
				83,
				119,
				65,
				65,
				65,
				67,
				103,
				65,
				65,
				65,
				65,
				65,
				65,
				65,
				65,
				65,
				65,
				65,
				65,
				65,
				65,
				65,
				65,
				65,
				65,
				65,
				65,
				65,
				65,
				65,
				65,
				65,
				65,
				65,
				65,
				65,
				65,
				65,
				65,
				65,
				65,
				65,
				65,
				65,
				65,
				65,
				65,
				65,
				65,
				65,
				65,
				65,
				65,
				65,
				65,
				65,
				65,
				65,
				65,
				65,
				86,
				49,
				74,
				66,
				85,
				65,
				65,
				65,
				65,
				65,
				81,
				65,
				65,
				65,
				65,
				65,
				85,
				48,
				70,
				77,
				86,
				65,
				65,
				65,
				65,
				66,
				81,
				103,
				57,
				50,
				101,
				114,
				83,
				102,
				88,
				87,
				102,
				102,
				72,
				116,
				52,
				78,
				98,
				50,
				85,
				99,
				115,
				65,
				113,
				89,
				75,
				54,
				52,
				85,
				108,
				85,
				82,
				86,
				73,
				65,
				65,
				65,
				65,
				69,
				65,
				65,
				65,
				110,
				69,
				69,
				82,
				81,
				86,
				49,
				81,
				65,
				65,
				65,
				65,
				69,
				65,
				65,
				65,
				65,
				65,
				85,
				82,
				81,
				83,
				85,
				77,
				65,
				65,
				65,
				65,
				69,
				65,
				65,
				71,
				71,
				111,
				69,
				82,
				81,
				85,
				48,
				119,
				65,
				65,
				65,
				65,
				85,
				57,
				79,
				49,
				105,
				105,
				84,
				117,
				54,
				100,
				47,
				78,
				65,
				50,
				112,
				118,
				120,
				112,
				102,
				97,
				77,
				69,
				48,
				121,
				121,
				109,
				84,
				74,
				86,
				86,
				85,
				108,
				69,
				65,
				65,
				65,
				65,
				69,
				71,
				67,
				50,
				68,
				110,
				111,
				76,
				55,
				69,
				75,
				90,
				108,
				114,
				85,
				69,
				89,
				66,
				73,
				118,
				114,
				50,
				66,
				68,
				84,
				69,
				70,
				84,
				65,
				65,
				65,
				65,
				66,
				65,
				65,
				65,
				65,
				65,
				116,
				88,
				85,
				107,
				70,
				81,
				65,
				65,
				65,
				65,
				66,
				65,
				65,
				65,
				65,
				65,
				78,
				76,
				86,
				70,
				108,
				81,
				65,
				65,
				65,
				65,
				66,
				65,
				65,
				65,
				65,
				65,
				66,
				88,
				85,
				69,
				116,
				90,
				65,
				65,
				65,
				65,
				75,
				71,
				108,
				111,
				72,
				105,
				87,
				49,
				108,
				106,
				76,
				111,
				97,
				122,
				52,
				97,
				87,
				74,
				90,
				80,
				116,
				72,
				67,
				47,
				79,
				79,
				80,
				70,
				80,
				106,
				67,
				80,
				89,
				114,
				107,
				66,
				74,
				65,
				121,
				73,
				77,
				84,
				101,
				67,
				83,
				109,
				102,
				57,
				55,
				115,
				119,
				85,
				111,
				113,
				90,
				86,
				86,
				85,
				108,
				69,
				65,
				65,
				65,
				65,
				69,
				69,
				71,
				98,
				100,
				75,
				74,
				113,
				49,
				85,
				98,
				105,
				106,
				69,
				89,
				103,
				87,
				120,
				102,
				78,
				83,
				101,
				116,
				68,
				84,
				69,
				70,
				84,
				65,
				65,
				65,
				65,
				66,
				65,
				65,
				65,
				65,
				65,
				112,
				88,
				85,
				107,
				70,
				81,
				65,
				65,
				65,
				65,
				66,
				65,
				65,
				65,
				65,
				65,
				78,
				76,
				86,
				70,
				108,
				81,
				65,
				65,
				65,
				65,
				66,
				65,
				65,
				65,
				65,
				65,
				66,
				88,
				85,
				69,
				116,
				90,
				65,
				65,
				65,
				65,
				75,
				71,
				108,
				111,
				72,
				105,
				87,
				49,
				108,
				106,
				76,
				111,
				97,
				122,
				52,
				97,
				87,
				74,
				90,
				80,
				116,
				72,
				67,
				47,
				79,
				79,
				80,
				70,
				80,
				106,
				67,
				80,
				89,
				114,
				107,
				66,
				74,
				65,
				121,
				73,
				77,
				84,
				101,
				67,
				83,
				109,
				102,
				57,
				55,
				115,
				119,
				85,
				111,
				113,
				90,
				86,
				86,
				85,
				108,
				69,
				65,
				65,
				65,
				65,
				69,
				72,
				122,
				101,
				99,
				103,
				83,
				43,
				83,
				69,
				119,
				102,
				108,
				90,
				119,
				66,
				52,
				53,
				47,
				88,
				109,
				83,
				116,
				68,
				84,
				69,
				70,
				84,
				65,
				65,
				65,
				65,
				66,
				65,
				65,
				65,
				65,
				65,
				108,
				88,
				85,
				107,
				70,
				81,
				65,
				65,
				65,
				65,
				66,
				65,
				65,
				65,
				65,
				65,
				78,
				76,
				86,
				70,
				108,
				81,
				65,
				65,
				65,
				65,
				66,
				65,
				65,
				65,
				65,
				65,
				66,
				88,
				85,
				69,
				116,
				90,
				65,
				65,
				65,
				65,
				75,
				71,
				108,
				111,
				72,
				105,
				87,
				49,
				108,
				106,
				76,
				111,
				97,
				122,
				52,
				97,
				87,
				74,
				90,
				80,
				116,
				72,
				67,
				47,
				79,
				79,
				80,
				70,
				80,
				106,
				67,
				80,
				89,
				114,
				107,
				66,
				74,
				65,
				121,
				73,
				77,
				84,
				101,
				67,
				83,
				109,
				102,
				57,
				55,
				115,
				119,
				85,
				111,
				113,
				90,
				86,
				86,
				85,
				108,
				69,
				65,
				65,
				65,
				65,
				69,
				75,
				97,
				100,
				47,
				75,
				114,
				103,
				48,
				85,
				105,
				68,
				112,
				90,
				65,
				108,
				89,
				80,
				71,
				116,
				85,
				57,
				116,
				68,
				84,
				69,
				70,
				84,
				65,
				65,
				65,
				65,
				66,
				65,
				65,
				65,
				65,
				65,
				104,
				88,
				85,
				107,
				70,
				81,
				65,
				65,
				65,
				65,
				66,
				65,
				65,
				65,
				65,
				65,
				78,
				76,
				86,
				70,
				108,
				81,
				65,
				65,
				65,
				65,
				66,
				65,
				65,
				65,
				65,
				65,
				66,
				88,
				85,
				69,
				116,
				90,
				65,
				65,
				65,
				65,
				75,
				71,
				108,
				111,
				72,
				105,
				87,
				49,
				108,
				106,
				76,
				111,
				97,
				122,
				52,
				97,
				87,
				74,
				90,
				80,
				116,
				72,
				67,
				47,
				79,
				79,
				80,
				70,
				80,
				106,
				67,
				80,
				89,
				114,
				107,
				66,
				74,
				65,
				121,
				73,
				77,
				84,
				101,
				67,
				83,
				109,
				102,
				57,
				55,
				115,
				119,
				85,
				111,
				113,
				90,
				86,
				86,
				85,
				108,
				69,
				65,
				65,
				65,
				65,
				69,
				78,
				43,
				110,
				80,
				112,
				121,
				108,
				109,
				48,
				83,
				57,
				105,
				101,
				67,
				78,
				65,
				111,
				52,
				102,
				99,
				51,
				78,
				68,
				84,
				69,
				70,
				84,
				65,
				65,
				65,
				65,
				66,
				65,
				65,
				65,
				65,
				65,
				100,
				88,
				85,
				107,
				70,
				81,
				65,
				65,
				65,
				65,
				66,
				65,
				65,
				65,
				65,
				65,
				78,
				76,
				86,
				70,
				108,
				81,
				65,
				65,
				65,
				65,
				66,
				65,
				65,
				65,
				65,
				65,
				66,
				88,
				85,
				69,
				116,
				90,
				65,
				65,
				65,
				65,
				75,
				71,
				108,
				111,
				72,
				105,
				87,
				49,
				108,
				106,
				76,
				111,
				97,
				122,
				52,
				97,
				87,
				74,
				90,
				80,
				116,
				72,
				67,
				47,
				79,
				79,
				80,
				70,
				80,
				106,
				67,
				80,
				89,
				114,
				107,
				66,
				74,
				65,
				121,
				73,
				77,
				84,
				101,
				67,
				83,
				109,
				102,
				57,
				55,
				115,
				119,
				85,
				111,
				113,
				90,
				86,
				86,
				85,
				108,
				69,
				65,
				65,
				65,
				65,
				69,
				77,
				89,
				73,
				109,
				68,
				89,
				51,
				86,
				69,
				68,
				78,
				117,
				122,
				72,
				112,
				106,
				97,
				84,
				99,
				52,
				99,
				57,
				68,
				84,
				69,
				70,
				84,
				65,
				65,
				65,
				65,
				66,
				65,
				65,
				65,
				65,
				65,
				90,
				88,
				85,
				107,
				70,
				81,
				65,
				65,
				65,
				65,
				66,
				65,
				65,
				65,
				65,
				65,
				78,
				76,
				86,
				70,
				108,
				81,
				65,
				65,
				65,
				65,
				66,
				65,
				65,
				65,
				65,
				65,
				66,
				88,
				85,
				69,
				116,
				90,
				65,
				65,
				65,
				65,
				75,
				71,
				108,
				111,
				72,
				105,
				87,
				49,
				108,
				106,
				76,
				111,
				97,
				122,
				52,
				97,
				87,
				74,
				90,
				80,
				116,
				72,
				67,
				47,
				79,
				79,
				80,
				70,
				80,
				106,
				67,
				80,
				89,
				114,
				107,
				66,
				74,
				65,
				121,
				73,
				77,
				84,
				101,
				67,
				83,
				109,
				102,
				57,
				55,
				115,
				119,
				85,
				111,
				113,
				90,
				86,
				86,
				85,
				108,
				69,
				65,
				65,
				65,
				65,
				69,
				66,
				112,
				84,
				67,
				111,
				98,
				86,
				70,
				48,
				115,
				103,
				117,
				73,
				106,
				70,
				56,
				86,
				105,
				109,
				103,
				82,
				82,
				68,
				84,
				69,
				70,
				84,
				65,
				65,
				65,
				65,
				66,
				65,
				65,
				65,
				65,
				65,
				86,
				88,
				85,
				107,
				70,
				81,
				65,
				65,
				65,
				65,
				66,
				65,
				65,
				65,
				65,
				65,
				78,
				76,
				86,
				70,
				108,
				81,
				65,
				65,
				65,
				65,
				66,
				65,
				65,
				65,
				65,
				65,
				66,
				88,
				85,
				69,
				116,
				90,
				65,
				65,
				65,
				65,
				75,
				71,
				108,
				111,
				72,
				105,
				87,
				49,
				108,
				106,
				76,
				111,
				97,
				122,
				52,
				97,
				87,
				74,
				90,
				80,
				116,
				72,
				67,
				47,
				79,
				79,
				80,
				70,
				80,
				106,
				67,
				80,
				89,
				114,
				107,
				66,
				74,
				65,
				121,
				73,
				77,
				84,
				101,
				67,
				83,
				109,
				102,
				57,
				55,
				115,
				119,
				85,
				111,
				113,
				90,
				86,
				86,
				85,
				108,
				69,
				65,
				65,
				65,
				65,
				69,
				67,
				68,
				57,
				107,
				47,
				104,
				116,
				71,
				85,
				77,
				112,
				103,
				75,
				76,
				97,
				105,
				106,
				52,
				54,
				82,
				53,
				90,
				68,
				84,
				69,
				70,
				84,
				65,
				65,
				65,
				65,
				66,
				65,
				65,
				65,
				65,
				65,
				82,
				88,
				85,
				107,
				70,
				81,
				65,
				65,
				65,
				65,
				66,
				65,
				65,
				65,
				65,
				65,
				74,
				76,
				86,
				70,
				108,
				81,
				65,
				65,
				65,
				65,
				66,
				65,
				65,
				65,
				65,
				65,
				66,
				88,
				85,
				69,
				116,
				90,
				65,
				65,
				65,
				65,
				75,
				71,
				108,
				111,
				72,
				105,
				87,
				49,
				108,
				106,
				76,
				111,
				97,
				122,
				52,
				97,
				87,
				74,
				90,
				80,
				116,
				72,
				67,
				47,
				79,
				79,
				80,
				70,
				80,
				106,
				67,
				80,
				89,
				114,
				107,
				66,
				74,
				65,
				121,
				73,
				77,
				84,
				101,
				67,
				83,
				109,
				102,
				57,
				55,
				115,
				119,
				85,
				111,
				113,
				90,
				86,
				86,
				85,
				108,
				69,
				65,
				65,
				65,
				65,
				69,
				79,
				52,
				106,
				52,
				106,
				89,
				81,
				107,
				69,
				51,
				69,
				103,
				68,
				79,
				73,
				114,
				97,
				52,
				79,
				81,
				77,
				49,
				68,
				84,
				69,
				70,
				84,
				65,
				65,
				65,
				65,
				66,
				65,
				65,
				65,
				65,
				65,
				78,
				88,
				85,
				107,
				70,
				81,
				65,
				65,
				65,
				65,
				66,
				65,
				65,
				65,
				65,
				65,
				74,
				76,
				86,
				70,
				108,
				81,
				65,
				65,
				65,
				65,
				66,
				65,
				65,
				65,
				65,
				65,
				66,
				88,
				85,
				69,
				116,
				90,
				65,
				65,
				65,
				65,
				75,
				71,
				108,
				111,
				72,
				105,
				87,
				49,
				108,
				106,
				76,
				111,
				97,
				122,
				52,
				97,
				87,
				74,
				90,
				80,
				116,
				72,
				67,
				47,
				79,
				79,
				80,
				70,
				80,
				106,
				67,
				80,
				89,
				114,
				107,
				66,
				74,
				65,
				121,
				73,
				77,
				84,
				101,
				67,
				83,
				109,
				102,
				57,
				55,
				115,
				119,
				85,
				111,
				113,
				90,
				86,
				86,
				85,
				108,
				69,
				65,
				65,
				65,
				65,
				69,
				74,
				57,
				56,
				85,
				98,
				120,
				80,
				116,
				69,
				55,
				75,
				109,
				120,
				79,
				111,
				106,
				56,
				84,
				83,
				70,
				77,
				70,
				68,
				84,
				69,
				70,
				84,
				65,
				65,
				65,
				65,
				66,
				65,
				65,
				65,
				65,
				65,
				74,
				88,
				85,
				107,
				70,
				81,
				65,
				65,
				65,
				65,
				66,
				65,
				65,
				65,
				65,
				65,
				74,
				76,
				86,
				70,
				108,
				81,
				65,
				65,
				65,
				65,
				66,
				65,
				65,
				65,
				65,
				65,
				66,
				88,
				85,
				69,
				116,
				90,
				65,
				65,
				65,
				65,
				75,
				71,
				108,
				111,
				72,
				105,
				87,
				49,
				108,
				106,
				76,
				111,
				97,
				122,
				52,
				97,
				87,
				74,
				90,
				80,
				116,
				72,
				67,
				47,
				79,
				79,
				80,
				70,
				80,
				106,
				67,
				80,
				89,
				114,
				107,
				66,
				74,
				65,
				121,
				73,
				77,
				84,
				101,
				67,
				83,
				109,
				102,
				57,
				55,
				115,
				119,
				85,
				111,
				113,
				90,
				86,
				86,
				85,
				108,
				69,
				65,
				65,
				65,
				65,
				69,
				72,
				67,
				72,
				99,
				70,
				52,
				50,
				111,
				48,
				98,
				117,
				111,
				104,
				107,
				70,
				54,
				106,
				101,
				106,
				57,
				98,
				120,
				68,
				84,
				69,
				70,
				84,
				65,
				65,
				65,
				65,
				66,
				65,
				65,
				65,
				65,
				65,
				70,
				88,
				85,
				107,
				70,
				81,
				65,
				65,
				65,
				65,
				66,
				65,
				65,
				65,
				65,
				65,
				74,
				76,
				86,
				70,
				108,
				81,
				65,
				65,
				65,
				65,
				66,
				65,
				65,
				65,
				65,
				65,
				66,
				88,
				85,
				69,
				116,
				90,
				65,
				65,
				65,
				65,
				75,
				71,
				108,
				111,
				72,
				105,
				87,
				49,
				108,
				106,
				76,
				111,
				97,
				122,
				52,
				97,
				87,
				74,
				90,
				80,
				116,
				72,
				67,
				47,
				79,
				79,
				80,
				70,
				80,
				106,
				67,
				80,
				89,
				114,
				107,
				66,
				74,
				65,
				121,
				73,
				77,
				84,
				101,
				67,
				83,
				109,
				102,
				57,
				55,
				115,
				119,
				85,
				111,
				113,
				89,
				61,
				60,
				47,
				100,
				97,
				116,
				97,
				62,
				10,
				9,
				60,
				107,
				101,
				121,
				62,
				68,
				97,
				116,
				101,
				60,
				47,
				107,
				101,
				121,
				62,
				10,
				9,
				60,
				100,
				97,
				116,
				101,
				62,
				50,
				48,
				51,
				48,
				45,
				48,
				52,
				45,
				48,
				49,
				84,
				48,
				48,
				58,
				48,
				48,
				58,
				48,
				48,
				90,
				60,
				47,
				100,
				97,
				116,
				101,
				62,
				10,
				9,
				60,
				107,
				101,
				121,
				62,
				73,
				115,
				69,
				110,
				99,
				114,
				121,
				112,
				116,
				101,
				100,
				60,
				47,
				107,
				101,
				121,
				62,
				10,
				9,
				60,
				116,
				114,
				117,
				101,
				47,
				62,
				10,
				9,
				60,
				107,
				101,
				121,
				62,
				77,
				97,
				110,
				105,
				102,
				101,
				115,
				116,
				75,
				101,
				121,
				60,
				47,
				107,
				101,
				121,
				62,
				10,
				9,
				60,
				100,
				97,
				116,
				97,
				62,
				65,
				119,
				65,
				65,
				65,
				73,
				48,
				74,
				112,
				107,
				66,
				51,
				73,
				100,
				75,
				122,
				71,
				108,
				50,
				102,
				90,
				116,
				86,
				108,
				71,
				109,
				118,
				98,
				79,
				86,
				68,
				88,
				78,
				78,
				117,
				69,
				52,
				52,
				76,
				119,
				79,
				74,
				88,
				107,
				84,
				73,
				86,
				97,
				65,
				67,
				118,
				104,
				55,
				90,
				48,
				68,
				114,
				57,
				103,
				61,
				60,
				47,
				100,
				97,
				116,
				97,
				62,
				10,
				9,
				60,
				107,
				101,
				121,
				62,
				76,
				111,
				99,
				107,
				100,
				111,
				119,
				110,
				60,
				47,
				107,
				101,
				121,
				62,
				10,
				9,
				60,
				100,
				105,
				99,
				116,
				62,
				10,
				9,
				9,
				60,
				107,
				101,
				121,
				62,
				99,
				111,
				109,
				46,
				97,
				112,
				112,
				108,
				101,
				46,
				77,
				111,
				98,
				105,
				108,
				101,
				68,
				101,
				118,
				105,
				99,
				101,
				67,
				114,
				97,
				115,
				104,
				67,
				111,
				112,
				121,
				60,
				47,
				107,
				101,
				121,
				62,
				10,
				9,
				9,
				60,
				100,
				105,
				99,
				116,
				62,
				10,
				9,
				9,
				9,
				60,
				107,
				101,
				121,
				62,
				83,
				104,
				111,
				117,
				108,
				100,
				83,
				117,
				98,
				109,
				105,
				116,
				60,
				47,
				107,
				101,
				121,
				62,
				10,
				9,
				9,
				9,
				60,
				102,
				97,
				108,
				115,
				101,
				47,
				62,
				10,
				9,
				9,
				60,
				47,
				100,
				105,
				99,
				116,
				62,
				10,
				9,
				9,
				60,
				107,
				101,
				121,
				62,
				80,
				114,
				111,
				100,
				117,
				99,
				116,
				86,
				101,
				114,
				115,
				105,
				111,
				110,
				60,
				47,
				107,
				101,
				121,
				62,
				10,
				9,
				9,
				60,
				115,
				116,
				114,
				105,
				110,
				103,
				62,
				49,
				54,
				46,
				48,
				60,
				47,
				115,
				116,
				114,
				105,
				110,
				103,
				62,
				10,
				9,
				9,
				60,
				107,
				101,
				121,
				62,
				83,
				101,
				114,
				105,
				97,
				108,
				78,
				117,
				109,
				98,
				101,
				114,
				60,
				47,
				107,
				101,
				121,
				62,
				10,
				9,
				9,
				60,
				115,
				116,
				114,
				105,
				110,
				103,
				62,
				88,
				88,
				88,
				88,
				88,
				88,
				88,
				88,
				88,
				88,
				60,
				47,
				115,
				116,
				114,
				105,
				110,
				103,
				62,
				10,
				9,
				9,
				60,
				107,
				101,
				121,
				62,
				80,
				114,
				111,
				100,
				117,
				99,
				116,
				84,
				121,
				112,
				101,
				60,
				47,
				107,
				101,
				121,
				62,
				10,
				9,
				9,
				60,
				115,
				116,
				114,
				105,
				110,
				103,
				62,
				105,
				80,
				104,
				111,
				110,
				101,
				49,
				54,
				44,
				50,
				60,
				47,
				115,
				116,
				114,
				105,
				110,
				103,
				62,
				10,
				9,
				9,
				60,
				107,
				101,
				121,
				62,
				66,
				117,
				105,
				108,
				100,
				86,
				101,
				114,
				115,
				105,
				111,
				110,
				60,
				47,
				107,
				101,
				121,
				62,
				10,
				9,
				9,
				60,
				115,
				116,
				114,
				105,
				110,
				103,
				62,
				50,
				49,
				65,
				51,
				50,
				57,
				60,
				47,
				115,
				116,
				114,
				105,
				110,
				103,
				62,
				10,
				9,
				9,
				60,
				107,
				101,
				121,
				62,
				68,
				101,
				118,
				105,
				99,
				101,
				78,
				97,
				109,
				101,
				60,
				47,
				107,
				101,
				121,
				62,
				10,
				9,
				9,
				60,
				115,
				116,
				114,
				105,
				110,
				103,
				62,
				105,
				80,
				104,
				111,
				110,
				101,
				60,
				47,
				115,
				116,
				114,
				105,
				110,
				103,
				62,
				10,
				9,
				9,
				60,
				107,
				101,
				121,
				62,
				85,
				110,
				105,
				113,
				117,
				101,
				68,
				101,
				118,
				105,
				99,
				101,
				73,
				68,
				60,
				47,
				107,
				101,
				121,
				62,
				10,
				9,
				9,
				60,
				115,
				116,
				114,
				105,
				110,
				103,
				62,
				97,
				97,
				97,
				97,
				97,
				97,
				97,
				97,
				97,
				97,
				97,
				97,
				97,
				97,
				97,
				97,
				97,
				97,
				97,
				97,
				97,
				97,
				97,
				97,
				97,
				97,
				97,
				97,
				97,
				97,
				97,
				97,
				97,
				97,
				97,
				97,
				97,
				97,
				97,
				97,
				60,
				47,
				115,
				116,
				114,
				105,
				110,
				103,
				62,
				10,
				9,
				60,
				47,
				100,
				105,
				99,
				116,
				62,
				10,
				9,
				60,
				107,
				101,
				121,
				62,
				83,
				121,
				115,
				116,
				101,
				109,
				68,
				111,
				109,
				97,
				105,
				110,
				115,
				86,
				101,
				114,
				115,
				105,
				111,
				110,
				60,
				47,
				107,
				101,
				121,
				62,
				10,
				9,
				60,
				115,
				116,
				114,
				105,
				110,
				103,
				62,
				50,
				52,
				46,
				48,
				60,
				47,
				115,
				116,
				114,
				105,
				110,
				103,
				62,
				10,
				9,
				60,
				107,
				101,
				121,
				62,
				86,
				101,
				114,
				115,
				105,
				111,
				110,
				60,
				47,
				107,
				101,
				121,
				62,
				10,
				9,
				60,
				115,
				116,
				114,
				105,
				110,
				103,
				62,
				49,
				48,
				46,
				48,
				60,
				47,
				115,
				116,
				114,
				105,
				110,
				103,
				62,
				10,
				9,
				60,
				107,
				101,
				121,
				62,
				87,
				97,
				115,
				80,
				97,
				115,
				115,
				99,
				111,
				100,
				101,
				83,
				101,
				116,
				60,
				47,
				107,
				101,
				121,
				62,
				10,
				9,
				60,
				102,
				97,
				108,
				115,
				101,
				47,
				62,
				10,
				60,
				47,
				100,
				105,
				99,
				116,
				62,
				10,
				60,
				47,
				112,
				108,
				105,
				115,
				116,
				62,
				10
			};
			byte[] array4 = new byte[]
			{
				49,
				115,
				102,
				229,
				121,
				8,
				109,
				3,
				84,
				90,
				34,
				109,
				101,
				250,
				59,
				53,
				253,
				246,
				83,
				210,
				224,
				146,
				180,
				143,
				182,
				131,
				148,
				247,
				248,
				141,
				201,
				124,
				142,
				22,
				119,
				137,
				117,
				52,
				110,
				70,
				129,
				238,
				189,
				71,
				235,
				86,
				223,
				145,
				211,
				246,
				249,
				152,
				192,
				203,
				76,
				164,
				132,
				171,
				97,
				188,
				23,
				46,
				172,
				60,
				77,
				5,
				170,
				178,
				166,
				219,
				28,
				130,
				133,
				8,
				37,
				233,
				178,
				111,
				101,
				227,
				170,
				177,
				125,
				189,
				227,
				116,
				160,
				242,
				89,
				1,
				123,
				33,
				148,
				231,
				87,
				209,
				166,
				198,
				230,
				13,
				156,
				16,
				236,
				191,
				193,
				25,
				9,
				109,
				171,
				245,
				3,
				62,
				144,
				144,
				57,
				157,
				177,
				229,
				25,
				31,
				20,
				216,
				159,
				247,
				174,
				216,
				21,
				124,
				142,
				220,
				192,
				184,
				241,
				116,
				4,
				202,
				173,
				183,
				85,
				111,
				152,
				44,
				248,
				239,
				23,
				141,
				69,
				120,
				7,
				205,
				57,
				67,
				124,
				52,
				17,
				66,
				68,
				47,
				234,
				5,
				171,
				181,
				236,
				6,
				191,
				82,
				171,
				26,
				88,
				199,
				5,
				232,
				139,
				149,
				49,
				156,
				231,
				12,
				115,
				84,
				80,
				13,
				37,
				234,
				136,
				32,
				187,
				126,
				62,
				131,
				198,
				28,
				192,
				172,
				19,
				92,
				208,
				64,
				1,
				160,
				109,
				47,
				169,
				115,
				62,
				202,
				30,
				81,
				124,
				88,
				202,
				127,
				159,
				224,
				183,
				73,
				144,
				250,
				128,
				40,
				236,
				195,
				106,
				137,
				211,
				100,
				147,
				251,
				112,
				155,
				145,
				251,
				182,
				227,
				229,
				185,
				78,
				89,
				byte.MaxValue,
				141,
				49,
				192,
				172,
				72,
				20,
				248,
				136,
				234,
				246,
				36,
				83,
				65,
				75,
				241,
				153,
				68,
				9,
				95,
				141,
				178,
				144,
				76,
				26,
				92,
				152,
				188,
				188,
				175,
				189,
				110,
				16,
				208,
				104,
				250,
				239,
				61,
				70,
				84,
				133,
				97,
				70,
				244,
				91,
				126,
				28,
				190,
				36,
				92,
				35,
				252,
				243,
				198,
				178,
				231,
				159,
				213,
				95,
				119,
				122,
				121,
				87,
				27,
				169,
				12,
				157,
				181,
				82,
				37,
				119,
				198,
				117,
				202,
				103,
				184,
				56,
				4,
				250,
				85,
				151,
				165,
				143,
				254,
				150,
				218,
				38,
				59,
				243,
				163,
				93,
				117,
				238,
				2,
				216,
				147,
				15,
				5,
				28,
				63,
				243,
				162,
				116,
				216,
				176,
				52,
				251,
				245,
				230,
				207,
				94,
				151,
				28,
				9,
				167,
				199,
				115,
				191,
				29,
				123,
				102,
				84,
				198,
				39,
				235,
				62,
				49,
				1,
				245,
				227,
				138,
				133,
				27,
				37,
				49,
				35,
				65,
				93,
				19,
				186,
				40,
				218,
				200,
				201,
				39,
				72,
				24,
				187,
				214,
				177,
				197,
				29,
				36,
				220,
				235,
				byte.MaxValue,
				150,
				147,
				191,
				164,
				141,
				20,
				125,
				114,
				62,
				56,
				98,
				196,
				123,
				251,
				246,
				42,
				136,
				71,
				214,
				168,
				235,
				230,
				26,
				204,
				230,
				251,
				187,
				24,
				67,
				103,
				160,
				198,
				95,
				149,
				33,
				77,
				80,
				213,
				68,
				136,
				104,
				81,
				33,
				170,
				40,
				3,
				38,
				212,
				171,
				220,
				120,
				100,
				226,
				193,
				185,
				86,
				110,
				20,
				140,
				2,
				54,
				248,
				29,
				69,
				94,
				147,
				188,
				6,
				134,
				131,
				180,
				107,
				111,
				252,
				74,
				227,
				68,
				243,
				91,
				8,
				15,
				92,
				82,
				203,
				139,
				58,
				240,
				225,
				153,
				109,
				251,
				235,
				3,
				81,
				121,
				150,
				100,
				146,
				51,
				40,
				212,
				36,
				232,
				47,
				167,
				128,
				228,
				6,
				59,
				168,
				19,
				190,
				225,
				102,
				77,
				239,
				130,
				67,
				131,
				251,
				211,
				189,
				234,
				30,
				239,
				118,
				104,
				24,
				78,
				16,
				6,
				226,
				103,
				238,
				145,
				225,
				199,
				119,
				154,
				236,
				145,
				byte.MaxValue,
				127,
				115,
				177,
				33,
				117,
				7,
				236,
				166,
				250,
				6,
				71,
				116,
				129,
				56,
				171,
				68,
				141,
				214,
				129,
				73,
				232,
				132,
				50,
				71,
				28,
				125,
				249,
				180,
				188,
				38,
				145,
				byte.MaxValue,
				0,
				78,
				23,
				21,
				133,
				126,
				235,
				167,
				72,
				126,
				241,
				21,
				207,
				194,
				24,
				101,
				99,
				3,
				25,
				214,
				118,
				55,
				240,
				142,
				248,
				169,
				126,
				82,
				102,
				51,
				70,
				131,
				156,
				111,
				209,
				67,
				104,
				242,
				83,
				213,
				202,
				125,
				170,
				14,
				165,
				182,
				89,
				235,
				126,
				148,
				87,
				254,
				61,
				185,
				78,
				203,
				243,
				175,
				83,
				137,
				20,
				103,
				138,
				244,
				152,
				168,
				213,
				199,
				38,
				28,
				121,
				16,
				96,
				145,
				73,
				194,
				156,
				108,
				90,
				110,
				118,
				51,
				95,
				4,
				27,
				76,
				1,
				171,
				66,
				74,
				30,
				249,
				212,
				19,
				99,
				105,
				117,
				161,
				135,
				168,
				58,
				3,
				2,
				179,
				57,
				5,
				81,
				179,
				90,
				212,
				240,
				43,
				137,
				72,
				1,
				33,
				199,
				234,
				88,
				27,
				171,
				237,
				74,
				112,
				119,
				233,
				2,
				196,
				16,
				55,
				94,
				9,
				128,
				205,
				146,
				253,
				42,
				167,
				223,
				35,
				92,
				34,
				72,
				139,
				162,
				187,
				39,
				198,
				248,
				199,
				204,
				253,
				250,
				104,
				96,
				58,
				60,
				74,
				36,
				13,
				110,
				38,
				68,
				23,
				58,
				124,
				93,
				189,
				26,
				181,
				58,
				86,
				34,
				26,
				3,
				140,
				165,
				183,
				145,
				223,
				32,
				123,
				53,
				148,
				5,
				150,
				211,
				1,
				89,
				177,
				96,
				155,
				80,
				3,
				170,
				115,
				49,
				68,
				207,
				14,
				200,
				21,
				86,
				11,
				196,
				11,
				37,
				163,
				89,
				151,
				102,
				176,
				146,
				208,
				12,
				207,
				42,
				242,
				204,
				216,
				20,
				205,
				76,
				115,
				156,
				223,
				33,
				105,
				195,
				145,
				71,
				148,
				161,
				190,
				251,
				74,
				158,
				54,
				36,
				110,
				54,
				19,
				210,
				24,
				208,
				128,
				95,
				157,
				178,
				52,
				83,
				134,
				85,
				120,
				214,
				187,
				182,
				107,
				106,
				243,
				20,
				18,
				122,
				124,
				217,
				35,
				245,
				14,
				189,
				1,
				32,
				210,
				88,
				26,
				203,
				0,
				214,
				182,
				53,
				195,
				143,
				168,
				130,
				217,
				65,
				81,
				217,
				28,
				117,
				169,
				168,
				52,
				144,
				195,
				37,
				82,
				160,
				192,
				30,
				222,
				85,
				88,
				247,
				26,
				115,
				41,
				222,
				34,
				150,
				147,
				120,
				191,
				75,
				119,
				101,
				156,
				233,
				136,
				2,
				122,
				157,
				105,
				245,
				2,
				83,
				169,
				41,
				244,
				159,
				13,
				134,
				72,
				248,
				7,
				44,
				171,
				184,
				244,
				206,
				79,
				225,
				85,
				227,
				17,
				80,
				178,
				211,
				187,
				52,
				111,
				133,
				182,
				151,
				191,
				66,
				19,
				145,
				244,
				34,
				150,
				155,
				210,
				171,
				163,
				243,
				117,
				69,
				127,
				204,
				224,
				82,
				91,
				84,
				180,
				87,
				111,
				214,
				141,
				42,
				184,
				199,
				15,
				140,
				154,
				173,
				37,
				12,
				5,
				192,
				5,
				110,
				40,
				105,
				82,
				159,
				177,
				182,
				3,
				231,
				53,
				196,
				170,
				177,
				170,
				98,
				165,
				237,
				210,
				49,
				1,
				69,
				21,
				128,
				137,
				122,
				167,
				84,
				48,
				96,
				186,
				218,
				0,
				178,
				122,
				39,
				186,
				187,
				148,
				6,
				126,
				38,
				171,
				206,
				249,
				55,
				152,
				172,
				231,
				68,
				153,
				67,
				183,
				141,
				194,
				170,
				10,
				238,
				153,
				182,
				62,
				64,
				162,
				189,
				116,
				52,
				50,
				130,
				144,
				151,
				161,
				136,
				65,
				41,
				62,
				34,
				5,
				113,
				28,
				199,
				21,
				140,
				166,
				135,
				28,
				249,
				13,
				121,
				96,
				231,
				158,
				241,
				50,
				103,
				141,
				232,
				94,
				byte.MaxValue,
				112,
				173,
				133,
				200,
				159,
				24,
				79,
				131,
				229,
				129,
				31,
				157,
				135,
				56,
				74,
				77,
				128,
				185,
				191,
				76,
				88,
				113,
				6,
				60,
				66,
				231,
				149,
				42,
				141,
				21,
				121,
				56,
				246,
				26,
				18,
				46,
				89,
				59,
				81,
				39,
				62,
				39,
				213,
				206,
				243,
				40,
				197,
				94,
				22,
				171,
				68,
				210,
				184,
				105,
				86,
				249,
				144,
				8,
				122,
				179,
				170,
				246,
				198,
				52,
				71,
				21,
				208,
				104,
				117,
				168,
				72,
				124,
				111,
				36,
				207,
				187,
				49,
				11,
				240,
				185,
				137,
				224,
				51,
				81,
				224,
				250,
				99,
				16,
				131,
				246,
				38,
				119,
				227,
				89,
				217,
				226,
				172,
				92,
				61,
				247,
				36,
				216,
				47,
				172,
				114,
				41,
				227,
				9,
				62,
				160,
				214,
				84,
				74,
				215,
				50,
				188,
				211,
				174,
				44,
				8,
				71,
				181,
				149,
				180,
				166,
				90,
				110,
				171,
				172,
				99,
				47,
				247,
				226,
				54,
				241,
				191,
				224,
				114,
				212,
				25,
				163,
				199,
				151,
				132,
				107,
				31,
				236,
				168,
				251,
				201,
				235,
				108,
				14,
				94,
				15,
				156,
				129,
				150,
				15,
				167,
				200,
				53,
				123,
				246,
				112,
				132,
				66,
				8,
				159,
				49,
				120,
				128,
				139,
				114,
				203,
				135,
				216,
				250,
				6,
				55,
				217,
				142,
				13,
				216,
				216,
				241,
				136,
				142,
				62,
				246,
				174,
				199,
				31,
				45,
				98,
				250,
				203,
				250,
				141,
				249,
				193,
				81,
				213,
				203,
				234,
				77,
				230,
				186,
				247,
				118,
				25,
				174,
				102,
				110,
				116,
				47,
				238,
				161,
				194,
				158,
				16,
				73,
				135,
				130,
				157,
				243,
				106,
				72,
				161,
				235,
				150,
				192,
				214,
				14,
				58,
				58,
				118,
				180,
				92,
				128,
				75,
				45,
				187,
				18,
				94,
				203,
				76,
				199,
				137,
				134,
				239,
				87,
				87,
				227,
				27,
				186,
				137,
				102,
				2,
				33,
				208,
				25,
				154,
				167,
				147,
				38,
				141,
				189,
				240,
				107,
				229,
				206,
				4,
				34,
				245,
				147,
				51,
				158,
				68,
				194,
				11,
				247,
				163,
				105,
				189,
				157,
				192,
				13,
				26,
				99,
				242,
				11,
				135,
				126,
				84,
				149,
				110,
				74,
				221,
				48,
				12,
				101,
				103,
				13,
				156,
				162,
				50,
				119,
				198,
				120,
				223,
				14,
				58,
				247,
				38,
				244,
				73,
				133,
				213,
				148,
				121,
				114,
				47,
				180,
				35,
				214,
				145,
				127,
				31,
				232,
				153,
				230,
				110,
				0,
				30,
				59,
				179,
				20,
				90,
				132,
				167,
				43,
				57,
				201,
				198,
				109,
				47,
				103,
				233,
				87,
				5,
				42,
				67,
				80,
				69,
				207,
				236,
				141,
				207,
				41,
				229,
				57,
				153,
				77,
				190,
				249,
				158,
				169,
				75,
				78,
				149,
				88,
				165,
				100,
				34,
				64,
				252,
				113,
				75,
				176,
				106,
				176,
				217,
				176,
				248,
				254,
				133,
				31,
				75,
				165,
				19,
				118,
				139,
				65,
				142,
				187,
				89,
				11,
				4,
				131,
				15,
				26,
				52,
				171,
				140,
				162,
				144,
				11,
				254,
				83,
				212,
				79,
				187,
				120,
				40,
				6,
				62,
				112,
				107,
				116,
				44,
				35,
				54,
				61,
				251,
				29,
				150,
				160,
				19,
				169,
				162,
				185,
				97,
				13,
				158,
				10,
				133,
				219,
				123,
				124,
				158,
				187,
				245,
				200,
				184,
				78,
				40,
				52,
				105,
				207,
				58,
				49,
				68,
				20,
				199,
				56,
				55,
				195,
				170,
				60,
				192,
				189,
				82,
				3,
				36,
				240,
				84,
				19,
				88,
				82,
				178,
				51,
				76,
				28,
				58,
				211,
				64,
				153,
				249,
				155,
				16,
				179,
				196,
				166,
				246,
				222,
				15,
				239,
				106,
				175,
				104,
				176,
				134,
				209,
				77,
				72,
				73,
				155,
				236,
				202,
				51,
				40,
				187,
				22,
				1,
				127,
				134,
				39,
				57,
				77,
				44,
				94,
				46,
				196,
				75,
				211,
				202,
				12,
				64,
				186,
				75,
				12,
				149,
				35,
				54,
				86,
				228,
				162,
				176,
				43,
				165,
				112,
				171,
				38,
				137,
				189,
				253,
				219,
				246,
				219,
				207,
				91,
				101,
				142,
				87,
				232,
				77,
				64,
				103,
				60,
				53,
				165,
				218,
				163,
				203,
				120,
				91,
				178,
				128,
				14,
				43,
				193,
				224,
				58,
				32,
				72,
				121,
				49,
				47,
				163,
				139,
				157,
				121,
				250,
				123,
				210,
				243,
				15,
				223,
				8,
				61,
				165,
				211,
				130,
				210,
				8,
				188,
				31,
				82,
				12,
				31,
				120,
				212,
				101,
				104,
				149,
				105,
				105,
				65,
				253,
				200,
				70,
				26,
				57,
				114,
				90,
				34,
				202,
				58,
				112,
				151,
				111,
				56,
				177,
				136,
				34,
				113,
				245,
				92,
				94,
				244,
				84,
				115,
				24,
				198,
				183,
				186,
				207,
				232,
				104,
				110,
				82,
				1,
				54,
				144,
				136,
				83,
				139,
				209,
				32,
				46,
				41,
				76,
				11,
				60,
				211,
				111,
				172,
				124,
				124,
				28,
				15,
				35,
				73,
				12,
				125,
				42,
				211,
				193,
				238,
				159,
				236,
				175,
				248,
				237,
				35,
				44,
				223,
				179,
				112,
				14,
				52,
				172,
				79,
				161,
				109,
				95,
				153,
				122,
				221,
				148,
				124,
				24,
				239,
				2,
				95,
				88,
				27,
				123,
				172,
				53,
				byte.MaxValue,
				23,
				5,
				187,
				9,
				30,
				140,
				205,
				37,
				8,
				33,
				193,
				220,
				86,
				151,
				113,
				68,
				152,
				147,
				114,
				23,
				92,
				132,
				127,
				90,
				byte.MaxValue,
				184,
				44,
				207,
				5,
				0,
				0,
				35,
				97,
				7,
				byte.MaxValue,
				158,
				151,
				126,
				155,
				118,
				103,
				89,
				136,
				217,
				134,
				5,
				110,
				248,
				10,
				177,
				215,
				33,
				249,
				125,
				150,
				126,
				114,
				62,
				166,
				238,
				33,
				46,
				73,
				191,
				233,
				226,
				7,
				180,
				105,
				168,
				103,
				194,
				109,
				202,
				205,
				100,
				157,
				213,
				252,
				252,
				90,
				173,
				148,
				62,
				207,
				99,
				170,
				189,
				158,
				33,
				17,
				234,
				235,
				153,
				198,
				214,
				25,
				160,
				105,
				62,
				172,
				109,
				28,
				63,
				239,
				218,
				231,
				128,
				128,
				34,
				233,
				97,
				106,
				60,
				33,
				43,
				146,
				145,
				131,
				217,
				10,
				56,
				2,
				227,
				183,
				231,
				0,
				252,
				240,
				127,
				61,
				130,
				93,
				12,
				155,
				60,
				208,
				181,
				175,
				92,
				218,
				191,
				58,
				26,
				125,
				45,
				167,
				58,
				43,
				250,
				141,
				150,
				254,
				200,
				65,
				172,
				220,
				163,
				235,
				7,
				82,
				243,
				2,
				167,
				76,
				16,
				25,
				124,
				182,
				107,
				211,
				148,
				117,
				247,
				115,
				206,
				211,
				11,
				144,
				135,
				233,
				208,
				103,
				1,
				116,
				216,
				213,
				11,
				106,
				249,
				208,
				114,
				146,
				85,
				111,
				187,
				27,
				17,
				100,
				81,
				136,
				0,
				132,
				96,
				233,
				68,
				19,
				27,
				23,
				203,
				103,
				33,
				68,
				92,
				215,
				136,
				230,
				248,
				181,
				217,
				183,
				40,
				14,
				82,
				143,
				140,
				202,
				65,
				89,
				72,
				69,
				193,
				203,
				6,
				29,
				250,
				249,
				239,
				97,
				114,
				204,
				85,
				81,
				167,
				226,
				206,
				14,
				198,
				155,
				202,
				4,
				232,
				59,
				90,
				24,
				1,
				57,
				52,
				87,
				111,
				79,
				109,
				29,
				94,
				194,
				5,
				207,
				86,
				22,
				201,
				114,
				147,
				7,
				11,
				10,
				108,
				215,
				51,
				94,
				69,
				7,
				16,
				15,
				216,
				125,
				78,
				135,
				18,
				112,
				230,
				22,
				142,
				166,
				172,
				234,
				47,
				28,
				149,
				252,
				200,
				90,
				117,
				251,
				213,
				104,
				33,
				204,
				214,
				190,
				221,
				byte.MaxValue,
				110,
				201,
				173,
				64,
				71,
				72,
				56,
				147,
				220,
				245,
				166,
				243,
				191,
				149,
				98,
				248,
				140,
				148,
				219,
				46,
				77,
				222,
				72,
				42,
				152,
				205,
				128,
				27,
				251,
				51,
				90,
				133,
				215,
				85,
				7,
				8,
				191,
				231,
				193,
				193,
				24,
				187,
				111,
				93,
				98,
				7,
				221,
				177,
				185,
				37,
				152,
				163,
				36,
				127,
				168,
				41,
				188,
				36,
				6,
				170,
				78,
				200,
				58,
				65,
				102,
				181,
				18,
				124,
				132,
				92,
				124,
				12,
				111,
				159,
				161,
				231,
				125,
				75,
				112,
				65,
				242,
				25,
				140,
				251,
				229,
				34,
				158,
				33,
				157,
				118,
				75,
				211,
				170,
				86,
				156,
				123,
				62,
				197,
				28,
				47,
				176,
				127,
				224,
				166,
				130,
				171,
				245,
				153,
				60,
				171,
				251,
				7,
				86,
				31,
				104,
				85,
				251,
				216,
				233,
				63,
				43,
				208,
				228,
				222,
				128,
				240,
				152,
				207,
				108,
				234,
				250,
				228,
				178,
				18,
				222,
				219,
				20,
				246,
				59,
				251,
				179,
				110,
				230,
				196,
				208,
				28,
				46,
				207,
				95,
				154,
				122,
				231,
				79,
				145,
				88,
				241,
				134,
				160,
				50,
				17,
				140,
				114,
				136,
				165,
				236,
				97,
				138,
				38,
				67,
				11,
				80,
				136,
				232,
				66,
				139,
				151,
				240,
				188,
				114,
				246,
				7,
				233,
				38,
				101,
				12,
				132,
				20,
				71,
				124,
				101,
				21,
				118,
				135,
				18,
				117,
				122,
				196,
				2,
				52,
				100,
				206,
				137,
				114,
				213,
				139,
				228,
				239,
				230,
				171,
				133,
				92,
				152,
				27,
				211,
				75,
				120,
				218,
				154,
				157,
				69,
				118,
				79,
				152,
				67,
				148,
				30,
				236,
				130,
				170,
				226,
				105,
				59,
				66,
				1,
				74,
				167,
				220,
				159,
				32,
				45,
				150,
				236,
				131,
				6,
				160,
				0,
				220,
				137,
				198,
				146,
				99,
				216,
				175,
				0,
				126,
				3,
				187,
				153,
				218,
				34,
				208,
				187,
				133,
				158,
				132,
				136,
				181,
				215,
				20,
				98,
				94,
				36,
				124,
				57,
				206,
				18,
				14,
				62,
				154,
				93,
				184,
				49,
				181,
				108,
				209,
				23,
				91,
				102,
				129,
				56,
				94,
				18,
				228,
				34,
				56,
				149,
				38,
				37,
				202,
				244,
				27,
				137,
				250,
				1,
				252,
				184,
				141,
				113,
				182,
				210,
				224,
				16,
				102,
				30,
				8,
				144,
				25,
				22,
				34,
				91,
				123,
				237,
				32,
				246,
				149,
				44,
				147,
				223,
				219,
				45,
				49,
				216,
				103,
				201,
				93,
				52,
				160,
				105,
				87,
				9,
				229,
				12,
				226,
				28,
				124,
				31,
				17,
				89,
				150,
				101,
				180,
				250,
				78,
				101,
				10,
				227,
				220,
				140,
				143,
				27,
				216,
				85,
				229,
				182,
				54,
				138,
				42,
				172,
				4,
				143,
				200,
				217,
				119,
				27,
				248,
				178,
				162,
				93,
				102,
				46,
				163,
				108,
				12,
				125,
				108,
				246,
				27,
				203,
				53,
				202,
				29,
				232,
				96,
				159,
				42,
				100,
				30,
				5,
				13,
				54,
				0,
				43,
				84,
				76,
				149,
				12,
				188,
				242,
				108,
				171,
				158,
				116,
				222,
				84,
				206,
				38,
				253,
				3,
				125,
				33,
				136,
				24,
				23,
				39,
				48,
				31,
				12,
				108,
				108,
				238,
				10,
				91,
				217,
				211,
				127,
				185,
				153,
				222,
				11,
				172,
				110,
				242,
				144,
				138,
				105,
				225,
				207,
				144,
				200,
				52,
				108,
				54,
				245,
				106,
				19,
				228,
				10,
				153,
				105,
				135,
				42,
				41,
				211,
				149,
				251,
				132,
				70,
				176,
				78,
				100,
				33,
				248,
				164,
				182,
				229,
				203,
				78,
				54,
				225,
				97,
				33,
				8,
				101,
				71,
				84,
				133,
				209,
				69,
				250,
				65,
				105,
				96,
				49,
				124,
				204,
				215,
				162,
				53,
				215,
				188,
				97,
				82,
				190,
				30,
				19,
				154,
				198,
				37,
				248,
				225,
				161,
				125,
				154,
				227,
				19,
				163,
				41,
				48,
				194,
				244,
				188,
				237,
				213,
				134,
				132,
				197,
				228,
				159,
				206,
				6,
				44,
				247,
				198,
				46,
				123,
				100,
				9,
				203,
				198,
				123,
				6,
				26,
				196,
				194,
				9,
				121,
				153,
				205,
				227,
				179,
				60,
				234,
				146,
				84,
				234,
				118,
				39,
				96,
				235,
				116,
				240,
				139,
				235,
				72,
				213,
				64,
				46,
				250,
				12,
				122,
				135,
				224,
				238,
				16,
				204,
				92,
				134,
				226,
				166,
				155,
				245,
				132,
				233,
				121,
				230,
				169,
				197,
				181,
				213,
				159,
				143,
				163,
				250,
				119,
				190,
				137,
				184,
				133,
				18,
				51,
				0,
				245,
				35,
				152,
				17,
				238,
				149,
				232,
				251,
				97,
				217,
				78,
				152,
				157,
				101,
				10,
				18,
				217,
				241,
				219,
				225,
				148,
				195,
				228,
				79,
				230,
				101,
				89,
				188,
				234,
				65,
				159,
				120,
				45,
				7,
				192,
				19,
				185,
				204,
				74,
				150,
				161,
				102,
				159,
				78,
				15,
				196,
				68,
				234,
				176,
				157,
				231,
				79,
				83,
				117,
				152,
				81,
				45,
				176,
				132,
				112,
				97,
				81,
				51,
				7,
				75,
				44,
				12,
				68,
				210,
				186,
				142,
				39,
				227,
				214,
				127,
				62,
				226,
				54,
				166,
				116,
				208,
				200,
				135,
				176,
				4,
				253,
				67,
				141,
				29,
				21,
				191,
				172,
				69,
				127,
				200,
				115,
				6,
				50,
				67,
				205,
				84,
				215,
				27,
				72,
				151,
				132,
				108,
				118,
				19,
				122,
				54,
				225,
				34,
				237,
				194,
				126,
				201,
				2,
				239,
				149,
				74,
				174,
				183,
				37,
				194,
				181,
				189,
				169,
				45,
				byte.MaxValue,
				239,
				168,
				30,
				111,
				46,
				146,
				31,
				93,
				163,
				73,
				17,
				179,
				54,
				8,
				198,
				30,
				170,
				196,
				30,
				190,
				136,
				38,
				137,
				191,
				189,
				4,
				105,
				51,
				31,
				184,
				62,
				27,
				37,
				83,
				200,
				190,
				140,
				231,
				69,
				109,
				163,
				12,
				225,
				13,
				254,
				210,
				14,
				byte.MaxValue,
				178,
				168,
				234,
				145,
				78,
				157,
				13,
				63,
				221,
				192,
				248,
				164,
				185,
				240,
				236,
				227,
				192,
				23,
				30,
				80,
				33,
				57,
				232,
				212,
				69,
				43,
				19,
				101,
				byte.MaxValue,
				247,
				36,
				132,
				1,
				66,
				66,
				140,
				240,
				112,
				55,
				64,
				106,
				88,
				77,
				151,
				23,
				42,
				62,
				195,
				176,
				193,
				188,
				37,
				221,
				73,
				53,
				233,
				250,
				11,
				163,
				147,
				35,
				233,
				11,
				0,
				137,
				120,
				108,
				179,
				200,
				215,
				157,
				175,
				157,
				193,
				186,
				226,
				181,
				228,
				131,
				15,
				90,
				50,
				252,
				189,
				135,
				211,
				37,
				124,
				58,
				99,
				249,
				156,
				239,
				87,
				94,
				102,
				16,
				51,
				224,
				119,
				117,
				32,
				40,
				122,
				42,
				174,
				13,
				58,
				154,
				211,
				12,
				153,
				211,
				194,
				17,
				192,
				60,
				210,
				130,
				106,
				179,
				250,
				42,
				120,
				243,
				252,
				130,
				227,
				185,
				236,
				80,
				155,
				244,
				114,
				175,
				117,
				87,
				218,
				170,
				31,
				74,
				178,
				63,
				68,
				58,
				212,
				33,
				15,
				71,
				244,
				125,
				127,
				55,
				109,
				253,
				14,
				22,
				73,
				55,
				61,
				244,
				210,
				62,
				240,
				75,
				224,
				105,
				96,
				239,
				3,
				215,
				143,
				157,
				6,
				227,
				211,
				26,
				252,
				28,
				248,
				58,
				241,
				209,
				150,
				68,
				227,
				246,
				64,
				227,
				151,
				149,
				253,
				164,
				122,
				120,
				134,
				36,
				45,
				52,
				205,
				170,
				209,
				231,
				109,
				25,
				218,
				65,
				208,
				232,
				55,
				111,
				122,
				111,
				158,
				142,
				44,
				25,
				240,
				130,
				69,
				242,
				5,
				63,
				93,
				6,
				203,
				94,
				201,
				220,
				136,
				146,
				6,
				120,
				122,
				82,
				228,
				254,
				236,
				182,
				174,
				184,
				245,
				128,
				175,
				144,
				30,
				204,
				71,
				121,
				190,
				200,
				122,
				210,
				11,
				9,
				189,
				66,
				88,
				101,
				205,
				56,
				11,
				2,
				64,
				216,
				175,
				135,
				128,
				202,
				53,
				167,
				62,
				117,
				186,
				197,
				165,
				155,
				23,
				142,
				66,
				15,
				227,
				35,
				96,
				166,
				219,
				17,
				64,
				236,
				246,
				42,
				144,
				10,
				75,
				106,
				16,
				45,
				179,
				74,
				239,
				90,
				95,
				122,
				102,
				101,
				254,
				249,
				89,
				39,
				254,
				46,
				221,
				230,
				177,
				104,
				228,
				64,
				224,
				29,
				128,
				164,
				138,
				176,
				11,
				89,
				215,
				154,
				185,
				166,
				190,
				18,
				88,
				151,
				218,
				10,
				77,
				163,
				14,
				246,
				126,
				29,
				27,
				193,
				237,
				232,
				192,
				250,
				189,
				204,
				120,
				138,
				113,
				18,
				21,
				222,
				241,
				224,
				78,
				195,
				25,
				196,
				121,
				133,
				168,
				217,
				36,
				211,
				57,
				238,
				185,
				183,
				186,
				132,
				47,
				42,
				249,
				184,
				47,
				214,
				53,
				byte.MaxValue,
				87,
				223,
				221,
				45,
				62,
				228,
				47,
				13,
				123,
				31,
				120,
				153,
				112,
				150,
				6,
				229,
				219,
				143,
				189,
				198,
				111,
				31,
				34,
				124,
				141,
				228,
				103,
				23,
				152,
				174,
				155,
				190,
				30,
				10,
				91,
				55,
				247,
				250,
				244,
				45,
				136,
				2,
				253,
				73,
				94,
				141,
				203,
				136,
				168,
				62,
				178,
				63,
				53,
				79,
				66,
				169,
				147,
				32,
				197,
				111,
				40,
				85,
				52,
				145,
				249,
				63,
				226,
				33,
				135,
				140,
				12,
				44,
				4,
				59,
				244,
				53,
				183,
				201,
				182,
				36,
				224,
				43,
				159,
				147,
				118,
				97,
				220,
				128,
				165,
				103,
				47,
				53,
				89,
				178,
				140,
				176,
				86,
				237,
				253,
				196,
				35,
				36,
				90,
				22,
				20,
				69,
				2,
				113,
				62,
				12,
				141,
				83,
				137,
				84,
				6,
				87,
				230,
				164,
				245,
				205,
				44,
				176,
				239,
				33,
				238,
				19,
				83,
				243,
				46,
				223,
				47,
				175,
				62,
				156,
				254,
				232,
				53,
				47,
				48,
				119,
				125,
				167,
				65,
				185,
				219,
				103,
				73,
				136,
				198,
				236,
				212,
				193,
				61,
				56,
				185,
				117,
				252,
				59,
				226,
				158,
				99,
				53,
				128,
				73,
				142,
				157,
				214,
				167,
				77,
				142,
				57,
				144,
				219,
				168,
				105,
				20,
				64,
				226,
				98,
				97,
				185,
				151,
				225,
				110,
				72,
				181,
				60,
				159,
				53,
				111,
				13,
				126,
				189,
				213,
				64,
				143,
				58,
				55,
				127,
				73,
				119,
				43,
				48,
				32,
				73,
				35,
				132,
				79,
				209,
				242,
				75,
				119,
				219,
				120,
				99,
				213,
				217,
				212,
				190,
				68,
				151,
				59,
				160,
				11,
				160,
				233,
				71,
				200,
				118,
				252,
				217,
				189,
				198,
				41,
				239,
				55,
				211,
				1,
				70,
				110,
				235,
				47,
				254,
				80,
				170,
				75,
				216,
				82,
				44,
				196,
				84,
				177,
				195,
				2,
				18,
				125,
				200,
				92,
				23,
				215,
				44,
				245,
				128,
				209,
				56,
				24,
				36,
				203,
				18,
				74,
				222,
				110,
				208,
				110,
				190,
				47,
				0,
				79,
				32,
				49,
				207,
				228,
				129,
				221,
				33,
				53,
				253,
				4,
				118,
				27,
				89,
				122,
				118,
				168,
				132,
				117,
				236,
				112,
				186,
				0,
				2,
				107,
				156,
				126,
				108,
				182,
				146,
				214,
				177,
				5,
				37,
				163,
				141,
				186,
				233,
				176,
				126,
				219,
				203,
				127,
				166,
				54,
				67,
				206,
				43,
				63,
				222,
				243,
				214,
				13,
				64,
				161,
				119,
				230,
				222,
				227,
				97,
				156,
				135,
				52,
				130,
				218,
				224,
				160,
				205,
				80,
				132,
				196,
				34,
				146,
				133,
				93,
				105,
				32,
				157,
				63,
				73,
				209,
				33,
				125,
				189,
				52,
				9,
				104,
				63,
				111,
				58,
				43,
				189,
				247,
				220,
				90,
				206,
				73,
				68,
				147,
				119,
				72,
				189,
				160,
				15,
				172,
				185,
				250,
				107,
				202,
				162,
				99,
				191,
				97,
				222,
				68,
				164,
				82,
				27,
				172,
				5,
				145,
				10,
				141,
				224,
				114,
				26,
				19,
				79,
				112,
				114,
				253,
				9,
				187,
				237,
				131,
				251,
				251,
				93,
				223,
				85,
				225,
				41,
				38,
				170,
				29,
				53,
				17,
				58,
				161,
				221,
				82,
				152,
				124,
				148,
				200,
				14,
				162,
				209,
				86,
				66,
				227,
				3,
				243,
				219,
				195,
				221,
				173,
				153,
				241,
				166,
				67,
				9,
				111,
				219,
				97,
				50,
				146,
				250,
				172,
				151,
				119,
				139,
				155,
				239,
				233,
				213,
				228,
				100,
				5,
				213,
				19,
				237,
				75,
				103,
				233,
				96,
				101,
				108,
				51,
				170,
				183,
				205,
				227,
				63,
				51,
				165,
				16,
				5,
				167,
				232,
				248,
				12,
				195,
				161,
				0,
				142,
				166,
				52,
				235,
				99,
				83,
				25,
				83,
				189,
				59,
				38,
				102,
				70,
				170,
				51,
				248,
				163,
				242,
				23,
				180,
				143,
				124,
				99,
				249,
				180,
				183,
				10,
				86,
				32,
				164,
				74,
				61,
				183,
				23,
				192,
				125,
				220,
				128,
				241,
				173,
				20,
				113,
				202,
				8,
				104,
				159,
				77,
				136,
				62,
				60,
				210,
				156,
				104,
				150,
				157,
				141,
				24,
				48,
				128,
				34,
				159,
				189,
				212,
				84,
				63,
				235,
				83,
				129,
				207,
				184,
				185,
				36,
				238,
				58,
				235,
				58,
				13,
				160,
				132,
				163,
				151,
				161,
				23,
				47,
				105,
				195,
				34,
				116,
				197,
				89,
				253,
				124,
				141,
				51,
				122,
				14,
				12,
				71,
				48,
				197,
				50,
				59,
				204,
				84,
				117,
				45,
				8,
				179,
				92,
				226,
				35,
				112,
				185,
				213,
				40,
				238,
				229,
				152,
				152,
				2,
				100,
				234,
				167,
				103,
				9,
				229,
				18,
				216,
				128,
				246,
				121,
				251,
				65,
				119,
				138,
				244,
				175,
				56,
				166,
				43,
				36,
				103,
				202,
				11,
				61,
				22,
				193,
				164,
				62,
				24,
				32,
				150,
				43,
				141,
				167,
				112,
				116,
				180,
				177,
				247,
				52,
				69,
				121,
				90,
				202,
				9,
				62,
				47,
				88,
				129,
				215,
				233,
				109,
				156,
				132,
				127,
				9,
				120,
				33,
				109,
				22,
				142,
				238,
				125,
				211,
				247,
				211,
				237,
				109,
				148,
				102,
				16,
				58,
				48,
				118,
				105,
				185,
				177,
				237,
				36,
				66,
				177,
				236,
				89,
				111,
				188,
				189,
				42,
				118,
				238,
				53,
				8,
				60,
				92,
				81,
				48,
				23,
				131,
				100,
				233,
				228,
				51,
				199,
				234,
				byte.MaxValue,
				87,
				191,
				215,
				18,
				238,
				42,
				93,
				222,
				6,
				218,
				77,
				145,
				135,
				28,
				134,
				151,
				40,
				63,
				169,
				byte.MaxValue,
				44,
				102,
				216,
				227,
				79,
				75,
				28,
				129,
				189,
				130,
				98,
				47,
				146,
				146,
				82,
				4,
				11,
				157,
				178,
				51,
				18,
				81,
				202,
				229,
				115,
				227,
				12,
				227,
				207,
				172,
				46,
				237,
				231,
				242,
				21,
				232,
				49,
				10,
				241,
				38,
				171,
				250,
				116,
				53,
				10,
				164,
				153,
				247,
				199,
				13,
				111,
				59,
				130,
				164,
				113,
				1,
				24,
				13,
				210,
				93,
				226,
				81,
				221,
				94,
				220,
				141,
				222,
				91,
				72,
				249,
				82,
				72,
				115,
				54,
				142,
				146,
				166,
				188,
				46,
				161,
				12,
				113,
				171,
				122,
				201,
				0,
				148,
				249,
				33,
				240,
				61,
				206,
				108,
				127,
				71,
				45,
				131,
				179,
				249,
				239,
				76,
				120,
				84,
				145,
				221,
				230,
				141,
				11,
				206,
				46,
				39,
				80,
				181,
				232,
				33,
				31,
				54,
				194,
				246,
				54,
				145,
				129,
				38,
				55,
				25,
				167,
				203,
				59,
				143,
				107,
				155,
				38,
				163,
				114,
				73,
				65,
				56,
				194,
				234,
				25,
				51,
				180,
				43,
				201,
				2,
				109,
				byte.MaxValue,
				86,
				200,
				78,
				48,
				66,
				184,
				37,
				12,
				67,
				104,
				157,
				238,
				243,
				37,
				96,
				82,
				11,
				92,
				230,
				56,
				111,
				140,
				205,
				157,
				110,
				215,
				38,
				32,
				42,
				228,
				175,
				24,
				135,
				39,
				186,
				62,
				120,
				96,
				175,
				98,
				79,
				234,
				134,
				240,
				37,
				206,
				95,
				212,
				28,
				209,
				156,
				70,
				119,
				64,
				78,
				133,
				187,
				61,
				96,
				172,
				210,
				82,
				138,
				191,
				81,
				203,
				58,
				210,
				68,
				122,
				2,
				254,
				212,
				24,
				70,
				119,
				217,
				75,
				2,
				78,
				17,
				byte.MaxValue,
				101,
				248,
				161,
				208,
				96,
				81,
				50,
				8,
				116,
				117,
				14,
				172,
				196,
				33,
				96,
				90,
				125,
				92,
				178,
				124,
				89,
				209,
				243,
				121,
				100,
				1,
				226,
				112,
				30,
				195,
				231,
				106,
				47,
				216,
				225,
				113,
				117,
				15,
				127,
				221,
				127,
				183,
				169,
				171,
				109,
				136,
				41,
				191,
				168,
				129,
				161,
				122,
				30,
				229,
				112,
				208,
				128,
				215,
				160,
				15,
				251,
				32,
				89,
				181,
				42,
				183,
				21,
				9,
				176,
				219,
				80,
				86,
				80,
				176,
				126,
				193,
				37,
				14,
				248,
				18,
				238,
				199,
				80,
				55,
				248,
				44,
				30,
				214,
				81,
				10,
				56,
				222,
				140,
				127,
				196,
				113,
				74,
				81,
				188,
				10,
				240,
				234,
				182,
				146,
				205,
				251,
				210,
				125,
				171,
				16,
				189,
				14,
				91,
				70,
				98,
				2,
				150,
				244,
				132,
				81,
				125,
				43,
				192,
				14,
				11,
				138,
				213,
				249,
				22,
				0,
				9,
				62,
				62,
				76,
				162,
				171,
				134,
				92,
				40,
				203,
				252,
				149,
				157,
				106,
				45,
				147,
				63,
				151,
				227,
				135,
				211,
				byte.MaxValue,
				230,
				62,
				87,
				25,
				2,
				101,
				43,
				91,
				206,
				45,
				240,
				3,
				231,
				8,
				139,
				199,
				206,
				117,
				138,
				94,
				217,
				34,
				47,
				118,
				43,
				208,
				126,
				23,
				144,
				217,
				181,
				114,
				126,
				51,
				143,
				byte.MaxValue,
				175,
				118,
				10,
				82,
				190,
				99,
				137,
				44,
				26,
				221,
				172,
				125,
				135,
				92,
				249,
				60,
				167,
				204,
				177,
				209,
				204,
				91,
				214,
				56,
				127,
				57,
				57,
				176,
				219,
				143,
				27,
				130,
				198,
				57,
				50,
				141,
				245,
				223,
				47,
				137,
				207,
				18,
				189,
				223,
				27,
				29,
				232,
				65,
				231,
				173,
				55,
				250,
				135,
				163,
				89,
				100,
				126,
				183,
				6,
				8,
				191,
				162,
				187,
				158,
				173,
				174,
				13,
				145,
				18,
				31,
				129,
				183,
				16,
				214,
				60,
				19,
				32,
				162,
				75,
				105,
				194,
				36,
				199,
				223,
				11,
				169,
				41,
				72,
				111,
				248,
				237,
				36,
				39,
				24,
				132,
				161,
				243,
				63,
				47,
				61,
				18,
				117,
				201,
				190,
				131,
				81,
				146,
				63,
				163,
				105,
				176,
				177,
				101,
				181,
				179,
				79,
				164,
				225,
				158,
				179,
				248,
				76,
				215,
				246,
				245,
				41,
				142,
				205,
				212,
				78,
				165,
				72,
				184,
				200,
				10,
				164,
				91,
				7,
				55,
				153,
				13,
				144,
				151,
				236,
				196,
				211,
				202,
				213,
				64,
				191,
				212,
				240,
				34,
				210,
				7,
				29,
				106,
				155,
				12,
				144,
				25,
				199,
				174,
				33,
				69,
				50,
				83,
				153,
				242,
				113,
				227,
				171,
				176,
				135,
				90,
				237,
				58,
				157,
				129,
				144,
				201,
				34,
				92,
				143,
				180,
				251,
				151,
				68,
				249,
				90,
				213,
				96,
				221,
				152,
				53,
				146,
				211,
				190,
				36,
				98,
				138,
				93,
				253,
				19,
				80,
				byte.MaxValue,
				4,
				118,
				55,
				63,
				95,
				84,
				50,
				138,
				226,
				243,
				126,
				202,
				92,
				159,
				247,
				192,
				166,
				226,
				130,
				198,
				6,
				105,
				244,
				139,
				81,
				40,
				44,
				3,
				106,
				239,
				191,
				237,
				245,
				97,
				122,
				178,
				49,
				120,
				123,
				46,
				53,
				12,
				99,
				210,
				217,
				187,
				68,
				182,
				58,
				42,
				178,
				214,
				130,
				144,
				57,
				82,
				91,
				175,
				22,
				136,
				37,
				133,
				26,
				202,
				146,
				75,
				200,
				83,
				48,
				25,
				188,
				28,
				63,
				231,
				62,
				168,
				35,
				18,
				0,
				208,
				243,
				46,
				232,
				248,
				196,
				193,
				2,
				98,
				206,
				127,
				225,
				91,
				131,
				21,
				69,
				254,
				117,
				135,
				50,
				166,
				63,
				138,
				217,
				22,
				158,
				48,
				121,
				120,
				69,
				4,
				146,
				201,
				58,
				25,
				111,
				105,
				72,
				145,
				172,
				96,
				221,
				14,
				215,
				92,
				188,
				232,
				53,
				119,
				37,
				155,
				179,
				243,
				205,
				57,
				0,
				88,
				187,
				51,
				167,
				197,
				92,
				174,
				53,
				113,
				79,
				98,
				81,
				50,
				102,
				77,
				202,
				52,
				63,
				79,
				45,
				124,
				176,
				236,
				235,
				11,
				17,
				153,
				134,
				147,
				44,
				114,
				184,
				72,
				226,
				85,
				104,
				221,
				84,
				251,
				74,
				146,
				216,
				171,
				52,
				116,
				78,
				208,
				9,
				221,
				22,
				107,
				86,
				63,
				177,
				24,
				93,
				177,
				5,
				216,
				236,
				26,
				155,
				88,
				73,
				30,
				192,
				254,
				16,
				74,
				217,
				186,
				155,
				222,
				11,
				99,
				1,
				79,
				113,
				239,
				237,
				37,
				56,
				242,
				60,
				99,
				245,
				123,
				88,
				127,
				111,
				10,
				178,
				185,
				161,
				251,
				81,
				29,
				91,
				7,
				207,
				0,
				187,
				251,
				103,
				180,
				116,
				93,
				230,
				98,
				127,
				64,
				82,
				20,
				200,
				205,
				207,
				69,
				69,
				168,
				179,
				83,
				172,
				44,
				233,
				51,
				132,
				165,
				170,
				122,
				42,
				24,
				60,
				111,
				0,
				231,
				233,
				13,
				113,
				14,
				14,
				204,
				113,
				72,
				163,
				24,
				63,
				139,
				200,
				158,
				163,
				238,
				168,
				222,
				144,
				72,
				45,
				232,
				52,
				57,
				233,
				28,
				126,
				34,
				142,
				144,
				82,
				9,
				31,
				55,
				25,
				17,
				62,
				158,
				95,
				160,
				234,
				249,
				225,
				228,
				33,
				61,
				111,
				168,
				160,
				209,
				88,
				135,
				91,
				78,
				209,
				162,
				210,
				201,
				11,
				10,
				205,
				200,
				18,
				16,
				138,
				82,
				247,
				44,
				84,
				195,
				171,
				245,
				182,
				12,
				171,
				239,
				117,
				223,
				101,
				250,
				77,
				122,
				6,
				25,
				155,
				50,
				164,
				30,
				194,
				119,
				240,
				234,
				143,
				49,
				108,
				242,
				247,
				145,
				231,
				122,
				68,
				173,
				203,
				70,
				221,
				51,
				247,
				234,
				254,
				231,
				47,
				106,
				245,
				29,
				228,
				53,
				252,
				45,
				55,
				29,
				113,
				10,
				117,
				99,
				26,
				23,
				235,
				44,
				16,
				242,
				192,
				214,
				129,
				213,
				238,
				17,
				25,
				161,
				41,
				137,
				11,
				176,
				217,
				114,
				90,
				80,
				171,
				80,
				238,
				213,
				63,
				183,
				121,
				144,
				70,
				213,
				54,
				253,
				94,
				196,
				254,
				29,
				198,
				216,
				18,
				103,
				130,
				26,
				231,
				67,
				1,
				102,
				30,
				202,
				157,
				226,
				214,
				36,
				31,
				223,
				29,
				128,
				104,
				17,
				90,
				4,
				253,
				32,
				155,
				181,
				30,
				66,
				201,
				189,
				238,
				129,
				205,
				144,
				132,
				29,
				66,
				64,
				216,
				58,
				245,
				88,
				51,
				48,
				201,
				127,
				10,
				61,
				120,
				166,
				68,
				118,
				29,
				81,
				36,
				175,
				192,
				124,
				101,
				88,
				96,
				239,
				58,
				6,
				148,
				219,
				149,
				140,
				70,
				176,
				113,
				54,
				228,
				0,
				7,
				32,
				218,
				143,
				35,
				239,
				253,
				189,
				13,
				144,
				89,
				225,
				144,
				145,
				220,
				183,
				138,
				15,
				47,
				45,
				135,
				46,
				17,
				167,
				156,
				51,
				17,
				156,
				9,
				192,
				57,
				229,
				209,
				6,
				224,
				65,
				228,
				74,
				120,
				140,
				45,
				237,
				179,
				173,
				26,
				88,
				88,
				189,
				88,
				165,
				220,
				89,
				203,
				204,
				10,
				120,
				54,
				115,
				37,
				120,
				5,
				45,
				4,
				67,
				149,
				201,
				117,
				27,
				175,
				147,
				247,
				165,
				55,
				0,
				22,
				145,
				240,
				21,
				191,
				87,
				116,
				95,
				42,
				185,
				169,
				241,
				57,
				127,
				126,
				19,
				240,
				76,
				38,
				137,
				218,
				95,
				101,
				76,
				22,
				115,
				170,
				55,
				151,
				181,
				241,
				25,
				29,
				244,
				242,
				25,
				190,
				18,
				242,
				55,
				183,
				110,
				12,
				81,
				241,
				149,
				111,
				148,
				103,
				48,
				62,
				229,
				84,
				191,
				204,
				136,
				239,
				133,
				91,
				177,
				147,
				185,
				47,
				12,
				12,
				32,
				10,
				81,
				51,
				126,
				193,
				9,
				62,
				14,
				121,
				104,
				51,
				161,
				177,
				199,
				186,
				53,
				87,
				158,
				1,
				55,
				9,
				188,
				81,
				80,
				52,
				23,
				242,
				249,
				169,
				130,
				109,
				131,
				20,
				238,
				191,
				145,
				252,
				22,
				185,
				88,
				192,
				132,
				168,
				74,
				240,
				105,
				192,
				123,
				19,
				18,
				253,
				93,
				byte.MaxValue,
				159,
				161,
				97,
				100,
				117,
				34,
				76,
				216,
				117,
				25,
				64,
				118,
				201,
				126,
				116,
				121,
				157,
				40,
				238,
				227,
				20,
				129,
				148,
				20,
				230,
				63,
				45,
				132,
				67,
				195,
				221,
				213,
				214,
				26,
				158,
				42,
				24,
				177,
				37,
				241,
				22,
				1,
				96,
				36,
				93,
				23,
				73,
				100,
				90,
				137,
				38,
				65,
				185,
				33,
				35,
				62,
				4,
				208,
				165,
				226,
				137,
				56,
				66,
				54,
				171,
				161,
				183,
				118,
				235,
				138,
				204,
				188,
				166,
				82,
				1,
				179,
				170,
				84,
				95,
				118,
				81,
				239,
				75,
				57,
				146,
				88,
				18,
				104,
				178,
				189,
				162,
				200,
				192,
				92,
				119,
				169,
				241,
				249,
				198,
				57,
				40,
				56,
				138,
				158,
				98,
				60,
				224,
				82,
				220,
				16,
				38,
				197,
				170,
				196,
				16,
				140,
				12,
				124,
				210,
				48,
				19,
				241,
				230,
				150,
				16,
				111,
				224,
				229,
				22,
				141,
				0,
				14,
				195,
				148,
				5,
				36,
				11,
				212,
				236,
				0,
				53,
				71,
				138,
				0,
				175,
				244,
				201,
				248,
				99,
				66,
				212,
				251,
				76,
				119,
				70,
				56,
				91,
				222,
				96,
				74,
				157,
				252,
				186,
				235,
				72,
				25,
				2,
				13,
				123,
				42,
				87,
				190,
				18,
				227,
				192,
				84,
				177,
				254,
				176,
				95,
				203,
				38,
				15,
				40,
				238,
				171,
				185,
				71,
				107,
				177,
				173,
				35,
				246,
				208,
				178,
				72,
				155,
				34,
				181,
				69,
				227,
				181,
				23,
				209,
				202,
				123,
				140,
				209,
				181,
				155,
				76,
				99,
				216,
				228,
				91,
				201,
				107,
				105,
				253,
				221,
				0,
				2,
				175,
				34,
				138,
				98,
				128,
				203,
				130,
				98,
				19,
				179,
				67,
				135,
				231,
				1,
				30,
				79,
				89,
				30,
				10,
				129,
				11,
				167,
				117,
				82,
				130,
				31,
				227,
				156,
				89,
				95,
				229,
				38,
				234,
				21,
				143,
				145,
				227,
				213,
				111,
				60,
				246,
				204,
				130,
				74,
				57,
				17,
				207,
				46,
				40,
				231,
				134,
				225,
				165,
				234,
				106,
				88,
				99,
				114,
				54,
				233,
				215,
				27,
				139,
				84,
				73,
				2,
				205,
				109,
				209,
				63,
				93,
				116,
				105,
				195,
				25,
				49,
				116,
				219,
				16,
				106,
				197,
				42,
				120,
				73,
				172,
				16,
				142,
				87,
				178,
				183,
				220,
				39,
				94,
				230,
				108,
				142,
				106,
				149,
				39,
				6,
				155,
				240,
				216,
				208,
				140,
				129,
				177,
				97,
				125,
				237,
				116,
				181,
				165,
				28,
				139,
				90,
				33,
				33,
				45,
				119,
				53,
				246,
				159,
				43,
				139,
				230,
				240,
				29,
				128,
				34,
				65,
				150,
				227,
				45,
				111,
				169,
				34,
				169,
				226,
				219,
				86,
				78,
				49,
				71,
				83,
				142,
				226,
				69,
				25,
				203,
				128,
				192,
				4,
				205,
				192,
				248,
				148,
				118,
				220,
				119,
				123,
				99,
				201,
				77,
				36,
				91,
				240,
				201,
				130,
				195,
				28,
				252,
				166,
				202,
				30,
				66,
				187,
				214,
				5,
				54,
				223,
				168,
				151,
				101,
				165,
				211,
				217,
				192,
				95,
				59,
				80,
				92,
				224,
				28,
				100,
				193,
				57,
				97,
				104,
				75,
				147,
				98,
				246,
				234,
				38,
				19,
				75,
				137,
				18,
				73,
				239,
				184,
				128,
				173,
				136,
				174,
				39,
				207,
				154,
				175,
				118,
				24,
				204,
				29,
				4,
				100,
				214,
				140,
				83,
				212,
				174,
				19,
				89,
				61,
				16,
				129,
				157,
				211,
				159,
				29,
				51,
				186,
				83,
				162,
				91,
				238,
				51,
				177,
				180,
				173,
				226,
				206,
				124,
				82,
				225,
				46,
				51,
				74,
				33,
				206,
				247,
				110,
				79,
				234,
				6,
				12,
				143,
				130,
				23,
				87,
				150,
				5,
				185,
				84,
				92,
				177,
				63,
				4,
				107,
				42,
				157,
				108,
				159,
				236,
				253,
				177,
				198,
				25,
				101,
				112,
				156,
				237,
				115,
				238,
				160,
				234,
				187,
				17,
				237,
				134,
				115,
				79,
				105,
				28,
				177,
				114,
				43,
				240,
				60,
				232,
				211,
				169,
				221,
				141,
				89,
				65,
				94,
				28,
				248,
				71,
				17,
				59,
				38,
				195,
				87,
				151,
				34,
				83,
				159,
				17,
				114,
				217,
				220,
				173,
				89,
				40,
				168,
				212,
				108,
				82,
				217,
				103,
				49,
				112,
				155,
				151,
				163,
				205,
				214,
				214,
				128,
				138,
				92,
				171,
				106,
				72,
				243,
				131,
				80,
				144,
				76,
				190,
				172,
				119,
				18,
				228,
				5,
				140,
				116,
				89,
				194,
				69,
				98,
				24,
				163,
				83,
				198,
				63,
				142,
				239,
				106,
				86,
				48,
				40,
				170,
				224,
				224,
				27,
				102,
				2,
				26,
				92,
				189,
				93,
				83,
				225,
				181,
				97,
				196,
				151,
				246,
				33,
				128,
				179,
				135,
				188,
				173,
				213,
				164,
				249,
				8,
				153,
				88,
				119,
				151,
				203,
				169,
				134,
				130,
				89,
				164,
				3,
				67,
				byte.MaxValue,
				102,
				253,
				203,
				209,
				254,
				155,
				13,
				133,
				85,
				174,
				189,
				222,
				106,
				213,
				85,
				245,
				167,
				105,
				46,
				136,
				189,
				68,
				42,
				149,
				134,
				139,
				241,
				212,
				194,
				184,
				232,
				234,
				128,
				115,
				185,
				86,
				110,
				179,
				127,
				42,
				137,
				101,
				138,
				163,
				136,
				223,
				217,
				245,
				189,
				94,
				226,
				152,
				161,
				192,
				200,
				8,
				101,
				53,
				63,
				188,
				241,
				47,
				86,
				38,
				5,
				239,
				55,
				65,
				207,
				105,
				224,
				72,
				160,
				73,
				254,
				188,
				125,
				31,
				224,
				181,
				212,
				138,
				139,
				74,
				175,
				213,
				125,
				233,
				168,
				131,
				241,
				16,
				18,
				31,
				95,
				127,
				115,
				253,
				137,
				205,
				73,
				14,
				217,
				2,
				138,
				36,
				77,
				46,
				243,
				250,
				76,
				151,
				194,
				108,
				174,
				59,
				65,
				59,
				63,
				37,
				158,
				178,
				132,
				84,
				199,
				169,
				51,
				191,
				169,
				239,
				53,
				192,
				10,
				56,
				109,
				17,
				152,
				13,
				220,
				224,
				151,
				40,
				208,
				253,
				37,
				118,
				48,
				67,
				69,
				112,
				132,
				170,
				229,
				156,
				205,
				6,
				209,
				30,
				29,
				128,
				187,
				96,
				54,
				163,
				164,
				33,
				238,
				206,
				byte.MaxValue,
				155,
				54,
				156,
				142,
				194,
				230,
				212,
				17,
				153,
				0,
				26,
				64,
				40,
				93,
				243,
				54,
				11,
				121,
				19,
				45,
				228,
				134,
				85,
				221,
				209,
				58,
				175,
				92,
				169,
				167,
				20,
				2,
				79,
				14,
				177,
				235,
				234,
				59,
				234,
				12,
				161,
				204,
				148,
				72,
				113,
				19,
				66,
				56,
				89,
				95,
				165,
				205,
				20,
				139,
				136,
				112,
				183,
				41,
				194,
				62,
				110,
				167,
				131,
				14,
				196,
				37,
				205,
				224,
				79,
				134,
				50,
				212,
				233,
				119,
				174,
				48,
				165,
				129,
				135,
				195,
				106,
				246,
				219,
				240,
				157,
				42,
				114,
				95,
				50,
				60,
				59,
				237,
				87,
				132,
				33,
				11,
				185,
				166,
				236,
				76,
				202,
				229,
				253,
				152,
				209,
				126,
				249,
				195,
				44,
				37,
				94,
				210,
				17,
				181,
				109,
				33,
				199,
				107,
				121,
				249,
				113,
				59,
				195,
				31,
				238,
				124,
				74,
				30,
				6,
				52,
				175,
				222,
				97,
				177,
				0,
				187,
				140,
				100,
				154,
				186,
				52,
				239,
				0,
				93,
				191,
				166,
				77,
				61,
				118,
				183,
				175,
				0,
				154,
				208,
				145,
				13,
				154,
				90,
				10,
				193,
				252,
				235,
				238,
				224,
				56,
				229,
				78,
				71,
				202,
				60,
				135,
				252,
				160,
				1,
				197,
				12,
				220,
				105,
				25,
				23,
				99,
				254,
				43,
				61,
				69,
				118,
				137,
				122,
				95,
				89,
				31,
				158,
				47,
				28,
				160,
				52,
				205,
				16,
				35,
				217,
				181,
				241,
				176,
				78,
				139,
				108,
				86,
				147,
				11,
				225,
				110,
				124,
				126,
				254,
				35,
				82,
				7,
				91,
				118,
				93,
				167,
				30,
				246,
				38,
				13,
				217,
				160,
				206,
				213,
				74,
				228,
				226,
				36,
				210,
				133,
				101,
				21,
				84,
				228,
				200,
				164,
				100,
				58,
				147,
				135,
				234,
				147,
				202,
				125,
				84,
				226,
				68,
				181,
				161,
				183,
				220,
				29,
				181,
				178,
				199,
				56,
				178,
				54,
				91,
				114,
				168,
				47,
				92,
				135,
				172,
				44,
				108,
				106,
				140,
				41,
				203,
				241,
				223,
				35,
				26,
				165,
				231,
				94,
				193,
				39,
				232,
				215,
				215,
				124,
				3,
				137,
				109,
				82,
				18,
				195,
				206,
				83,
				161,
				238,
				134,
				18,
				113,
				206,
				35,
				165,
				198,
				51,
				208,
				238,
				151,
				89,
				221,
				158,
				3,
				239,
				107,
				180,
				81,
				104,
				64,
				232,
				180,
				18,
				153,
				11,
				236,
				227,
				8,
				229,
				248,
				202,
				18,
				208,
				56,
				152,
				24,
				42,
				253,
				144,
				112,
				96,
				153,
				43,
				212,
				18,
				4,
				123,
				19,
				243,
				132,
				5,
				62,
				156,
				83,
				116,
				104,
				118,
				118,
				224,
				76,
				88,
				186,
				20,
				249,
				46,
				195,
				236,
				78,
				34,
				150,
				115,
				122,
				189,
				177,
				163,
				74,
				21,
				44,
				170,
				113,
				119,
				87,
				125,
				114,
				39,
				193,
				101,
				179,
				224,
				108,
				102,
				254,
				119,
				183,
				241,
				220,
				226,
				83,
				67,
				237,
				250,
				227,
				188,
				22,
				213,
				19,
				183,
				49,
				209,
				39,
				139,
				74,
				15,
				75,
				237,
				250,
				34,
				250,
				113,
				8,
				34,
				174,
				186,
				12,
				119,
				43,
				56,
				42,
				72,
				90,
				190,
				72,
				172,
				225,
				51,
				136,
				55,
				159,
				191,
				144,
				154,
				104,
				67,
				89,
				143,
				62,
				71,
				92,
				119,
				251,
				195,
				112,
				113,
				228,
				214,
				248,
				128,
				235,
				226,
				234,
				80,
				203,
				120,
				231,
				181,
				94,
				3,
				219,
				51,
				171,
				121,
				167,
				98,
				111,
				58,
				34,
				203,
				201,
				166,
				0,
				36,
				99,
				85,
				184,
				109,
				28,
				160,
				208,
				186,
				157,
				48,
				86,
				153,
				122,
				43,
				129,
				73,
				50,
				8,
				46,
				246,
				187,
				248,
				241,
				204,
				207,
				237,
				58,
				174,
				63,
				208,
				221,
				212,
				11,
				234,
				112,
				113,
				73,
				117,
				217,
				250,
				72,
				41,
				166,
				180,
				18,
				109,
				114,
				128,
				229,
				144,
				193,
				78,
				197,
				116,
				199,
				137,
				168,
				230,
				154,
				148,
				220,
				194,
				156,
				84,
				31,
				26,
				60,
				114,
				93,
				248,
				164,
				190,
				116,
				120,
				41,
				86,
				77,
				165,
				53,
				193,
				1,
				10,
				230,
				138,
				110,
				238,
				184,
				212,
				246,
				94,
				194,
				204,
				254,
				135,
				150,
				215,
				143,
				33,
				222,
				46,
				17,
				243,
				225,
				235,
				106,
				52,
				184,
				154,
				191,
				148,
				27,
				144,
				34,
				134,
				33,
				214,
				byte.MaxValue,
				56,
				198,
				139,
				238,
				161,
				60,
				119,
				251,
				55,
				170,
				131,
				253,
				195,
				105,
				232,
				3,
				247,
				152,
				159,
				160,
				44,
				162,
				199,
				207,
				96,
				121,
				234,
				21,
				182,
				37,
				77,
				242,
				30,
				117,
				85,
				223,
				168,
				89,
				185,
				219,
				185,
				32,
				31,
				31,
				166,
				200,
				77,
				74,
				71,
				136,
				175,
				167,
				16,
				113,
				198,
				72,
				232,
				209,
				92,
				55,
				46,
				162,
				189,
				131,
				205,
				107,
				81,
				86,
				220,
				186,
				91,
				112,
				231,
				227,
				97,
				188,
				96,
				186,
				9,
				17,
				82,
				187,
				4,
				26,
				139,
				57,
				227,
				33,
				131,
				218,
				180,
				240,
				20,
				197,
				230,
				227,
				93,
				209,
				226,
				221,
				218,
				182,
				244,
				186,
				191,
				159,
				211,
				41,
				177,
				214,
				80,
				171,
				127,
				61,
				154,
				41,
				92,
				21,
				52,
				251,
				180,
				52,
				121,
				95,
				226,
				223,
				212,
				19,
				42,
				39,
				254,
				232,
				137,
				225,
				55,
				182,
				75,
				216,
				67,
				33,
				200,
				56,
				146,
				64,
				155,
				61,
				16,
				53,
				96,
				199,
				166,
				10,
				28,
				60,
				38,
				240,
				122,
				120,
				45,
				138,
				116,
				216,
				68,
				85,
				51,
				86,
				79,
				145,
				26,
				148,
				173,
				161,
				212,
				236,
				196,
				55,
				82,
				232,
				203,
				158,
				213,
				136,
				135,
				182,
				191,
				128,
				237,
				50,
				246,
				238,
				38,
				91,
				200,
				47,
				109,
				80,
				252,
				200,
				154,
				176,
				114,
				148,
				236,
				43,
				223,
				87,
				33,
				14,
				63,
				94,
				103,
				83,
				238,
				181,
				61,
				148,
				200,
				165,
				124,
				53,
				177,
				162,
				159,
				22,
				6,
				115,
				60,
				159,
				25,
				56,
				19,
				135,
				68,
				141,
				174,
				133,
				67,
				87,
				216,
				7,
				40,
				159,
				159,
				210,
				196,
				210,
				240,
				123,
				141,
				248,
				213,
				207,
				102,
				220,
				65,
				57,
				64,
				230,
				87,
				66,
				173,
				112,
				159,
				126,
				130,
				83,
				44,
				73,
				172,
				124,
				215,
				184,
				35,
				53,
				175,
				251,
				221,
				162,
				87,
				46,
				80,
				57,
				239,
				66,
				32,
				85,
				203,
				167,
				30,
				25,
				23,
				135,
				198,
				44,
				191,
				80,
				110,
				229,
				100,
				194,
				73,
				42,
				72,
				118,
				233,
				183,
				75,
				103,
				27,
				172,
				109,
				214,
				236,
				46,
				29,
				148,
				240,
				219,
				87,
				187,
				26,
				142,
				39,
				237,
				7,
				187,
				182,
				249,
				159,
				27,
				210,
				107,
				76,
				5,
				249,
				60,
				42,
				204,
				43,
				165,
				39,
				194,
				83,
				226,
				115,
				104,
				222,
				246,
				231,
				162,
				158,
				21,
				198,
				51,
				244,
				109,
				2,
				225,
				205,
				155,
				71,
				129,
				192,
				50,
				205,
				62,
				5,
				188,
				205,
				107,
				208,
				179,
				228,
				24,
				238,
				193,
				4,
				49,
				161,
				114,
				81,
				241,
				150,
				101,
				17,
				90,
				253,
				158,
				137,
				58,
				197,
				174,
				250,
				146,
				4,
				41,
				25,
				98,
				173,
				247,
				100,
				130,
				23,
				238,
				238,
				58,
				84,
				217,
				122,
				107,
				91,
				142,
				15,
				12,
				238,
				237,
				188,
				187,
				226,
				86,
				99,
				133,
				98,
				164,
				150,
				85,
				89,
				173,
				242,
				59,
				179,
				181,
				231,
				170,
				88,
				230,
				86,
				214,
				60,
				11,
				61,
				192,
				32,
				25,
				237,
				69,
				179,
				222,
				165,
				191,
				6,
				176,
				229,
				248,
				173,
				102,
				234,
				41,
				173,
				157,
				201,
				39,
				33,
				184,
				87,
				186,
				116,
				243,
				249,
				40,
				111,
				57,
				142,
				11,
				248,
				194,
				63,
				219,
				218,
				62,
				62,
				211,
				142,
				28,
				54,
				177,
				86,
				113,
				227,
				148,
				149,
				134,
				52,
				88,
				103,
				80,
				99,
				197,
				81,
				218,
				144,
				111,
				8,
				57,
				9,
				66,
				163,
				205,
				72,
				159,
				143,
				69,
				169,
				8,
				39,
				80,
				157,
				68,
				231,
				238,
				66,
				32,
				194,
				168,
				242,
				163,
				176,
				165,
				190,
				1,
				106,
				241,
				93,
				62,
				76,
				207,
				181,
				78,
				187,
				140,
				181,
				151,
				92,
				194,
				56,
				237,
				197,
				107,
				113,
				9,
				247,
				200,
				121,
				32,
				228,
				22,
				132,
				34,
				241,
				131,
				145,
				161,
				20,
				156,
				242,
				250,
				134,
				177,
				177,
				163,
				19,
				175,
				133,
				219,
				38,
				121,
				42,
				126,
				128,
				98,
				24,
				175,
				213,
				130,
				244,
				26,
				105,
				168,
				32,
				149,
				223,
				139,
				217,
				103,
				128,
				94,
				41,
				116,
				135,
				7,
				211,
				127,
				131,
				218,
				124,
				125,
				117,
				145,
				200,
				146,
				168,
				220,
				123,
				188,
				219,
				22,
				125,
				12,
				37,
				78,
				254,
				143,
				19,
				21,
				24,
				149,
				2,
				61,
				248,
				153,
				63,
				22,
				27,
				193,
				19,
				79,
				230,
				0,
				250,
				71,
				173,
				178,
				86,
				96,
				81,
				217,
				125,
				1,
				27,
				242,
				143,
				46,
				95,
				160,
				189,
				1,
				147,
				232,
				223,
				11,
				50,
				75,
				182,
				201,
				129,
				63,
				50,
				241,
				39,
				207,
				182,
				162,
				174,
				9,
				120,
				208,
				28,
				148,
				117,
				221,
				8,
				111,
				240,
				250,
				139,
				87,
				242,
				174,
				85,
				4,
				243,
				151,
				59,
				77,
				67,
				44,
				87,
				30,
				234,
				58,
				34,
				206,
				162,
				114,
				94,
				41,
				122,
				172,
				210,
				57,
				231,
				22,
				44,
				181,
				175,
				248,
				148,
				185,
				248,
				46,
				138,
				88,
				169,
				117,
				149,
				107,
				59,
				184,
				6,
				58,
				174,
				52,
				231,
				205,
				147,
				139,
				215,
				199,
				176,
				174,
				139,
				157,
				182,
				230,
				203,
				22,
				52,
				137,
				211,
				41,
				1,
				187,
				49,
				41,
				138,
				29,
				22,
				192,
				203,
				209,
				34,
				115,
				24,
				199,
				238,
				55,
				171,
				76,
				117,
				201,
				242,
				137,
				145,
				63,
				38,
				24,
				59,
				137,
				129,
				226,
				59,
				138,
				9,
				214,
				27,
				2,
				237,
				6,
				142,
				15,
				99,
				242,
				228,
				231,
				81,
				101,
				46,
				169,
				132,
				13,
				byte.MaxValue,
				111,
				226,
				82,
				136,
				2,
				197,
				240,
				145,
				100,
				212,
				83,
				22,
				233,
				81,
				123,
				61,
				25,
				44,
				203,
				154,
				127,
				67,
				82,
				228,
				247,
				34,
				165,
				98,
				68,
				127,
				53,
				70,
				176,
				101,
				106,
				225,
				218,
				7,
				163,
				117,
				153,
				199,
				133,
				74,
				177,
				61,
				86,
				213,
				123,
				133,
				148,
				30,
				88,
				33,
				46,
				161,
				37,
				224,
				120,
				40,
				210,
				94,
				137,
				134,
				233,
				83,
				58,
				53,
				13,
				214,
				191,
				10,
				34,
				48,
				184,
				19,
				237,
				114,
				211,
				36,
				208,
				12,
				111,
				23,
				1,
				209,
				55,
				125,
				130,
				159,
				214,
				106,
				159,
				161,
				205,
				236,
				95,
				157,
				219,
				101,
				159,
				163,
				56,
				11,
				60,
				117,
				2,
				123,
				189,
				151,
				154,
				42,
				96,
				18,
				17,
				87,
				140,
				78,
				44,
				107,
				229,
				25,
				235,
				3,
				155,
				134,
				64,
				116,
				21,
				77,
				86,
				254,
				105,
				46,
				180,
				236,
				229,
				224,
				49,
				225,
				191,
				217,
				185,
				200,
				112,
				66,
				150,
				32,
				250,
				37,
				250,
				65,
				221,
				233,
				182,
				31,
				150,
				202,
				251,
				161,
				30,
				125,
				15,
				117,
				214,
				161,
				148,
				222,
				132,
				36,
				149,
				5,
				225,
				189,
				4,
				103,
				10,
				33,
				240,
				220,
				153,
				213,
				113,
				191,
				53,
				12,
				45,
				136,
				230,
				151,
				81,
				9,
				21,
				105,
				211,
				217,
				219,
				195,
				102,
				118,
				251,
				242,
				33,
				49,
				141,
				88,
				111,
				181,
				146,
				46,
				243,
				165,
				207,
				27,
				197,
				23,
				218,
				58,
				166,
				191,
				14,
				15,
				91,
				149,
				126,
				230,
				124,
				94,
				168,
				35,
				16,
				201,
				63,
				240,
				171,
				212,
				22,
				31,
				191,
				175,
				144,
				121,
				193,
				162,
				152,
				60,
				139,
				40,
				180,
				178,
				28,
				85,
				204,
				236,
				190,
				132,
				191,
				247,
				55,
				160,
				78,
				152,
				174,
				198,
				56,
				235,
				104,
				160,
				153,
				144,
				168,
				106,
				236,
				124,
				225,
				170,
				150,
				137,
				185,
				175,
				57,
				66,
				158,
				109,
				84,
				7,
				byte.MaxValue,
				129,
				86,
				112,
				34,
				0,
				110,
				238,
				109,
				172,
				196,
				33,
				131,
				56,
				161,
				188,
				142,
				9,
				54,
				59,
				133,
				227,
				21,
				7,
				65,
				4,
				39,
				185,
				179,
				180,
				118,
				103,
				218,
				167,
				111,
				219,
				200,
				189,
				229,
				143,
				137,
				59,
				186,
				159,
				137,
				119,
				155,
				229,
				79,
				158,
				60,
				240,
				166,
				95,
				195,
				187,
				44,
				215,
				58,
				159,
				124,
				175,
				188,
				231,
				142,
				167,
				197,
				166,
				34,
				176,
				90,
				38,
				3,
				240,
				2,
				208,
				40,
				115,
				118,
				148,
				233,
				13,
				254,
				148,
				233,
				98,
				11,
				40,
				55,
				252,
				227,
				2,
				189,
				144,
				64,
				41,
				12,
				229,
				116,
				37,
				148,
				226,
				67,
				61,
				236,
				220,
				231,
				247,
				197,
				148,
				129,
				233,
				211,
				22,
				13,
				233,
				199,
				39,
				60,
				158,
				61,
				123,
				182,
				10,
				162,
				144,
				141,
				60,
				28,
				178,
				154,
				149,
				97,
				196,
				217,
				146,
				84,
				36,
				157,
				106,
				8,
				123,
				73,
				99,
				61,
				61,
				98,
				252,
				227,
				163,
				204,
				189,
				220,
				249,
				79,
				210,
				90,
				24,
				199,
				225,
				115,
				148,
				92,
				25,
				169,
				170,
				144,
				10,
				224,
				153,
				157,
				178,
				159,
				64,
				121,
				218,
				172,
				221,
				74,
				62,
				182,
				95,
				135,
				100,
				135,
				147,
				142,
				137,
				105,
				53,
				62,
				90,
				7,
				212,
				201,
				88,
				173,
				141,
				253,
				160,
				29,
				97,
				129,
				182,
				36,
				37,
				92,
				3,
				84,
				8,
				58,
				48,
				128,
				254,
				194,
				137,
				133,
				13,
				129,
				166,
				94,
				128,
				163,
				221,
				213,
				148,
				221,
				141,
				145,
				152,
				251,
				146,
				150,
				98,
				140,
				131,
				144,
				17,
				236,
				187,
				223,
				175,
				63,
				96,
				77,
				243,
				18,
				207,
				59,
				70,
				196,
				187,
				166,
				175,
				33,
				11,
				243,
				139,
				148,
				158,
				103,
				47,
				79,
				201,
				181,
				58,
				218,
				231,
				152,
				102,
				22,
				125,
				120,
				98,
				91,
				203,
				246,
				228,
				219,
				173,
				223,
				25,
				95,
				86,
				11,
				35,
				248,
				241,
				222,
				123,
				163,
				195,
				182,
				123,
				193,
				120,
				238,
				33,
				187,
				226,
				60,
				213,
				16,
				141,
				203,
				233,
				58,
				92,
				85,
				byte.MaxValue,
				144,
				158,
				112,
				195,
				44,
				252,
				65,
				149,
				75,
				159,
				236,
				90,
				106,
				39,
				186,
				137,
				139,
				172,
				177,
				154,
				127,
				7,
				55,
				89,
				60,
				151,
				37,
				32,
				206,
				28,
				34,
				167,
				215,
				40,
				9,
				35,
				245,
				133,
				41,
				198,
				171,
				135,
				61,
				151,
				236,
				162,
				174,
				199,
				225,
				92,
				9,
				245,
				115,
				117,
				134,
				169,
				63,
				120,
				233,
				107,
				177,
				168,
				155,
				211,
				94,
				47,
				63,
				40,
				140,
				20,
				38,
				143,
				6,
				101,
				22,
				238,
				139,
				2,
				141,
				242,
				38,
				79,
				193,
				250,
				64,
				70,
				5,
				16,
				160,
				215,
				193,
				24,
				45,
				195,
				90,
				251,
				125,
				77,
				137,
				188,
				153,
				211,
				222,
				158,
				97,
				88,
				229,
				12,
				157,
				67,
				0,
				247,
				140,
				105,
				97,
				227,
				87,
				14,
				21,
				111,
				23,
				158,
				116,
				92,
				58,
				44,
				128,
				139,
				172,
				117,
				76,
				52,
				120,
				28,
				80,
				14,
				54,
				91,
				197,
				2,
				208,
				144,
				90,
				249,
				215,
				88,
				74,
				214,
				62,
				231,
				240,
				53,
				147,
				117,
				183,
				58,
				103,
				113,
				238,
				74,
				175,
				157,
				43,
				93,
				144,
				193,
				240,
				219,
				13,
				90,
				87,
				71,
				26,
				132,
				244,
				4,
				247,
				163,
				165,
				212,
				191,
				114,
				214,
				23,
				42,
				94,
				156,
				53,
				80,
				113,
				86,
				94,
				47,
				78,
				161,
				11,
				4,
				23,
				102,
				140,
				159,
				79,
				215,
				24,
				13,
				100,
				34,
				166,
				239,
				75,
				14,
				233,
				130,
				144,
				83,
				169,
				9,
				42,
				164,
				16,
				201,
				10,
				187,
				197,
				182,
				159,
				148,
				200,
				224,
				253,
				147,
				224,
				193,
				25,
				243,
				243,
				155,
				33,
				87,
				40,
				160,
				103,
				124,
				228,
				227,
				99,
				1,
				118,
				24,
				35,
				28,
				237,
				150,
				109,
				123,
				250,
				200,
				173,
				89,
				20,
				135,
				142,
				133,
				188,
				166,
				162,
				56,
				105,
				30,
				220,
				183,
				210,
				253,
				75,
				201,
				151,
				80,
				66,
				36,
				38,
				227,
				185,
				55,
				221,
				18,
				153,
				97,
				75,
				49,
				185,
				3,
				235,
				106,
				250,
				172,
				89,
				238,
				100,
				201,
				168,
				61,
				1,
				199,
				88,
				214,
				28,
				3,
				144,
				115,
				155,
				12,
				174,
				87,
				231,
				3,
				232,
				251,
				242,
				149,
				44,
				158,
				116,
				126,
				165,
				199,
				217,
				138,
				159,
				115,
				122,
				62,
				1,
				166,
				43,
				209,
				90,
				51,
				244,
				246,
				94,
				147,
				230,
				186,
				byte.MaxValue,
				35,
				235,
				30,
				6,
				81,
				225,
				212,
				252,
				89,
				211,
				47,
				132,
				119,
				108,
				153,
				20,
				110,
				73,
				118,
				111,
				36,
				40,
				224,
				30,
				142,
				86,
				85,
				145,
				152,
				234,
				174,
				102,
				45,
				47,
				137,
				110,
				171,
				154,
				177,
				96,
				95,
				177,
				6,
				117,
				120,
				193,
				102,
				247,
				89,
				96,
				170,
				45,
				127,
				91,
				167,
				148,
				222,
				106,
				216,
				239,
				108,
				130,
				169,
				239,
				68,
				69,
				244,
				25,
				134,
				103,
				162,
				42,
				35,
				204,
				177,
				144,
				77,
				245,
				203,
				172,
				byte.MaxValue,
				93,
				6,
				218,
				45,
				225,
				31,
				92,
				189,
				142,
				211,
				180,
				74,
				30,
				190,
				137,
				206,
				234,
				249,
				5,
				178,
				123,
				114,
				129,
				72,
				31,
				49,
				177,
				11,
				104,
				144,
				194,
				127,
				130,
				231,
				248,
				93,
				240,
				31,
				173,
				246,
				189,
				202,
				58,
				239,
				235,
				132,
				87,
				16,
				30,
				49,
				27,
				4,
				50,
				30,
				204,
				11,
				211,
				182,
				188,
				198,
				203,
				191,
				215,
				80,
				89,
				78,
				67,
				159,
				57,
				176,
				145,
				140,
				251,
				244,
				231,
				114,
				116,
				82,
				253,
				177,
				107,
				9,
				118,
				12,
				88,
				211,
				121,
				8,
				228,
				107,
				115,
				187,
				202,
				234,
				217,
				70,
				71,
				75,
				242,
				223,
				29,
				180,
				20,
				125,
				49,
				116,
				154,
				213,
				92,
				51,
				122,
				3,
				71,
				131,
				128,
				196,
				171,
				1,
				13,
				148,
				61,
				143,
				2,
				72,
				88,
				32,
				7,
				162,
				216,
				14,
				76,
				55,
				136,
				178,
				202,
				74,
				34,
				174,
				22,
				175,
				192,
				199,
				30,
				119,
				64,
				149,
				92,
				0,
				210,
				115,
				80,
				117,
				187,
				15,
				100,
				103,
				88,
				9,
				143,
				73,
				218,
				75,
				140,
				194,
				78,
				40,
				76,
				136,
				39,
				242,
				39,
				171,
				87,
				166,
				2,
				0,
				89,
				105,
				168,
				233,
				220,
				115,
				172,
				246,
				215,
				226,
				185,
				123,
				14,
				74,
				171,
				49,
				155,
				19,
				116,
				10,
				byte.MaxValue,
				232,
				79,
				126,
				0,
				61,
				228,
				207,
				118,
				238,
				136,
				34,
				192,
				221,
				199,
				161,
				106,
				186,
				227,
				36,
				24,
				96,
				117,
				207,
				175,
				208,
				7,
				189,
				251,
				248,
				92,
				113,
				168,
				215,
				219,
				201,
				146,
				49,
				179,
				65,
				149,
				87,
				106,
				13,
				171,
				187,
				236,
				133,
				133,
				198,
				29,
				169,
				221,
				26,
				60,
				118,
				43,
				0,
				132,
				234,
				187,
				166,
				229,
				168,
				62,
				185,
				2,
				238,
				182,
				15,
				195,
				37,
				208,
				86,
				223,
				214,
				53,
				181,
				80,
				5,
				186,
				158,
				70,
				93,
				151,
				231,
				105,
				184,
				86,
				181,
				12,
				164,
				162,
				54,
				249,
				220,
				226,
				130,
				55,
				208,
				126,
				5,
				24,
				207,
				198,
				159,
				86,
				104,
				22,
				71,
				248,
				117,
				236,
				6,
				106,
				215,
				7,
				248,
				101,
				78,
				199,
				29,
				5,
				219,
				84,
				101,
				184,
				149,
				230,
				180,
				109,
				140,
				147,
				201,
				130,
				142,
				135,
				36,
				146,
				147,
				73,
				167,
				69,
				168,
				190,
				104,
				49,
				48,
				57,
				182,
				6,
				2,
				182,
				135,
				177,
				6,
				124,
				219,
				244,
				94,
				146,
				24,
				157,
				19,
				166,
				80,
				35,
				122,
				213,
				213,
				252,
				227,
				136,
				250,
				204,
				213,
				246,
				251,
				137,
				203,
				65,
				91,
				166,
				54,
				251,
				249,
				223,
				246,
				179,
				241,
				193,
				44,
				26,
				254,
				2,
				129,
				78,
				198,
				156,
				100,
				96,
				110,
				128,
				23,
				155,
				95,
				227,
				250,
				169,
				114,
				232,
				121,
				147,
				57,
				10,
				232,
				127,
				135,
				175,
				149,
				84,
				64,
				18,
				196,
				221,
				215,
				134,
				115,
				88,
				238,
				8,
				74,
				112,
				85,
				210,
				252,
				68,
				184,
				130,
				248,
				16,
				92,
				111,
				7,
				225,
				15,
				181,
				176,
				113,
				225,
				194,
				223,
				52,
				85,
				126,
				228,
				42,
				199,
				67,
				27,
				167,
				16,
				163,
				223,
				157,
				134,
				37,
				29,
				205,
				71,
				41,
				90,
				105,
				117,
				111,
				70,
				111,
				41,
				9,
				209,
				204,
				172,
				244,
				79,
				153,
				48,
				63,
				26,
				124,
				76,
				103,
				37,
				201,
				175,
				231,
				49,
				58,
				142,
				31,
				51,
				173,
				197,
				144,
				147,
				216,
				132,
				200,
				157,
				202,
				7,
				73,
				217,
				98,
				1,
				82,
				171,
				157,
				121,
				251,
				56,
				244,
				217,
				238,
				14,
				224,
				70,
				19,
				38,
				114,
				252,
				132,
				124,
				115,
				196,
				188,
				189,
				249,
				203,
				170,
				213,
				6,
				249,
				16,
				95,
				201,
				206,
				190,
				94,
				228,
				171,
				178,
				141,
				116,
				166,
				169,
				187,
				2,
				56,
				192,
				249,
				41,
				89,
				210,
				107,
				52,
				79,
				0,
				16,
				218,
				205,
				182,
				229,
				202,
				84,
				159,
				151,
				141,
				93,
				50,
				205,
				196,
				232,
				41,
				220,
				170,
				3,
				238,
				242,
				69,
				117,
				215,
				172,
				176,
				160,
				186,
				92,
				63,
				134,
				182,
				132,
				244,
				212,
				241,
				39,
				89,
				122,
				89,
				174,
				140,
				117,
				235,
				126,
				227,
				24,
				229,
				83,
				58,
				87,
				68,
				36,
				222,
				23,
				62,
				33,
				163,
				31,
				116,
				byte.MaxValue,
				59,
				67,
				117,
				205,
				193,
				105,
				112,
				236,
				110,
				201,
				252,
				35,
				35,
				5,
				27,
				41,
				6,
				76,
				213,
				24,
				106,
				70,
				19,
				82,
				227,
				53,
				116,
				152,
				167,
				180,
				87,
				56,
				188,
				80,
				108,
				47,
				64,
				95,
				182,
				125,
				44,
				72,
				187,
				11,
				39,
				183,
				169,
				28,
				74,
				194,
				239,
				124,
				122,
				239,
				221,
				247,
				19,
				198,
				126,
				198,
				133,
				134,
				189,
				174,
				69,
				190,
				192,
				byte.MaxValue,
				203,
				115,
				213,
				183,
				197,
				12,
				143,
				49,
				24,
				97,
				201,
				90,
				54,
				100,
				73,
				123,
				77,
				18,
				198,
				68,
				51,
				225,
				160,
				129,
				byte.MaxValue,
				22,
				239,
				65,
				189,
				225,
				34,
				149,
				112,
				254,
				20,
				67,
				7,
				64,
				209,
				10,
				151,
				100,
				39,
				205,
				191,
				53,
				61,
				200,
				135,
				184,
				74,
				205,
				3,
				156,
				178,
				117,
				83,
				2,
				232,
				83,
				194,
				94,
				245,
				52,
				180,
				253,
				73,
				144,
				173,
				77,
				180,
				byte.MaxValue,
				215,
				82,
				190,
				203,
				199,
				8,
				14,
				44,
				55,
				239,
				54,
				162,
				114,
				236,
				143,
				20,
				146,
				249,
				232,
				226,
				52,
				123,
				169,
				206,
				107,
				110,
				76,
				60,
				78,
				148,
				70,
				136,
				234,
				247,
				187,
				221,
				37,
				246,
				92,
				101,
				225,
				34,
				246,
				112,
				164,
				118,
				180,
				87,
				100,
				123,
				21,
				136,
				140,
				253,
				235,
				240,
				205,
				126,
				189,
				160,
				141,
				163,
				161,
				140,
				182,
				71,
				51,
				7,
				231,
				byte.MaxValue,
				107,
				96,
				56,
				247,
				147,
				224,
				164,
				204,
				146,
				205,
				111,
				107,
				4,
				148,
				6,
				156,
				69,
				11,
				56,
				218,
				4,
				72,
				61,
				51,
				198,
				180,
				144,
				137,
				254,
				149,
				103,
				172,
				215,
				21,
				193,
				147,
				144,
				109,
				21,
				73,
				19,
				216,
				195,
				51,
				29,
				12,
				17,
				46,
				114,
				125,
				byte.MaxValue,
				1,
				71,
				22,
				161,
				153,
				77,
				117,
				68,
				249,
				36,
				0,
				22,
				151,
				24,
				84,
				13,
				59,
				242,
				160,
				108,
				176,
				196,
				17,
				177,
				101,
				5,
				212,
				20,
				254,
				51,
				243,
				83,
				186,
				205,
				208,
				199,
				234,
				8,
				220,
				96,
				6,
				10,
				19,
				245,
				126,
				161,
				108,
				20,
				246,
				191,
				41,
				159,
				241,
				230,
				49,
				236,
				205,
				221,
				111,
				100,
				69,
				242,
				182,
				162,
				214,
				189,
				140,
				3,
				185,
				154,
				39,
				53,
				232,
				154,
				158,
				43,
				250,
				192,
				124,
				4,
				207,
				49,
				34,
				254,
				34,
				86,
				41,
				182,
				76,
				193,
				119,
				6,
				86,
				129,
				164,
				31,
				138,
				158,
				231,
				115,
				217,
				59,
				254,
				87,
				248,
				95,
				52,
				28,
				101,
				5,
				139,
				18,
				109,
				141,
				24,
				34,
				65,
				226,
				151,
				35,
				27,
				16,
				1,
				114,
				240,
				48,
				146,
				72,
				202,
				114,
				215,
				11,
				115,
				114,
				52,
				141,
				116,
				195,
				146,
				12,
				173,
				129,
				3,
				136,
				216,
				70,
				172,
				33,
				43,
				169,
				82,
				215,
				136,
				160,
				127,
				183,
				96,
				243,
				74,
				92,
				110,
				61,
				101,
				24,
				5,
				35,
				7,
				169,
				242,
				249,
				119,
				104,
				59,
				143,
				110,
				63,
				1,
				24,
				205,
				240,
				77,
				42,
				80,
				202,
				151,
				212,
				192,
				9,
				175,
				232,
				21,
				194,
				169,
				173,
				217,
				111,
				199,
				70,
				47,
				186,
				247,
				220,
				157,
				120,
				133,
				246,
				189,
				151,
				200,
				105,
				82,
				251,
				241,
				70,
				58,
				140,
				249,
				216,
				92,
				226,
				165,
				244,
				76,
				65,
				249,
				25,
				52,
				151,
				230,
				177,
				221,
				242,
				95,
				44,
				18,
				37,
				195,
				251,
				150,
				204,
				133,
				232,
				119,
				24,
				0,
				28,
				41,
				55,
				37,
				41,
				97,
				98,
				181,
				160,
				194,
				172,
				136,
				131,
				200,
				101,
				182,
				203,
				202,
				217,
				27,
				113,
				148,
				211,
				70,
				157,
				16,
				105,
				140,
				25,
				100,
				98,
				130,
				65,
				68,
				56,
				4,
				237,
				113,
				5,
				169,
				231,
				200,
				90,
				170,
				14,
				2,
				238,
				226,
				192,
				123,
				154,
				165,
				184,
				232,
				77,
				154,
				45,
				193,
				8,
				38,
				135,
				12,
				170,
				152,
				208,
				34,
				84,
				102,
				67,
				49,
				183,
				51,
				206,
				242,
				220,
				34,
				212,
				157,
				102,
				220,
				73,
				60,
				239,
				65,
				246,
				86,
				216,
				41,
				97,
				58,
				66,
				0,
				8,
				217,
				60,
				72,
				160,
				207,
				48,
				245,
				71,
				204,
				104,
				56,
				201,
				157,
				114,
				164,
				59,
				180,
				26,
				54,
				190,
				229,
				67,
				249,
				103,
				168,
				99,
				20,
				180,
				88,
				177,
				1,
				38,
				81,
				29,
				57,
				196,
				171,
				230,
				215,
				42,
				225,
				158,
				19,
				185,
				102,
				70,
				170,
				53,
				0,
				169,
				136,
				209,
				121,
				13,
				241,
				235,
				160,
				183,
				78,
				34,
				61,
				152,
				134,
				92,
				135,
				135,
				77,
				31,
				22,
				169,
				254,
				187,
				90,
				168,
				4,
				142,
				13,
				218,
				157,
				70,
				205,
				108,
				131,
				104,
				0,
				67,
				97,
				35,
				242,
				235,
				220,
				241,
				238,
				183,
				159,
				209,
				151,
				88,
				120,
				2,
				250,
				126,
				143,
				244,
				136,
				180,
				243,
				61,
				127,
				240,
				178,
				26,
				7,
				147,
				176,
				248,
				226,
				136,
				106,
				165,
				200,
				116,
				22,
				201,
				50,
				53,
				73,
				118,
				0,
				207,
				181,
				106,
				156,
				59,
				232,
				83,
				233,
				18,
				107,
				250,
				58,
				35,
				244,
				254,
				215,
				67,
				248,
				151,
				107,
				184,
				197,
				166,
				160,
				184,
				236,
				100,
				168,
				157,
				144,
				89,
				104,
				172,
				87,
				219,
				241,
				10,
				31,
				88,
				38,
				95,
				165,
				154,
				116,
				38,
				182,
				183,
				byte.MaxValue,
				72,
				29,
				51,
				11,
				156,
				14,
				196,
				160,
				200,
				101,
				48,
				201,
				211,
				251,
				229,
				101,
				252,
				248,
				243,
				173,
				66,
				202,
				40,
				126,
				126,
				17,
				224,
				170,
				156,
				86,
				167,
				192,
				235,
				189,
				241,
				198,
				57,
				144,
				199,
				0,
				155,
				84,
				199,
				147,
				52,
				253,
				147,
				54,
				84,
				100,
				21,
				75,
				166,
				60,
				160,
				167,
				154,
				221,
				234,
				243,
				148,
				76,
				3,
				102,
				169,
				154,
				37,
				75,
				210,
				167,
				127,
				177,
				92,
				70,
				51,
				49,
				161,
				196,
				114,
				27,
				62,
				61,
				191,
				122,
				47,
				"Not showing all elements because this array is too big (40976 elements)"
			};
			byte[] array5 = new byte[]
			{
				2,
				242,
				192,
				236,
				215,
				63,
				254,
				123,
				132,
				224,
				135,
				37,
				85,
				60,
				156,
				128,
				31,
				160,
				138,
				47,
				162,
				191,
				79,
				193,
				204,
				71,
				84,
				64,
				218,
				170,
				134,
				87,
				55,
				67,
				122,
				128,
				198,
				152,
				155,
				45,
				193,
				141,
				213,
				63,
				21,
				42,
				221,
				103,
				18,
				247,
				12,
				128,
				11,
				87,
				23,
				194,
				208,
				58,
				112,
				5,
				79,
				68,
				215,
				166,
				14,
				34,
				76,
				172,
				220,
				189,
				233,
				237,
				200,
				87,
				68,
				78,
				190,
				193,
				98,
				203,
				35,
				234,
				191,
				19,
				79,
				250,
				94,
				245,
				200,
				64,
				6,
				105,
				26,
				126,
				126,
				65,
				69,
				101,
				243,
				48,
				35,
				35,
				199,
				109,
				189,
				141,
				80,
				19,
				164,
				172,
				93,
				79,
				43,
				7,
				157,
				152,
				91,
				246,
				66,
				214,
				209,
				27,
				176,
				3,
				117,
				228,
				101,
				179,
				179,
				161,
				49,
				207,
				145,
				204,
				33,
				110,
				219,
				37,
				19,
				205,
				208,
				54,
				159,
				230,
				16,
				0,
				183,
				203,
				241,
				132,
				97,
				166,
				216,
				131,
				109,
				228,
				225,
				134,
				234,
				100,
				16,
				105,
				38,
				123,
				221,
				35,
				232,
				12,
				62,
				86,
				251,
				15,
				151,
				8,
				69,
				20,
				9,
				193,
				163,
				96,
				14,
				63,
				144,
				97,
				207,
				240,
				114,
				10,
				154,
				39,
				130,
				140,
				162,
				108,
				250,
				232,
				240,
				108,
				2,
				167,
				219,
				10,
				147,
				57,
				9,
				68,
				126,
				64,
				49,
				236,
				6,
				145,
				166,
				39,
				99,
				194,
				227,
				233,
				220,
				209,
				52,
				102,
				99,
				241,
				24,
				66,
				60,
				195,
				37,
				102,
				33,
				42,
				148,
				201,
				181,
				27,
				163,
				88,
				235,
				186,
				13,
				197,
				7,
				159,
				57,
				183,
				222,
				29,
				167,
				162,
				35,
				143,
				99,
				45,
				175,
				100,
				146,
				73,
				226,
				18,
				177,
				27,
				89,
				83,
				239,
				63,
				97,
				106,
				238,
				byte.MaxValue,
				146,
				35,
				63,
				182,
				146,
				209,
				183,
				16,
				68,
				155,
				231,
				43,
				209,
				6,
				106,
				84,
				117,
				44,
				203,
				192,
				200,
				192,
				78,
				22,
				83,
				201,
				144,
				28,
				235,
				57,
				25,
				248,
				65,
				218,
				57,
				51,
				103,
				170,
				167,
				164,
				152,
				241,
				159,
				186,
				198,
				86,
				237,
				118,
				72,
				61,
				24,
				18,
				172,
				181,
				70,
				30,
				17,
				29,
				54,
				7,
				38,
				158,
				130,
				123,
				95,
				20,
				166,
				71,
				4,
				81,
				199,
				112,
				216,
				232,
				170,
				182,
				172,
				116,
				204,
				253,
				49,
				58,
				5,
				219,
				88,
				3,
				62,
				31,
				157,
				235,
				200,
				49,
				247,
				12,
				102,
				202,
				46,
				243,
				193,
				172,
				220,
				188,
				101,
				180,
				82,
				20,
				152,
				221,
				136,
				145,
				200,
				48,
				194,
				84,
				127,
				9,
				69,
				193,
				50,
				236,
				112,
				15,
				39,
				77,
				93,
				43,
				245,
				126,
				116,
				80,
				30,
				183,
				140,
				147,
				144,
				30,
				135,
				140,
				48,
				253,
				114,
				125,
				64,
				51,
				121,
				108,
				247,
				120,
				14,
				218,
				128,
				1,
				14,
				149,
				84,
				42,
				170,
				118,
				172,
				110,
				171,
				118,
				224,
				184,
				166,
				185,
				118,
				183,
				93,
				249,
				134,
				66,
				byte.MaxValue,
				189,
				152,
				67,
				226,
				152,
				51,
				202,
				178,
				2,
				192,
				183,
				145,
				23,
				86,
				76,
				104,
				131,
				8,
				99,
				209,
				43,
				62,
				245,
				186,
				188,
				219,
				151,
				133,
				253,
				101,
				221,
				138,
				51,
				253,
				58,
				135,
				165,
				167,
				128,
				254,
				80,
				174,
				93,
				48,
				17,
				150,
				86,
				57,
				251,
				86,
				78,
				31,
				232,
				75,
				171,
				189,
				115,
				42,
				84,
				206,
				74,
				137,
				94,
				163,
				68,
				149,
				109,
				164,
				57,
				39,
				142,
				101,
				97,
				110,
				184,
				237,
				186,
				87,
				146,
				164,
				198,
				89,
				112,
				97,
				180,
				201,
				44,
				144,
				215,
				1,
				235,
				4,
				85,
				123,
				125,
				197,
				100,
				55,
				199,
				155,
				39,
				167,
				220,
				84,
				41,
				35,
				200,
				105,
				184,
				15,
				byte.MaxValue,
				70,
				158,
				100,
				208,
				76,
				144,
				216,
				74,
				179,
				79,
				186,
				107,
				7,
				223,
				247,
				154,
				15,
				138,
				100,
				112,
				100,
				28,
				93,
				113,
				180,
				253,
				190,
				236,
				166,
				57,
				117,
				byte.MaxValue,
				66,
				45,
				54,
				215,
				194,
				23,
				207,
				186,
				110,
				226,
				32,
				34,
				250,
				137,
				87,
				32,
				24,
				97,
				54,
				36,
				2,
				248,
				139,
				112,
				184,
				30,
				56,
				119,
				171,
				236,
				195,
				165,
				225,
				204,
				231,
				224,
				104,
				90,
				184,
				132,
				199,
				203,
				63,
				252,
				18,
				215,
				9,
				175,
				31,
				90,
				129,
				189,
				197,
				143,
				252,
				72,
				76,
				85,
				93,
				252,
				250,
				228,
				133,
				235,
				19,
				66,
				184,
				29,
				121,
				106,
				211,
				55,
				174,
				232,
				35,
				52,
				251,
				239,
				238,
				137,
				228,
				111,
				180,
				235,
				66,
				110
			};
			object[] object_ = new object[]
			{
				array,
				array2,
				array3,
				array5,
				array4
			};
			GClass14.gclass2_0.object_0 = object_;
			string empty = string.Empty;
			bool result = GClass14.gclass2_0.method_45(ref empty);
			if (empty != string.Empty)
			{
				this.gclass7_0.method_0("error", empty);
				this.method_36();
				if (empty.Contains("bypassError2"))
				{
					this.class1_0.method_0(GClass14.string_43, "OK", "");
				}
				else
				{
					this.class1_0.method_0(GClass14.string_42, "OK", "");
				}
			}
			return result;
		}

		// Token: 0x06000065 RID: 101 RVA: 0x00015118 File Offset: 0x00013318
		private bool method_58(string activationRecord)
		{
			GClass11 gclass = new GClass11();
			byte[] bytes = gclass.method_6(activationRecord, this.gclass18_0.method_2("ixepOVull6wf5LUX3ZHV/WchtMlpuV1jOsDk6iyBY8A="), this.gclass18_0.method_2("CGe2ySCZpXrpX2XVqSIWOGbM6Er+JeJhRWYNDBjhqOs="));
			UTF8Encoding utf8Encoding = new UTF8Encoding();
			string @string = utf8Encoding.GetString(bytes);
			Dictionary<string, string> dictionary = JsonConvert.DeserializeObject<Dictionary<string, string>>(@string);
			bool result;
			if (!(this.method_32(dictionary, "pw") == string.Empty) && !(this.method_32(dictionary, "mp") == string.Empty) && !(this.method_32(dictionary, "mb") == string.Empty) && !(this.method_32(dictionary, "tc") == string.Empty) && !(this.method_32(dictionary, "ds") == string.Empty) && !(this.method_32(dictionary, "pb") == string.Empty) && !(this.method_32(dictionary, "da") == string.Empty) && !(this.method_32(dictionary, "cf") == string.Empty))
			{
				byte[] bytes2 = gclass.method_6(dictionary["pw"], this.gclass18_0.method_2("ZSg9oDJUEVEd/bo8WDgIlyktTy0VQo/uLoPfNgx+o08="), this.gclass18_0.method_2("CGe2ySCZpXrpX2XVqSIWOGbM6Er+JeJhRWYNDBjhqOs="));
				string string2 = Encoding.UTF8.GetString(bytes2);
				byte[] array = gclass.method_6(dictionary["mp"], this.gclass18_0.method_2("ZSg9oDJUEVEd/bo8WDgIlyktTy0VQo/uLoPfNgx+o08="), this.gclass18_0.method_2("CGe2ySCZpXrpX2XVqSIWOGbM6Er+JeJhRWYNDBjhqOs="));
				byte[] array2 = gclass.method_6(dictionary["mb"], this.gclass18_0.method_2("ZSg9oDJUEVEd/bo8WDgIlyktTy0VQo/uLoPfNgx+o08="), this.gclass18_0.method_2("CGe2ySCZpXrpX2XVqSIWOGbM6Er+JeJhRWYNDBjhqOs="));
				byte[] array3 = gclass.method_6(dictionary["tc"], this.gclass18_0.method_2("ZSg9oDJUEVEd/bo8WDgIlyktTy0VQo/uLoPfNgx+o08="), this.gclass18_0.method_2("CGe2ySCZpXrpX2XVqSIWOGbM6Er+JeJhRWYNDBjhqOs="));
				byte[] array4 = gclass.method_6(dictionary["ds"], this.gclass18_0.method_2("ZSg9oDJUEVEd/bo8WDgIlyktTy0VQo/uLoPfNgx+o08="), this.gclass18_0.method_2("CGe2ySCZpXrpX2XVqSIWOGbM6Er+JeJhRWYNDBjhqOs="));
				byte[] array5 = gclass.method_6(dictionary["pb"], this.gclass18_0.method_2("ZSg9oDJUEVEd/bo8WDgIlyktTy0VQo/uLoPfNgx+o08="), this.gclass18_0.method_2("CGe2ySCZpXrpX2XVqSIWOGbM6Er+JeJhRWYNDBjhqOs="));
				byte[] array6 = gclass.method_6(dictionary["da"], this.gclass18_0.method_2("ZSg9oDJUEVEd/bo8WDgIlyktTy0VQo/uLoPfNgx+o08="), this.gclass18_0.method_2("CGe2ySCZpXrpX2XVqSIWOGbM6Er+JeJhRWYNDBjhqOs="));
				byte[] array7 = gclass.method_6(dictionary["cf"], this.gclass18_0.method_2("ZSg9oDJUEVEd/bo8WDgIlyktTy0VQo/uLoPfNgx+o08="), this.gclass18_0.method_2("CGe2ySCZpXrpX2XVqSIWOGbM6Er+JeJhRWYNDBjhqOs="));
				byte[] array8 = null;
				byte[] array9 = null;
				byte[] array10 = null;
				if (this.method_32(dictionary, "fq") != string.Empty)
				{
					array8 = gclass.method_6(dictionary["fq"], this.gclass18_0.method_2("ZSg9oDJUEVEd/bo8WDgIlyktTy0VQo/uLoPfNgx+o08="), this.gclass18_0.method_2("CGe2ySCZpXrpX2XVqSIWOGbM6Er+JeJhRWYNDBjhqOs="));
				}
				if (this.method_32(dictionary, "ur") != string.Empty)
				{
					array9 = gclass.method_6(dictionary["ur"], this.gclass18_0.method_2("ZSg9oDJUEVEd/bo8WDgIlyktTy0VQo/uLoPfNgx+o08="), this.gclass18_0.method_2("CGe2ySCZpXrpX2XVqSIWOGbM6Er+JeJhRWYNDBjhqOs="));
				}
				if (this.method_32(dictionary, "kc") != string.Empty)
				{
					array10 = gclass.method_6(dictionary["kc"], this.gclass18_0.method_2("ZSg9oDJUEVEd/bo8WDgIlyktTy0VQo/uLoPfNgx+o08="), this.gclass18_0.method_2("CGe2ySCZpXrpX2XVqSIWOGbM6Er+JeJhRWYNDBjhqOs="));
				}
				byte[] array11 = new byte[]
				{
					98,
					112,
					108,
					105,
					115,
					116,
					48,
					48,
					214,
					1,
					2,
					3,
					4,
					5,
					6,
					7,
					8,
					9,
					10,
					11,
					12,
					91,
					66,
					97,
					99,
					107,
					117,
					112,
					83,
					116,
					97,
					116,
					101,
					87,
					86,
					101,
					114,
					115,
					105,
					111,
					110,
					92,
					73,
					115,
					70,
					117,
					108,
					108,
					66,
					97,
					99,
					107,
					117,
					112,
					84,
					85,
					85,
					73,
					68,
					93,
					83,
					110,
					97,
					112,
					115,
					104,
					111,
					116,
					83,
					116,
					97,
					116,
					101,
					84,
					68,
					97,
					116,
					101,
					83,
					110,
					101,
					119,
					83,
					51,
					46,
					51,
					8,
					95,
					16,
					36,
					65,
					54,
					55,
					70,
					68,
					65,
					55,
					65,
					45,
					49,
					50,
					53,
					51,
					45,
					52,
					67,
					56,
					57,
					45,
					56,
					52,
					54,
					67,
					45,
					65,
					52,
					57,
					52,
					50,
					49,
					49,
					49,
					53,
					56,
					70,
					51,
					88,
					102,
					105,
					110,
					105,
					115,
					104,
					101,
					100,
					51,
					65,
					203,
					129,
					91,
					128,
					0,
					0,
					0,
					8,
					21,
					33,
					41,
					54,
					59,
					73,
					78,
					82,
					86,
					87,
					126,
					135,
					0,
					0,
					0,
					0,
					0,
					0,
					1,
					1,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					13,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					144
				};
				byte[] array12 = new byte[]
				{
					60,
					63,
					120,
					109,
					108,
					32,
					118,
					101,
					114,
					115,
					105,
					111,
					110,
					61,
					34,
					49,
					46,
					48,
					34,
					32,
					101,
					110,
					99,
					111,
					100,
					105,
					110,
					103,
					61,
					34,
					85,
					84,
					70,
					45,
					56,
					34,
					63,
					62,
					10,
					60,
					33,
					68,
					79,
					67,
					84,
					89,
					80,
					69,
					32,
					112,
					108,
					105,
					115,
					116,
					32,
					80,
					85,
					66,
					76,
					73,
					67,
					32,
					34,
					45,
					47,
					47,
					65,
					112,
					112,
					108,
					101,
					47,
					47,
					68,
					84,
					68,
					32,
					80,
					76,
					73,
					83,
					84,
					32,
					49,
					46,
					48,
					47,
					47,
					69,
					78,
					34,
					32,
					34,
					104,
					116,
					116,
					112,
					58,
					47,
					47,
					119,
					119,
					119,
					46,
					97,
					112,
					112,
					108,
					101,
					46,
					99,
					111,
					109,
					47,
					68,
					84,
					68,
					115,
					47,
					80,
					114,
					111,
					112,
					101,
					114,
					116,
					121,
					76,
					105,
					115,
					116,
					45,
					49,
					46,
					48,
					46,
					100,
					116,
					100,
					34,
					62,
					10,
					60,
					112,
					108,
					105,
					115,
					116,
					32,
					118,
					101,
					114,
					115,
					105,
					111,
					110,
					61,
					34,
					49,
					46,
					48,
					34,
					62,
					10,
					60,
					100,
					105,
					99,
					116,
					62,
					10,
					9,
					60,
					107,
					101,
					121,
					62,
					65,
					112,
					112,
					108,
					105,
					99,
					97,
					116,
					105,
					111,
					110,
					115,
					60,
					47,
					107,
					101,
					121,
					62,
					10,
					9,
					60,
					100,
					105,
					99,
					116,
					47,
					62,
					10,
					9,
					60,
					107,
					101,
					121,
					62,
					68,
					101,
					118,
					105,
					99,
					101,
					32,
					78,
					97,
					109,
					101,
					60,
					47,
					107,
					101,
					121,
					62,
					10,
					9,
					60,
					115,
					116,
					114,
					105,
					110,
					103,
					62,
					105,
					80,
					104,
					111,
					110,
					101,
					60,
					47,
					115,
					116,
					114,
					105,
					110,
					103,
					62,
					10,
					9,
					60,
					107,
					101,
					121,
					62,
					73,
					110,
					115,
					116,
					97,
					108,
					108,
					101,
					100,
					32,
					65,
					112,
					112,
					108,
					105,
					99,
					97,
					116,
					105,
					111,
					110,
					115,
					60,
					47,
					107,
					101,
					121,
					62,
					10,
					9,
					60,
					100,
					105,
					99,
					116,
					47,
					62,
					10,
					9,
					60,
					107,
					101,
					121,
					62,
					80,
					114,
					111,
					100,
					117,
					99,
					116,
					32,
					86,
					101,
					114,
					115,
					105,
					111,
					110,
					60,
					47,
					107,
					101,
					121,
					62,
					10,
					9,
					60,
					115,
					116,
					114,
					105,
					110,
					103,
					62,
					49,
					50,
					46,
					48,
					60,
					47,
					115,
					116,
					114,
					105,
					110,
					103,
					62,
					10,
					9,
					60,
					107,
					101,
					121,
					62,
					85,
					110,
					105,
					113,
					117,
					101,
					32,
					73,
					100,
					101,
					110,
					116,
					105,
					102,
					105,
					101,
					114,
					60,
					47,
					107,
					101,
					121,
					62,
					10,
					9,
					60,
					115,
					116,
					114,
					105,
					110,
					103,
					62,
					97,
					97,
					97,
					97,
					97,
					97,
					97,
					97,
					97,
					97,
					97,
					97,
					97,
					97,
					97,
					97,
					97,
					97,
					97,
					97,
					97,
					97,
					97,
					97,
					97,
					97,
					97,
					97,
					97,
					97,
					97,
					97,
					97,
					97,
					97,
					97,
					97,
					97,
					97,
					97,
					60,
					47,
					115,
					116,
					114,
					105,
					110,
					103,
					62,
					10,
					9,
					60,
					107,
					101,
					121,
					62,
					105,
					84,
					117,
					110,
					101,
					115,
					32,
					70,
					105,
					108,
					101,
					115,
					60,
					47,
					107,
					101,
					121,
					62,
					10,
					9,
					60,
					100,
					105,
					99,
					116,
					62,
					10,
					9,
					9,
					60,
					107,
					101,
					121,
					62,
					73,
					67,
					45,
					73,
					110,
					102,
					111,
					46,
					115,
					105,
					100,
					118,
					60,
					47,
					107,
					101,
					121,
					62,
					10,
					9,
					9,
					60,
					100,
					97,
					116,
					97,
					62,
					65,
					65,
					69,
					65,
					65,
					90,
					43,
					78,
					81,
					72,
					48,
					109,
					76,
					73,
					70,
					113,
					104,
					82,
					79,
					85,
					65,
					117,
					76,
					69,
					75,
					82,
					56,
					50,
					108,
					53,
					118,
					120,
					55,
					43,
					49,
					65,
					117,
					107,
					103,
					108,
					101,
					69,
					114,
					114,
					78,
					102,
					100,
					108,
					82,
					54,
					55,
					97,
					107,
					55,
					72,
					100,
					90,
					65,
					50,
					118,
					102,
					114,
					117,
					102,
					81,
					107,
					49,
					66,
					86,
					72,
					120,
					75,
					118,
					80,
					83,
					115,
					81,
					52,
					102,
					114,
					90,
					111,
					71,
					122,
					57,
					57,
					67,
					88,
					85,
					48,
					79,
					99,
					103,
					114,
					116,
					99,
					80,
					99,
					57,
					120,
					117,
					115,
					79,
					50,
					88,
					54,
					101,
					80,
					118,
					89,
					69,
					108,
					83,
					118,
					68,
					117,
					85,
					68,
					72,
					114,
					102,
					106,
					73,
					66,
					112,
					108,
					81,
					113,
					66,
					57,
					112,
					50,
					54,
					112,
					70,
					56,
					43,
					99,
					50,
					70,
					51,
					90,
					112,
					85,
					51,
					111,
					72,
					48,
					47,
					79,
					109,
					47,
					107,
					103,
					121,
					55,
					73,
					55,
					121,
					56,
					97,
					69,
					122,
					119,
					56,
					75,
					47,
					75,
					90,
					69,
					77,
					98,
					122,
					97,
					89,
					88,
					107,
					67,
					67,
					67,
					122,
					57,
					70,
					81,
					67,
					54,
					106,
					85,
					69,
					43,
					70,
					48,
					89,
					83,
					47,
					112,
					86,
					98,
					70,
					84,
					82,
					122,
					53,
					84,
					87,
					106,
					67,
					111,
					80,
					83,
					100,
					81,
					76,
					119,
					118,
					52,
					106,
					53,
					49,
					88,
					98,
					114,
					115,
					85,
					68,
					76,
					51,
					70,
					105,
					57,
					116,
					43,
					71,
					82,
					101,
					52,
					112,
					82,
					57,
					77,
					77,
					122,
					80,
					53,
					76,
					98,
					76,
					57,
					72,
					67,
					105,
					80,
					108,
					43,
					50,
					71,
					119,
					72,
					49,
					120,
					56,
					113,
					67,
					119,
					80,
					111,
					105,
					106,
					114,
					52,
					83,
					50,
					54,
					106,
					97,
					72,
					70,
					90,
					43,
					48,
					80,
					121,
					105,
					70,
					70,
					83,
					71,
					78,
					114,
					52,
					47,
					48,
					81,
					86,
					57,
					54,
					52,
					114,
					110,
					107,
					51,
					74,
					78,
					112,
					81,
					122,
					50,
					66,
					108,
					84,
					120,
					87,
					104,
					101,
					76,
					117,
					81,
					110,
					86,
					70,
					52,
					107,
					97,
					106,
					65,
					98,
					114,
					98,
					73,
					54,
					113,
					114,
					67,
					77,
					53,
					53,
					52,
					90,
					118,
					68,
					114,
					75,
					89,
					101,
					88,
					85,
					48,
					108,
					85,
					72,
					114,
					67,
					106,
					106,
					82,
					79,
					117,
					81,
					43,
					51,
					121,
					90,
					80,
					122,
					86,
					85,
					57,
					72,
					111,
					70,
					101,
					102,
					77,
					68,
					103,
					87,
					83,
					72,
					108,
					108,
					115,
					70,
					87,
					53,
					100,
					103,
					48,
					114,
					97,
					71,
					47,
					74,
					104,
					78,
					109,
					118,
					76,
					86,
					78,
					56,
					107,
					119,
					102,
					53,
					118,
					80,
					111,
					56,
					54,
					66,
					116,
					89,
					67,
					115,
					105,
					43,
					102,
					99,
					67,
					83,
					122,
					104,
					50,
					100,
					86,
					116,
					55,
					78,
					90,
					55,
					50,
					105,
					54,
					116,
					107,
					66,
					57,
					86,
					99,
					69,
					72,
					77,
					99,
					51,
					104,
					99,
					81,
					117,
					53,
					90,
					113,
					72,
					48,
					85,
					114,
					101,
					49,
					114,
					55,
					103,
					80,
					122,
					98,
					122,
					117,
					72,
					110,
					109,
					56,
					119,
					74,
					74,
					67,
					87,
					51,
					106,
					65,
					114,
					104,
					88,
					82,
					122,
					116,
					104,
					88,
					103,
					110,
					110,
					65,
					54,
					70,
					88,
					88,
					57,
					106,
					119,
					49,
					84,
					97,
					103,
					104,
					65,
					83,
					67,
					99,
					78,
					110,
					65,
					121,
					100,
					49,
					117,
					109,
					73,
					120,
					69,
					51,
					118,
					89,
					68,
					52,
					122,
					52,
					52,
					57,
					119,
					87,
					106,
					112,
					101,
					79,
					121,
					103,
					83,
					80,
					67,
					56,
					106,
					98,
					100,
					98,
					101,
					122,
					90,
					116,
					47,
					72,
					114,
					83,
					74,
					48,
					57,
					109,
					101,
					69,
					55,
					50,
					109,
					104,
					54,
					50,
					101,
					52,
					49,
					112,
					54,
					71,
					73,
					121,
					50,
					53,
					75,
					88,
					122,
					73,
					106,
					85,
					84,
					80,
					87,
					82,
					100,
					71,
					74,
					102,
					87,
					43,
					104,
					56,
					105,
					99,
					105,
					104,
					115,
					75,
					55,
					102,
					70,
					111,
					65,
					43,
					55,
					67,
					97,
					98,
					88,
					106,
					100,
					85,
					73,
					89,
					100,
					53,
					53,
					109,
					71,
					50,
					122,
					107,
					112,
					72,
					85,
					49,
					71,
					118,
					84,
					69,
					50,
					117,
					55,
					97,
					49,
					53,
					74,
					106,
					111,
					86,
					84,
					97,
					82,
					111,
					52,
					110,
					65,
					119,
					57,
					109,
					69,
					52,
					118,
					89,
					97,
					108,
					75,
					56,
					88,
					51,
					88,
					76,
					99,
					82,
					114,
					90,
					79,
					55,
					69,
					65,
					78,
					109,
					88,
					117,
					115,
					77,
					57,
					69,
					101,
					54,
					47,
					51,
					115,
					52,
					110,
					77,
					78,
					110,
					51,
					113,
					71,
					52,
					84,
					89,
					110,
					51,
					87,
					112,
					56,
					50,
					110,
					51,
					83,
					88,
					73,
					101,
					65,
					114,
					113,
					81,
					57,
					116,
					47,
					103,
					51,
					122,
					115,
					84,
					88,
					108,
					74,
					88,
					121,
					49,
					85,
					120,
					66,
					103,
					49,
					79,
					120,
					48,
					115,
					97,
					81,
					81,
					111,
					100,
					107,
					117,
					69,
					98,
					73,
					75,
					115,
					107,
					52,
					121,
					52,
					113,
					87,
					88,
					50,
					70,
					110,
					100,
					53,
					105,
					76,
					67,
					111,
					104,
					113,
					103,
					49,
					87,
					80,
					98,
					115,
					121,
					103,
					51,
					87,
					101,
					69,
					53,
					121,
					82,
					84,
					49,
					102,
					73,
					52,
					113,
					77,
					70,
					56,
					87,
					48,
					67,
					120,
					107,
					55,
					66,
					107,
					116,
					55,
					102,
					103,
					49,
					106,
					67,
					85,
					67,
					48,
					76,
					122,
					119,
					107,
					82,
					110,
					52,
					74,
					43,
					99,
					49,
					89,
					90,
					121,
					100,
					103,
					75,
					83,
					116,
					112,
					103,
					122,
					116,
					65,
					113,
					71,
					79,
					74,
					71,
					73,
					121,
					75,
					67,
					56,
					90,
					75,
					56,
					49,
					55,
					73,
					89,
					100,
					69,
					88,
					90,
					112,
					81,
					72,
					102,
					104,
					71,
					43,
					99,
					114,
					77,
					79,
					80,
					107,
					75,
					114,
					120,
					113,
					108,
					112,
					51,
					116,
					97,
					102,
					118,
					82,
					114,
					90,
					54,
					103,
					117,
					102,
					103,
					110,
					56,
					56,
					119,
					98,
					57,
					113,
					70,
					49,
					106,
					57,
					79,
					89,
					87,
					113,
					116,
					116,
					88,
					57,
					121,
					86,
					55,
					56,
					121,
					89,
					89,
					117,
					113,
					80,
					122,
					103,
					48,
					47,
					119,
					103,
					75,
					101,
					48,
					111,
					107,
					83,
					104,
					102,
					47,
					104,
					100,
					74,
					69,
					85,
					66,
					111,
					50,
					83,
					90,
					111,
					83,
					100,
					80,
					74,
					77,
					87,
					73,
					69,
					122,
					121,
					75,
					49,
					111,
					52,
					53,
					68,
					121,
					109,
					74,
					43,
					86,
					90,
					79,
					73,
					70,
					55,
					121,
					103,
					51,
					56,
					82,
					102,
					74,
					43,
					101,
					67,
					79,
					47,
					103,
					66,
					48,
					97,
					49,
					122,
					88,
					53,
					111,
					67,
					98,
					117,
					81,
					80,
					86,
					57,
					112,
					83,
					110,
					102,
					97,
					50,
					104,
					49,
					115,
					57,
					82,
					72,
					121,
					114,
					103,
					104,
					106,
					74,
					103,
					99,
					68,
					102,
					73,
					113,
					82,
					108,
					84,
					109,
					82,
					120,
					89,
					101,
					67,
					43,
					80,
					88,
					76,
					82,
					53,
					109,
					51,
					98,
					73,
					100,
					71,
					54,
					57,
					121,
					88,
					78,
					80,
					114,
					49,
					120,
					71,
					99,
					104,
					108,
					65,
					118,
					117,
					97,
					105,
					102,
					50,
					106,
					87,
					78,
					113,
					122,
					69,
					72,
					56,
					98,
					49,
					90,
					50,
					67,
					118,
					68,
					48,
					84,
					72,
					102,
					82,
					75,
					79,
					75,
					67,
					108,
					52,
					83,
					106,
					114,
					116,
					66,
					82,
					107,
					71,
					105,
					102,
					106,
					108,
					112,
					71,
					116,
					97,
					78,
					75,
					75,
					87,
					106,
					119,
					109,
					77,
					117,
					122,
					90,
					120,
					85,
					86,
					48,
					66,
					102,
					111,
					117,
					49,
					102,
					75,
					88,
					82,
					98,
					110,
					43,
					68,
					73,
					99,
					88,
					104,
					112,
					57,
					66,
					121,
					69,
					89,
					66,
					87,
					79,
					78,
					116,
					112,
					115,
					109,
					76,
					114,
					116,
					77,
					70,
					102,
					116,
					121,
					57,
					68,
					119,
					119,
					103,
					55,
					108,
					51,
					78,
					80,
					68,
					90,
					106,
					43,
					50,
					89,
					113,
					74,
					48,
					75,
					68,
					50,
					102,
					111,
					118,
					98,
					84,
					111,
					68,
					87,
					72,
					74,
					121,
					121,
					53,
					100,
					71,
					53,
					69,
					73,
					54,
					72,
					116,
					73,
					105,
					82,
					121,
					77,
					80,
					117,
					86,
					75,
					71,
					90,
					111,
					116,
					83,
					98,
					107,
					74,
					47,
					81,
					102,
					88,
					117,
					69,
					118,
					75,
					87,
					89,
					83,
					107,
					76,
					103,
					120,
					108,
					74,
					87,
					81,
					87,
					90,
					87,
					115,
					82,
					67,
					85,
					104,
					47,
					103,
					55,
					49,
					87,
					102,
					49,
					107,
					102,
					101,
					56,
					72,
					67,
					109,
					119,
					57,
					73,
					71,
					109,
					90,
					90,
					52,
					67,
					75,
					120,
					82,
					73,
					68,
					51,
					97,
					70,
					104,
					55,
					101,
					107,
					84,
					77,
					86,
					106,
					68,
					103,
					81,
					55,
					79,
					84,
					83,
					113,
					67,
					80,
					50,
					118,
					99,
					100,
					103,
					68,
					78,
					116,
					81,
					85,
					76,
					107,
					114,
					49,
					70,
					74,
					73,
					100,
					79,
					102,
					54,
					120,
					54,
					66,
					112,
					54,
					75,
					107,
					57,
					50,
					69,
					52,
					55,
					88,
					101,
					79,
					106,
					74,
					50,
					114,
					114,
					54,
					97,
					68,
					102,
					101,
					110,
					90,
					88,
					104,
					107,
					109,
					108,
					111,
					68,
					121,
					100,
					121,
					68,
					98,
					114,
					73,
					116,
					102,
					98,
					76,
					116,
					54,
					85,
					74,
					89,
					98,
					97,
					86,
					79,
					89,
					120,
					53,
					118,
					77,
					68,
					80,
					99,
					80,
					86,
					70,
					69,
					107,
					66,
					68,
					47,
					73,
					97,
					70,
					98,
					121,
					76,
					84,
					56,
					118,
					109,
					106,
					84,
					68,
					73,
					56,
					52,
					43,
					52,
					51,
					47,
					112,
					81,
					79,
					87,
					87,
					97,
					122,
					110,
					90,
					97,
					71,
					49,
					98,
					110,
					79,
					51,
					72,
					114,
					116,
					72,
					47,
					90,
					76,
					70,
					70,
					84,
					67,
					110,
					101,
					67,
					114,
					106,
					56,
					98,
					85,
					121,
					82,
					109,
					69,
					76,
					86,
					65,
					66,
					53,
					48,
					72,
					120,
					89,
					70,
					66,
					103,
					82,
					49,
					115,
					112,
					47,
					85,
					119,
					70,
					68,
					75,
					88,
					77,
					74,
					88,
					118,
					113,
					84,
					89,
					65,
					65,
					53,
					87,
					53,
					85,
					85,
					53,
					106,
					53,
					97,
					54,
					119,
					52,
					116,
					97,
					87,
					78,
					65,
					88,
					48,
					82,
					85,
					76,
					98,
					106,
					119,
					106,
					103,
					114,
					57,
					57,
					66,
					102,
					110,
					83,
					115,
					115,
					65,
					48,
					71,
					107,
					122,
					80,
					103,
					110,
					106,
					43,
					119,
					80,
					116,
					48,
					85,
					103,
					84,
					60,
					47,
					100,
					97,
					116,
					97,
					62,
					10,
					9,
					60,
					47,
					100,
					105,
					99,
					116,
					62,
					10,
					60,
					47,
					100,
					105,
					99,
					116,
					62,
					10,
					60,
					47,
					112,
					108,
					105,
					115,
					116,
					62,
					10
				};
				object[] object_ = new object[]
				{
					array12,
					array11,
					array,
					array3,
					array2,
					array4,
					array5,
					array6,
					array7,
					array8,
					array9,
					array10
				};
				GClass14.gclass2_0.object_0 = object_;
				string empty = string.Empty;
				bool flag = GClass14.gclass2_0.method_46(string2, ref empty);
				if (empty != string.Empty)
				{
					this.gclass7_0.method_0("error", empty);
					this.method_36();
					if (empty.Contains("bypassError2"))
					{
						this.class1_0.method_0(GClass14.string_43, "OK", "");
					}
					else
					{
						this.class1_0.method_0(GClass14.string_42, "OK", "");
					}
				}
				result = flag;
			}
			else
			{
				result = false;
			}
			return result;
		}

		// Token: 0x06000066 RID: 102 RVA: 0x000155EC File Offset: 0x000137EC
		private void method_59()
		{
			Dictionary<string, string> payload = new Dictionary<string, string>
			{
				{
					this.gclass18_0.method_2("NLqXl40AKDWQmbd+SeVU0A=="),
					this.gclass18_0.method_2("/easQeYkzO7lhU17XzyvVg==")
				},
				{
					this.gclass18_0.method_2("8Jl2ApLnZeExgu1ctpNVKQ=="),
					GClass14.string_77
				},
				{
					this.gclass18_0.method_2("BsTuUb4fVMcpgEYzakRyFQ=="),
					GClass14.string_1
				}
			};
			string text = this.gclass7_0.method_2(payload, null);
			if (text != null && text.Contains(GClass14.string_45))
			{
				base.Invoke(new Action(delegate()
				{
					MaterialDialog materialDialog = new MaterialDialog(this, GClass14.string_9, GClass14.string_46, "Open Site", false, "Cancel", true);
					DialogResult dialogResult = materialDialog.ShowDialog(this);
					if (dialogResult == DialogResult.OK)
					{
						this.class1_0.method_2(GClass14.string_80);
						base.Close();
					}
				}));
			}
			string fullName = new DirectoryInfo(Assembly.GetEntryAssembly().Location).Parent.FullName;
			if (!Directory.Exists(fullName + "\\libs\\") || !Directory.Exists(fullName + "\\boot\\"))
			{
				this.class1_0.method_0(GClass14.string_66, "OK", "");
				Environment.Exit(0);
			}
			string infFilePath;
			if (Environment.Is64BitOperatingSystem)
			{
				infFilePath = fullName + "\\drivers\\usbaapl\\x64\\usbaapl64.inf";
			}
			else
			{
				infFilePath = fullName + "\\drivers\\usbaapl\\x86\\usbaapl.inf";
			}
			if (!this.method_56("USBAAPL") && !this.method_56("AppleUSB"))
			{
				JailForm.smethod_2(infFilePath);
			}
			this.gclass0_0 = new GClass0();
			this.gclass0_0.Event_0 += this.method_24;
			this.gclass0_0.Event_1 += this.method_54;
			this.gclass0_0.Event_2 += this.method_55;
			this.gclass0_0.Event_3 += this.method_25;
			this.gclass0_0.method_7();
			this.string_1 = this.gclass18_0.method_2("W9lXQTciqu2oFGlSDg3TBQ==");
			this.string_2 = this.gclass18_0.method_2("e/+9X2Gu5HHvEeefRr2BMw==");
			this.string_3 = this.gclass18_0.method_2("v0HYSi+UOWe1nhH375sTqw==");
			this.string_4 = this.gclass18_0.method_2("PPwuWfLX3E0jfemJ8XzS/Q==");
			this.string_5 = this.gclass18_0.method_2("Pb61d2d2INdnRbV70eAwRg==");
			this.string_6 = this.gclass18_0.method_2("YoQSWHQ9TBe24OB/2EXMrQ==");
			this.string_7 = this.gclass18_0.method_2("yT9KtYBIT/lSZqmDrc2iQA==");
			for (;;)
			{
				if (this.method_47() && this.bool_1 && !this.bool_0)
				{
					if (this.method_27(false))
					{
						this.bool_1 = false;
						this.method_38();
					}
					Thread.Sleep(1500);
				}
				this.method_53();
				Thread.Sleep(400);
			}
		}

		// Token: 0x06000067 RID: 103 RVA: 0x0001589C File Offset: 0x00013A9C
		private void method_60()
		{
			GClass14.string_9 = this.gclass18_0.method_2("AVR2Wgy6zJiijtNpiSowKA==");
			GClass14.string_16 = this.gclass18_0.method_2("ZdwM6aKky8tXzz0qtXSc95IBupgnZGktqPYBNL+FAGltSlZqi+bSleLeiZx4DR0Un1MOzFQDaFuzPoasz6zjnDob8AUTT7PMyi+wBNNmNw/NXQ4fMCSEpVwyK7cUDnVmJy57SmuW0LQrkZ8oU3z1SWEGZFHmZUW4dD6F9EloxOfS3gE/c+lX8pR+BN/Lnc6VmBK1BONDz+W/dHmP+gWWBywZmmuHhD6MJWHAQouIjc4=");
			GClass14.string_33 = this.gclass18_0.method_2("qjMSYFy8ebFE1J6eGcLLJ1ExYHOt8l15EFKBWVE1/SGx5f/CF/lOK+bMQZ7/EAGvQf20QeLKOYis5Z0FRtXh61lLjw6C+/Hx+n7qpl42jn0tQ51HauP7O1/y2JRQhaP1");
			GClass14.string_18 = this.gclass18_0.method_2("NRxmyWt3dbqcMowvFJ0V5ero9kAC+N42MdajBFbuNoqFcSgfE7lXUE2zl7/1wE7Z9osKtv+muP1o0keewJV4CQr+RFajHdgTFmDciJLNrRIWmnnfWICU5HTYWm6WPxy0r8qliDRtJ34OGN+wDHmpANCWntP5zDNqhkGML0z3vDxNaxOBLoT0qctwfYzyhhTq");
			GClass14.string_46 = this.gclass18_0.method_2("5ZfbdNR50RP229jY03FPHqcPAL2ngUYrIS0F7KNnLPVlobQEmeOVant5uV7phR0H83LNvR4c+K2qNI6ERxwfEsAFn9lOZ7ak94Fkod9lVhjJI6bnblb5iSJzw2PKMZgW");
			GClass14.string_76 = this.gclass18_0.method_2("16G0pah9ZXbMhXXmC5rAgbyHzkWP1o+VgGBwwZ7I562F07hMXNITwRMUVRencqi0o4JWbbu+0jTFUWUcrcIQ3g==");
			GClass14.bypassError2 = this.gclass18_0.method_2("q5p2CWAkgQsHJvHe4+ntE65ux34oavY/yw7AJ0nI1eF4NnkEwS9uwd/naOa3oRAxEIH+rOqFGQA6L0mopwpQA7MvlcKWKQiclL+0mJYlS5KSi0qM5EXSHctTVzIs2fpB");
			GClass14.string_77 = this.gclass18_0.method_2("06S8+t/Uar+c9YBX9d+ueg==") + string.Join("", Application.ProductVersion.Split(new char[]
			{
				'.'
			}));
			GClass14.string_1 = Environment.OSVersion.VersionString;
			try
			{
				RegistryKey registryKey = Registry.LocalMachine.OpenSubKey("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion");
				string text = (string)registryKey.GetValue("ProductName");
				if (text != null && text != string.Empty)
				{
					string str;
					if (Environment.Is64BitOperatingSystem)
					{
						str = "x64";
					}
					else
					{
						str = "x86";
					}
					GClass14.string_1 = text + " (" + str + ")";
				}
			}
			catch
			{
			}
			GClass14.string_78 = this.gclass18_0.method_2("LO62rRTT9i7L4IW4KPvkocNFBSzgNjz+Uc8ZDdPHFec=");
			GClass14.string_79 = this.gclass18_0.method_2("62sC9Kyg81hMiIeBsh9+Zy8lvJKkxulOydwrq2qla9YAtpglwyA7qI64d/Oxq1Vc");
			GClass14.string_80 = this.gclass18_0.method_2("62sC9Kyg81hMiIeBsh9+Z31qY81pOI2TAApHZ6M7t9E=");
			GClass14.string_81 = this.gclass18_0.method_2("62sC9Kyg81hMiIeBsh9+Z5SrskmbeQ9XiBZMi4kICHhlGbnRj6u5Bk4LDOChen5U86CGKi8sgiIk5UI5tbAiH1SG5C9JzyilzwuQ1Pn/LoI=");
			GClass14.string_82 = this.gclass18_0.method_2("62sC9Kyg81hMiIeBsh9+Z5SrskmbeQ9XiBZMi4kICHhlGbnRj6u5Bk4LDOChen5U86CGKi8sgiIk5UI5tbAiH1SG5C9JzyilzwuQ1Pn/LoI=");
			GClass14.string_83 = this.gclass18_0.method_2("S2weBaFOaVBSgDp1j5cOBzYXEJkz7+eeByGBcuGHU6gJzRcXSNtIlZDNKKdZAoky");
			GClass14.string_84 = this.gclass18_0.method_2("62sC9Kyg81hMiIeBsh9+Z31qY81pOI2TAApHZ6M7t9E=");
			GClass14.string_85 = this.gclass18_0.method_2("62sC9Kyg81hMiIeBsh9+Z2VAnGsZ8v6bg43/P+BlxhL6QJb4vhFXhkjVZj60cROXumDk00aa4Ymt1VvsYvnRPZfKaXbfecldgh3ScwZzz+o=");
			GClass14.string_86 = this.gclass18_0.method_2("62sC9Kyg81hMiIeBsh9+Z9CfOZFFa6cx/eCU+WVszTXC3wYtYt7D6rPh74Apd2px");
			GClass14.string_6 = this.gclass18_0.method_2("62sC9Kyg81hMiIeBsh9+Z9pZhnEm1wB/NH/rn9MP1/+mLWbB/uner9A055C/Usn2qK0KYrmHwFl/8pUnxlMNtg==");
			GClass14.string_38 = this.gclass18_0.method_2("Bx1M0nX3Hs/rJOk0HjGqt2vSqSToroU5jcpfCR9wZlJur2NBJ6JJCxvM79wy4loppzC+XjmQVAtMaL86jY3iW6fjDLx2/oFp5YFFCjr+UCSQH9BQIG7oXJUh09U0vOZ+4qxaWjfVL4areQawcWejFfME/0JAqBPg/s1gAEY41OVTs/8bsS0fFvl6d+fQuhl/Vk+GrEUz4MCUqPlsAuF3zW2XBqZERXNI4Vjee4c4WJnxWMzImjq6NIUvBPYAIhxCDHIgMNAoVvzUkvArMQQwrtvO/2MMHyDsa33mR8PmJlMS6dUv7RDbDpvLcznGZaGMsnmwdlq4eDwJwfKpV136Y4RFit2EyE4orPFtU9RxMde0bEPubHZ2aGl1kJBWRv60");
			GClass14.string_7 = this.gclass18_0.method_2("fEktcKiEeb6fAwR9ZxofzKalVP6VhhBEODiB3pPuMzY=");
			GClass14.string_8 = this.gclass18_0.method_2("naqfEElE35n+AGJ5Ts3Cu7weisNKq/WdyOLVUfoCWFQ=");
			if (!GClass14.string_1.Contains("Windows 10") && !GClass14.string_1.Contains("Windows 11"))
			{
				GClass14.string_4 = this.gclass18_0.method_2("62sC9Kyg81hMiIeBsh9+Z5xQBDdtZ1vtzjPtitNvMreICVHJcD+PeP+MCaFcnrtvw5TqqcchFOGEanCX6keGpg==");
				GClass14.string_5 = this.gclass18_0.method_2("62sC9Kyg81hMiIeBsh9+Z5xQBDdtZ1vtzjPtitNvMreICVHJcD+PeP+MCaFcnrtvGJb6UrWMLWSD7UTv+akUpQ==");
			}
		}

		// Token: 0x06000068 RID: 104 RVA: 0x00015B5C File Offset: 0x00013D5C
		protected override void Dispose(bool disposing)
		{
			if (disposing && this.icontainer_0 != null)
			{
				this.icontainer_0.Dispose();
			}
			base.Dispose(disposing);
		}

		// Token: 0x06000069 RID: 105 RVA: 0x00015B8C File Offset: 0x00013D8C
		private void InitializeComponent()
		{
			ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof(Form1));
			this.statusLabel = new Label();
			this.statusColor = new MaterialDivider();
			this.windowTitle = new Label();
			this.loader = new PictureBox();
			this.close = new Button();
			this.minimize = new Button();
			this.pictureBoxMain = new PictureBox();
			this.connectedPanel = new Class3();
			this.iosValue = new Label();
			this.productTypeValue = new Label();
			this.udidValue = new Label();
			this.serialNumberValue = new Label();
			this.imeiValue = new Label();
			this.iosLabel = new Label();
			this.productTypeLabel = new Label();
			this.udidLabel = new Label();
			this.serialNumberLabel = new Label();
			this.imeiLabel = new Label();
			this.deviceImage = new PictureBox();
			this.startButton = new MaterialButton();
			this.noConnectPanel = new Class3();
			this.cantSeeLabel = new Label();
			this.connectDevicePicture = new PictureBox();
			((ISupportInitialize)this.loader).BeginInit();
			((ISupportInitialize)this.pictureBoxMain).BeginInit();
			this.connectedPanel.SuspendLayout();
			((ISupportInitialize)this.deviceImage).BeginInit();
			this.noConnectPanel.SuspendLayout();
			((ISupportInitialize)this.connectDevicePicture).BeginInit();
			base.SuspendLayout();
			this.statusLabel.Font = new Font("Microsoft Sans Serif", 14.25f, FontStyle.Regular, GraphicsUnit.Point, 204);
			this.statusLabel.Location = new Point(-2, 575);
			this.statusLabel.Name = "statusLabel";
			this.statusLabel.Size = new Size(854, 32);
			this.statusLabel.TabIndex = 18;
			this.statusLabel.Text = "Please connect your iOS device to computer via USB cable";
			this.statusLabel.TextAlign = ContentAlignment.MiddleCenter;
			this.statusColor.BackColor = Color.FromArgb(30, 0, 0, 0);
			this.statusColor.Depth = 0;
			this.statusColor.Location = new Point(-2, 562);
			this.statusColor.MouseState = 0;
			this.statusColor.Name = "statusColor";
			this.statusColor.Size = new Size(854, 6);
			this.statusColor.TabIndex = 17;
			this.windowTitle.Font = new Font("Microsoft Sans Serif", 14.25f, FontStyle.Regular, GraphicsUnit.Point, 204);
			this.windowTitle.Location = new Point(-2, -4);
			this.windowTitle.Name = "windowTitle";
			this.windowTitle.Size = new Size(854, 39);
			this.windowTitle.TabIndex = 19;
			this.windowTitle.Text = "iRemove Tools";
			this.windowTitle.TextAlign = ContentAlignment.BottomCenter;
			this.windowTitle.MouseDown += this.windowTitle_MouseDown;
			this.loader.BackColor = Color.Transparent;
			this.loader.BackgroundImageLayout = ImageLayout.None;
			this.loader.Image = Resources.loaderFast;
			this.loader.Location = new Point(772, 500);
			this.loader.Name = "loader";
			this.loader.Size = new Size(68, 48);
			this.loader.SizeMode = PictureBoxSizeMode.StretchImage;
			this.loader.TabIndex = 22;
			this.loader.TabStop = false;
			this.loader.Visible = false;
			this.close.BackgroundImageLayout = ImageLayout.Center;
			this.close.FlatAppearance.BorderSize = 0;
			this.close.FlatStyle = FlatStyle.Flat;
			this.close.Font = new Font("Microsoft Sans Serif", 12f, FontStyle.Regular, GraphicsUnit.Point, 204);
			this.close.ForeColor = Color.White;
			this.close.Image = Resources.icons8_delete;
			this.close.Location = new Point(820, 8);
			this.close.Name = "close";
			this.close.Size = new Size(30, 25);
			this.close.TabIndex = 21;
			this.close.UseVisualStyleBackColor = true;
			this.close.Click += this.close_Click;
			this.minimize.BackColor = Color.Transparent;
			this.minimize.FlatAppearance.BorderSize = 0;
			this.minimize.FlatStyle = FlatStyle.Flat;
			this.minimize.Font = new Font("Microsoft Sans Serif", 12f, FontStyle.Regular, GraphicsUnit.Point, 204);
			this.minimize.ForeColor = Color.White;
			this.minimize.Image = Resources.icons8_macos_minimize;
			this.minimize.Location = new Point(784, 8);
			this.minimize.Name = "minimize";
			this.minimize.Size = new Size(30, 25);
			this.minimize.TabIndex = 20;
			this.minimize.UseVisualStyleBackColor = false;
			this.minimize.Click += this.minimize_Click;
			this.pictureBoxMain.BackgroundImageLayout = ImageLayout.Stretch;
			this.pictureBoxMain.Location = new Point(-2, -4);
			this.pictureBoxMain.Name = "pictureBoxMain";
			this.pictureBoxMain.Size = new Size(854, 618);
			this.pictureBoxMain.SizeMode = PictureBoxSizeMode.StretchImage;
			this.pictureBoxMain.TabIndex = 2;
			this.pictureBoxMain.TabStop = false;
			this.connectedPanel.BackColor = Color.DodgerBlue;
			this.connectedPanel.Controls.Add(this.iosValue);
			this.connectedPanel.Controls.Add(this.productTypeValue);
			this.connectedPanel.Controls.Add(this.udidValue);
			this.connectedPanel.Controls.Add(this.serialNumberValue);
			this.connectedPanel.Controls.Add(this.imeiValue);
			this.connectedPanel.Controls.Add(this.iosLabel);
			this.connectedPanel.Controls.Add(this.productTypeLabel);
			this.connectedPanel.Controls.Add(this.udidLabel);
			this.connectedPanel.Controls.Add(this.serialNumberLabel);
			this.connectedPanel.Controls.Add(this.imeiLabel);
			this.connectedPanel.Controls.Add(this.deviceImage);
			this.connectedPanel.Controls.Add(this.startButton);
			this.connectedPanel.Color_0 = Color.Empty;
			this.connectedPanel.Boolean_0 = false;
			this.connectedPanel.Location = new Point(24, 57);
			this.connectedPanel.Name = "connectedPanel";
			this.connectedPanel.Size = new Size(776, 437);
			this.connectedPanel.Boolean_1 = true;
			this.connectedPanel.TabIndex = 18;
			this.connectedPanel.Visible = false;
			this.iosValue.AutoSize = true;
			this.iosValue.Font = new Font("Microsoft Sans Serif", 14.25f, FontStyle.Regular, GraphicsUnit.Point, 204);
			this.iosValue.Location = new Point(399, 291);
			this.iosValue.Name = "iosValue";
			this.iosValue.Size = new Size(111, 24);
			this.iosValue.TabIndex = 21;
			this.iosValue.Text = "iOS Version";
			this.iosValue.TextAlign = ContentAlignment.MiddleLeft;
			this.productTypeValue.AutoSize = true;
			this.productTypeValue.Font = new Font("Microsoft Sans Serif", 14.25f, FontStyle.Regular, GraphicsUnit.Point, 204);
			this.productTypeValue.Location = new Point(411, 236);
			this.productTypeValue.Name = "productTypeValue";
			this.productTypeValue.Size = new Size(123, 24);
			this.productTypeValue.TabIndex = 20;
			this.productTypeValue.Text = "Product Type";
			this.productTypeValue.TextAlign = ContentAlignment.MiddleLeft;
			this.udidValue.AutoSize = true;
			this.udidValue.Font = new Font("Microsoft Sans Serif", 14.25f, FontStyle.Regular, GraphicsUnit.Point, 204);
			this.udidValue.Location = new Point(341, 181);
			this.udidValue.Name = "udidValue";
			this.udidValue.Size = new Size(53, 24);
			this.udidValue.TabIndex = 19;
			this.udidValue.Text = "UDID";
			this.udidValue.TextAlign = ContentAlignment.MiddleLeft;
			this.serialNumberValue.AutoSize = true;
			this.serialNumberValue.Font = new Font("Microsoft Sans Serif", 14.25f, FontStyle.Regular, GraphicsUnit.Point, 204);
			this.serialNumberValue.Location = new Point(419, 126);
			this.serialNumberValue.Name = "serialNumberValue";
			this.serialNumberValue.Size = new Size(131, 24);
			this.serialNumberValue.TabIndex = 18;
			this.serialNumberValue.Text = "Serial Number";
			this.serialNumberValue.TextAlign = ContentAlignment.MiddleLeft;
			this.serialNumberValue.Click += this.serialNumberValue_Click;
			this.imeiValue.AutoSize = true;
			this.imeiValue.Font = new Font("Microsoft Sans Serif", 14.25f, FontStyle.Regular, GraphicsUnit.Point, 204);
			this.imeiValue.Location = new Point(335, 71);
			this.imeiValue.Name = "imeiValue";
			this.imeiValue.Size = new Size(47, 24);
			this.imeiValue.TabIndex = 17;
			this.imeiValue.Text = "IMEI";
			this.imeiValue.TextAlign = ContentAlignment.MiddleLeft;
			this.imeiValue.Click += this.imeiValue_Click;
			this.iosLabel.AutoSize = true;
			this.iosLabel.Font = new Font("Microsoft Sans Serif", 14.25f, FontStyle.Regular, GraphicsUnit.Point, 204);
			this.iosLabel.Location = new Point(281, 291);
			this.iosLabel.Name = "iosLabel";
			this.iosLabel.Size = new Size(116, 24);
			this.iosLabel.TabIndex = 16;
			this.iosLabel.Text = "iOS Version:";
			this.iosLabel.TextAlign = ContentAlignment.MiddleLeft;
			this.productTypeLabel.AutoSize = true;
			this.productTypeLabel.Font = new Font("Microsoft Sans Serif", 14.25f, FontStyle.Regular, GraphicsUnit.Point, 204);
			this.productTypeLabel.Location = new Point(281, 236);
			this.productTypeLabel.Name = "productTypeLabel";
			this.productTypeLabel.Size = new Size(128, 24);
			this.productTypeLabel.TabIndex = 15;
			this.productTypeLabel.Text = "Product Type:";
			this.productTypeLabel.TextAlign = ContentAlignment.MiddleLeft;
			this.udidLabel.AutoSize = true;
			this.udidLabel.Font = new Font("Microsoft Sans Serif", 14.25f, FontStyle.Regular, GraphicsUnit.Point, 204);
			this.udidLabel.Location = new Point(281, 181);
			this.udidLabel.Name = "udidLabel";
			this.udidLabel.Size = new Size(58, 24);
			this.udidLabel.TabIndex = 14;
			this.udidLabel.Text = "UDID:";
			this.udidLabel.TextAlign = ContentAlignment.MiddleLeft;
			this.serialNumberLabel.AutoSize = true;
			this.serialNumberLabel.Font = new Font("Microsoft Sans Serif", 14.25f, FontStyle.Regular, GraphicsUnit.Point, 204);
			this.serialNumberLabel.Location = new Point(281, 126);
			this.serialNumberLabel.Name = "serialNumberLabel";
			this.serialNumberLabel.Size = new Size(136, 24);
			this.serialNumberLabel.TabIndex = 13;
			this.serialNumberLabel.Text = "Serial Number:";
			this.serialNumberLabel.TextAlign = ContentAlignment.MiddleLeft;
			this.imeiLabel.AutoSize = true;
			this.imeiLabel.Font = new Font("Microsoft Sans Serif", 14.25f, FontStyle.Regular, GraphicsUnit.Point, 204);
			this.imeiLabel.Location = new Point(281, 71);
			this.imeiLabel.Name = "imeiLabel";
			this.imeiLabel.Size = new Size(52, 24);
			this.imeiLabel.TabIndex = 12;
			this.imeiLabel.Text = "IMEI:";
			this.imeiLabel.TextAlign = ContentAlignment.MiddleLeft;
			this.deviceImage.Image = Resources.x_white;
			this.deviceImage.Location = new Point(-13, 31);
			this.deviceImage.Name = "deviceImage";
			this.deviceImage.Size = new Size(315, 351);
			this.deviceImage.SizeMode = PictureBoxSizeMode.Zoom;
			this.deviceImage.TabIndex = 11;
			this.deviceImage.TabStop = false;
			this.startButton.AutoSize = false;
			this.startButton.AutoSizeMode = AutoSizeMode.GrowAndShrink;
			this.startButton.BackColor = Color.Transparent;
			this.startButton.Cursor = Cursors.Hand;
			this.startButton.Density = 0;
			this.startButton.Depth = 0;
			this.startButton.Enabled = false;
			this.startButton.HighEmphasis = false;
			this.startButton.Icon = null;
			this.startButton.Location = new Point(288, 391);
			this.startButton.Margin = new Padding(4, 6, 4, 6);
			this.startButton.MouseState = 0;
			this.startButton.Name = "startButton";
			this.startButton.NoAccentTextColor = Color.Empty;
			this.startButton.Size = new Size(239, 38);
			this.startButton.TabIndex = 10;
			this.startButton.Text = "Start";
			this.startButton.Type = 2;
			this.startButton.UseAccentColor = false;
			this.startButton.UseVisualStyleBackColor = false;
			this.startButton.Click += this.startButton_Click;
			this.noConnectPanel.BackColor = Color.DodgerBlue;
			this.noConnectPanel.Controls.Add(this.cantSeeLabel);
			this.noConnectPanel.Controls.Add(this.connectDevicePicture);
			this.noConnectPanel.Color_0 = Color.Empty;
			this.noConnectPanel.Boolean_0 = false;
			this.noConnectPanel.Location = new Point(267, 54);
			this.noConnectPanel.Name = "noConnectPanel";
			this.noConnectPanel.Size = new Size(319, 484);
			this.noConnectPanel.Boolean_1 = true;
			this.noConnectPanel.TabIndex = 17;
			this.cantSeeLabel.Font = new Font("Microsoft Sans Serif", 14.25f, FontStyle.Regular, GraphicsUnit.Point, 204);
			this.cantSeeLabel.ForeColor = Color.DeepSkyBlue;
			this.cantSeeLabel.Location = new Point(36, 450);
			this.cantSeeLabel.Name = "cantSeeLabel";
			this.cantSeeLabel.Size = new Size(245, 23);
			this.cantSeeLabel.TabIndex = 16;
			this.cantSeeLabel.Text = "Can't see your device? Click here";
			this.cantSeeLabel.TextAlign = ContentAlignment.MiddleCenter;
			this.cantSeeLabel.Click += this.cantSeeLabel_Click;
			this.connectDevicePicture.BackColor = Color.Transparent;
			this.connectDevicePicture.BackgroundImageLayout = ImageLayout.None;
			this.connectDevicePicture.Image = Resources.ConnectDevice;
			this.connectDevicePicture.Location = new Point(3, 14);
			this.connectDevicePicture.Name = "connectDevicePicture";
			this.connectDevicePicture.Size = new Size(313, 435);
			this.connectDevicePicture.SizeMode = PictureBoxSizeMode.Zoom;
			this.connectDevicePicture.TabIndex = 15;
			this.connectDevicePicture.TabStop = false;
			this.BackgroundImageLayout = ImageLayout.None;
			base.ClientSize = new Size(846, 611);
			base.Controls.Add(this.loader);
			base.Controls.Add(this.close);
			base.Controls.Add(this.minimize);
			base.Controls.Add(this.windowTitle);
			base.Controls.Add(this.statusLabel);
			base.Controls.Add(this.connectedPanel);
			base.Controls.Add(this.statusColor);
			base.Controls.Add(this.noConnectPanel);
			base.Controls.Add(this.pictureBoxMain);
			base.FormBorderStyle = FormBorderStyle.FixedSingle;
			base.FormStyle = 0;
			base.Icon = (Icon)componentResourceManager.GetObject("$this.Icon");
			base.MaximizeBox = false;
			this.MaximumSize = new Size(846, 611);
			this.MinimumSize = new Size(846, 611);
			base.Name = "Form1";
			base.Padding = new Padding(0);
			base.Sizable = false;
			base.StartPosition = FormStartPosition.CenterScreen;
			this.Text = "iRemove Tools";
			base.Load += this.Form1_Load;
			((ISupportInitialize)this.loader).EndInit();
			((ISupportInitialize)this.pictureBoxMain).EndInit();
			this.connectedPanel.ResumeLayout(false);
			this.connectedPanel.PerformLayout();
			((ISupportInitialize)this.deviceImage).EndInit();
			this.noConnectPanel.ResumeLayout(false);
			((ISupportInitialize)this.connectDevicePicture).EndInit();
			base.ResumeLayout(false);
		}

		// Token: 0x04000010 RID: 16
		private MaterialSkinManager materialSkinManager_0;

		// Token: 0x04000011 RID: 17
		private Thread thread_0;

		// Token: 0x04000012 RID: 18
		private Thread thread_1;

		// Token: 0x04000013 RID: 19
		private Thread thread_2;

		// Token: 0x04000014 RID: 20
		public bool bool_0 = false;

		// Token: 0x04000015 RID: 21
		private bool bool_1 = false;

		// Token: 0x04000016 RID: 22
		private bool bool_2 = false;

		// Token: 0x04000017 RID: 23
		private GClass0 gclass0_0;

		// Token: 0x04000018 RID: 24
		private string string_0;

		// Token: 0x04000019 RID: 25
		private string string_1;

		// Token: 0x0400001A RID: 26
		private string string_2;

		// Token: 0x0400001B RID: 27
		private string string_3;

		// Token: 0x0400001C RID: 28
		private string string_4;

		// Token: 0x0400001D RID: 29
		private string string_5;

		// Token: 0x0400001E RID: 30
		private string string_6;

		// Token: 0x0400001F RID: 31
		private string string_7;

		// Token: 0x04000020 RID: 32
		private string string_8;

		// Token: 0x04000021 RID: 33
		private string string_9;

		// Token: 0x04000022 RID: 34
		private GClass7 gclass7_0;

		// Token: 0x04000023 RID: 35
		private Class1 class1_0;

		// Token: 0x04000024 RID: 36
		private GClass15 gclass15_0;

		// Token: 0x04000025 RID: 37
		private GClass17 gclass17_0;

		// Token: 0x04000026 RID: 38
		private GClass12 gclass12_0;

		// Token: 0x04000027 RID: 39
		private GClass10 gclass10_0;

		// Token: 0x04000028 RID: 40
		private GClass18 gclass18_0;

		// Token: 0x04000029 RID: 41
		private JailForm jailForm_0;

		// Token: 0x0400002A RID: 42
		private bool bool_3 = false;

		// Token: 0x0400002B RID: 43
		private bool bool_4 = false;

		// Token: 0x0400002C RID: 44
		private bool bool_5 = false;

		// Token: 0x0400002D RID: 45
		private IContainer icontainer_0 = null;

		// Token: 0x0400002E RID: 46
		private Label cantSeeLabel;

		// Token: 0x0400002F RID: 47
		private PictureBox connectDevicePicture;

		// Token: 0x04000030 RID: 48
		private Label iosLabel;

		// Token: 0x04000031 RID: 49
		private Label productTypeLabel;

		// Token: 0x04000032 RID: 50
		private Label udidLabel;

		// Token: 0x04000033 RID: 51
		private Label serialNumberLabel;

		// Token: 0x04000034 RID: 52
		private Label imeiLabel;

		// Token: 0x04000035 RID: 53
		private PictureBox deviceImage;

		// Token: 0x04000036 RID: 54
		private MaterialButton startButton;

		// Token: 0x04000037 RID: 55
		private Label statusLabel;

		// Token: 0x04000038 RID: 56
		private MaterialDivider statusColor;

		// Token: 0x04000039 RID: 57
		private Label windowTitle;

		// Token: 0x0400003A RID: 58
		private Button minimize;

		// Token: 0x0400003B RID: 59
		private Button close;

		// Token: 0x0400003C RID: 60
		private Label iosValue;

		// Token: 0x0400003D RID: 61
		private Label productTypeValue;

		// Token: 0x0400003E RID: 62
		private Label udidValue;

		// Token: 0x0400003F RID: 63
		private Label serialNumberValue;

		// Token: 0x04000040 RID: 64
		private Label imeiValue;

		// Token: 0x04000041 RID: 65
		private PictureBox pictureBoxMain;

		// Token: 0x04000042 RID: 66
		private PictureBox loader;

		// Token: 0x04000043 RID: 67
		private Class3 noConnectPanel;

		// Token: 0x04000044 RID: 68
		private Class3 connectedPanel;
	}
}
